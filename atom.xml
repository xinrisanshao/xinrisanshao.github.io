<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>新日三少的博客</title>
  <subtitle>Big big pig</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wangxinri.cn/"/>
  <updated>2018-01-17T12:43:10.734Z</updated>
  <id>http://www.wangxinri.cn/</id>
  
  <author>
    <name>新日三少</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>顺序容器概述</title>
    <link href="http://www.wangxinri.cn/2017/10/26/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8%E6%A6%82%E8%BF%B0/"/>
    <id>http://www.wangxinri.cn/2017/10/26/顺序容器概述/</id>
    <published>2017-10-26T13:59:00.000Z</published>
    <updated>2018-01-17T12:43:10.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>介绍顺序容器的种类及基本操作。<br><a id="more"></a></p>
<h1 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h1><p>一个容器就是一些特定类型对象的集合。<strong>顺序容器</strong>（sequential container）为程序员提供了控制元素存储和访问顺序的能力。<strong>这种顺序不依赖于元素的值，而是与元素加入容器时的位置相对应</strong>。与之相对的是11章的<strong>有序和无序关联容器</strong>，它们根据关键字的值来存储元素。</p>
<p>所有顺序容器都提供了快速访问元素的能力，但是，这些容器在以下方面都有不同的性能折中。</p>
<ul>
<li>向容器添加或从容器中删除元素的代价。</li>
<li>非顺序访问容器中的元素。</li>
</ul>
<p>顺序容器类型：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span> 可变大小数组。支持快速随机访问，在尾部之外的位置插入或删除元素可能很慢。</div><div class="line"><span class="built_in">deque</span> 双端队列。支持快速随机访问。在头尾位置插入/删除速度很快。</div><div class="line"><span class="built_in">list</span> 双向链表。只支持双向顺序访问。在<span class="built_in">list</span>中任何位置插入/删除都很快</div><div class="line">forward_list 单向链表。只支持单向顺序访问。在链表任何位置进行插入/删除操作都很快。</div><div class="line"><span class="built_in">array</span> 固定大小数组。支持快速随机访问。不能添加或删除元素。</div><div class="line"><span class="built_in">string</span> 与<span class="built_in">vector</span>相似的容器，但专门用于保存字符。随机访问快。在尾部插入/删除速度快。</div></pre></td></tr></table></figure>
<ul>
<li>除了array外，其他容器都提供高效、灵活的内存管理。</li>
<li>string和vector将元素保存在连续的内存空间中。因为连续，所以下标访问非常快。但在中间插入、删除较慢（O(n)）。有时添加一个元素还可能需要分配的额外空间，这种情况所有元素必须移动到新的存储空间中</li>
<li>forward_list和array是新C++标准增加的类型。array比内置数组更安全。forward_list没有size()操作。新标准库的容器比旧版本的快得多。</li>
</ul>
<h2 id="确定使用哪种顺序容器"><a href="#确定使用哪种顺序容器" class="headerlink" title="确定使用哪种顺序容器"></a>确定使用哪种顺序容器</h2><p><strong>通常，使用vector是最好的选择，除非你有很好的理由选择其他容器。</strong></p>
<ul>
<li>一般用vector。</li>
<li>如果程序有很多小元素，且空间的额外开销很重要，则不要用list或forward_list。</li>
<li>要随机访问元素用vector或deque。</li>
<li>如果要在中间插入或删除元素，应用list或forward_list。</li>
<li>如果要在头尾插入或删除元素。但不会在中间插入或删除元素，用deque。</li>
<li>如果程序只有在读取输入的时候才需要在容器中间位置插入元素，随后需要随机访问元素。如果确实需要，则考虑在输入阶段用list，一旦输入完成，将list中的元素拷贝到一个vector中。</li>
</ul>
<p>如果程序既需要随机访问元素，又需要在容器中间插入元素，该怎么办？</p>
<p>一般来说，应用中占主导地位的操作（执行的访问操作更多还是插入/删除更多）决定了容器类型的选择。在此情况下，对两种容器分别测试应用的性能可能就是必要的了。</p>
<h1 id="容器库概述"><a href="#容器库概述" class="headerlink" title="容器库概述"></a>容器库概述</h1><p>容器类型上的操作形成了一种层次：</p>
<ul>
<li>某些操作是所有容器类型都提供的。</li>
<li>另外一些操作仅针对顺序容器、关联容器或无序容器。</li>
<li>还有一些操作只适用于一小部分容器。</li>
</ul>
<h2 id="对容器可以保存的元素类型的限制"><a href="#对容器可以保存的元素类型的限制" class="headerlink" title="对容器可以保存的元素类型的限制"></a>对容器可以保存的元素类型的限制</h2><p>顺序容器几乎可以保存任意类型的元素。特别是，我们可以定义一个容器，其元素的类型是另外一个容器。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; lines;     <span class="comment">//lines是一个vector，其元类型是string的vector</span></div></pre></td></tr></table></figure>
<p>某些类没有默认的构造函数。我们可以定义一个保存这种类型对象的容器，但我们在构造这种容器时不能只传递给它一个元素数目参数：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//假定noDefault是一个没有默认构造函数的类型</span></div><div class="line"><span class="built_in">vector</span>&lt;noDefault&gt; v1(<span class="number">10</span>,init);      <span class="comment">//正确：提供了元素初始化器</span></div><div class="line"><span class="built_in">vector</span>&lt;noDefault&gt; v2(<span class="number">10</span>);           <span class="comment">//错误：必须提供一个元素初始化器</span></div></pre></td></tr></table></figure>
<font color="red"> <strong>容器操作：(待补充)</strong> </font>

<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="标准库array具有固定大小"><a href="#标准库array具有固定大小" class="headerlink" title="标准库array具有固定大小"></a>标准库array具有固定大小</h3><p>与内置数组一样，标准库array的大小也是类型的一部分。当定义一个array时，除了指定元素类型，还要指定容器大小：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>,42&gt;        <span class="comment">//类型为：保存42个int的数组</span></div><div class="line"><span class="built_in">array</span>&lt;<span class="built_in">string</span>,10&gt;     <span class="comment">//类型为：保存10个string的数组</span></div></pre></td></tr></table></figure>
<p>为了使用array类型，我们必须同时指定元素类型和大小：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt;::size_type i;     <span class="comment">//数组类型包括元素类型和大小</span></div><div class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>&gt;::size_type j;        <span class="comment">//错误：array&lt;int&gt;不是一个类型</span></div></pre></td></tr></table></figure></p>
<p>初始化array：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt; ia1;       <span class="comment">//10个默认初始化的int</span></div><div class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt; ia2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;    <span class="comment">//列表初始化</span></div><div class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt; ia3 = &#123;<span class="number">42</span>&#125;;      <span class="comment">//ia3[0]为42，剩余元素为0</span></div></pre></td></tr></table></figure>
<p>值得注意的是，虽然我们不能对内置数组类型进行拷贝或对象赋值操作，但是array并无此限制。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> digs[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line"><span class="keyword">int</span> cpy[<span class="number">10</span>] = digs;            <span class="comment">//错误，内置数组不支持拷贝或赋值</span></div><div class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt; digits = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line"><span class="built_in">array</span>&lt;<span class="keyword">int</span>,10&gt; copy = digits;   <span class="comment">//正确，只要数组类型匹配即合法</span></div></pre></td></tr></table></figure></p>
<h2 id="赋值和swap"><a href="#赋值和swap" class="headerlink" title="赋值和swap"></a>赋值和swap</h2><p>赋值相关的运算符可用于所有的容器。赋值运算符将其左边容器中的全部元素替换为右边容器中元素的拷贝。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">c1 = c2;       <span class="comment">//将c1的内容替换为c2中元素的拷贝</span></div><div class="line">c1 = &#123;a,b,c&#125;;  <span class="comment">//赋值后，c1大小为3</span></div></pre></td></tr></table></figure>
<p>如果两个容器原来的大小不同，赋值运算后两者的大小都与右边容器的原大小相同。</p>
<p>与内置数组不同，<strong>标准库array类型允许赋值</strong>。赋值号左右两边的运算对象必须具有相同的类型。也就是array进行赋值，<strong>左右两边数组大小必须相等</strong>。</p>
<p><strong>1.assign(仅顺序容器)</strong></p>
<p><strong>允许我们从一个不同但相容的类型赋值，或者从容器的一个子序列赋值</strong>。assign操作用参数所指定的元素（的拷贝）替换左边容器中的所有元素。例如，我们可以用assign实现将一个vector中的一段char *值赋予一个list中的string：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; names;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">const</span> <span class="keyword">char</span> *&gt; oldstyle;</div><div class="line">name = oldstyle;   <span class="comment">//错误，容器类型不匹配，赋值，类型必须完全一样</span></div><div class="line"><span class="comment">//正确：可以将const char * 转化为string</span></div><div class="line">names.assign(oldstyle.cbegin(),oldstyle.cend());</div></pre></td></tr></table></figure>
<p>assign的第二个版本接受一个整型值和一个元素值。它用指定数目且具有相同给定值的元素替换容器中原有的元素：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//等价于slist1.clear();</span></div><div class="line"><span class="comment">//后跟slist1.insert(slist1.begin(),10,"Hiya!");</span></div><div class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; slist1(<span class="number">1</span>);      <span class="comment">//1个元素，为空string</span></div><div class="line">slist1.assign(<span class="number">10</span>,<span class="string">"Hiya!"</span>);</div></pre></td></tr></table></figure>
<p><strong>2.使用swap</strong></p>
<p>swap操作交换两个相同类型容器的内容。调用swap之后，两个容器中的元素将会交换。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; svec1(<span class="number">10</span>);       <span class="comment">//10个元素的vector</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; svec2(<span class="number">24</span>);       <span class="comment">//24个元素的vector</span></div><div class="line">swap(svec1,svec2);</div></pre></td></tr></table></figure>
<p><strong>除array外，swap不对任何元素进行拷贝、删除或插入操作。因此可以保证在常数时间内完成</strong>。</p>
<p>在新标准中，容器既提供成员版本的swap，也提供非成员版本的swap。而早期标准库版本只提供成员函数版本的swap。非成员版本的swap在泛型编程中是非常重要的。<strong>统一使用非成员版本的swap是一个好习惯。</strong></p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>每个容器类型都支持相等运算符（== 和 ！=）；除了无序关联容器外的所有容器都支持关系运算符（&gt;、&gt;=、&lt;、&lt;=）。<strong>关系运算符左右两边的运算对象必须是相同类型的容器。且必须保存相同类型的元素。</strong></p>
<ul>
<li>如果两个容器具有相同大小且所有元素都两两对应相等，则这两个容器相等；否则两个容器不等。</li>
<li>如果两个容器大小不同，但较小容器中每个元素都等于较大容器中的对应元素，则较小容器小于较大容器。</li>
<li>如果两个容器都不是另一个容器的前缀子序列，则它们的比较结果取决于第一个不相等的元素的比较结果。 </li>
</ul>
<p><strong>容器的关系运算符使用元素的关系运算符完成比较</strong>：<br>容器的相等运算符实际上是使用元素的==运算符 来实现比较的，而其他关系运算符 是使用元素的&lt;运算符 。如果元素类型不支持所需运算符，那么保存这种元素的容器就不能使用相应的关系运算符。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;Sale_data&gt; storeA, storeB;</div><div class="line"><span class="keyword">if</span>(storeA &lt; storeB)                 <span class="comment">// 错误：Sales_data没有&lt;运算符</span></div></pre></td></tr></table></figure>
<p>注意： <strong>只有当其元素类型也定义了相应的比较运算符时，我们才可以使用关系运算符来比较两个容器。</strong></p>
<h1 id="顺序容器的操作"><a href="#顺序容器的操作" class="headerlink" title="顺序容器的操作"></a>顺序容器的操作</h1><p>顺序容器和关联容器的不同之处在于两者组织元素的方式。这些不同之处直接关系到了元素如何存储、访问、添加以及删除。上一节介绍了所有容器都支持的操作。本章剩余部分将介绍顺序容器所特有的操作。</p>
<h2 id="向顺序容器添加元素"><a href="#向顺序容器添加元素" class="headerlink" title="向顺序容器添加元素"></a>向顺序容器添加元素</h2><p>除了array外，所有标准库容器都提供灵活的内存管理。在运行时可以动态添加或删除元素来改变容器大小。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">向顺序容器添加元素的操作：</div><div class="line">操作会改变容器的大小；<span class="built_in">array</span>不支持这些操作。</div><div class="line"></div><div class="line">forward_list有自己专有版本的insert和emplace；</div><div class="line">forward_list不支持push_back和emplace_back</div><div class="line"><span class="built_in">vector</span>和<span class="built_in">string</span>不支持push_front和emplace_front</div><div class="line">c.push_back(t)　　　　　　　　在c的尾部创建一个值为t或由args创建的元素，返回<span class="keyword">void</span></div><div class="line">c.emplace_back(args)</div><div class="line">c.push_front(t)　　　　　　　　在c的头部创建一个值为t或由args创建的元素，返回<span class="keyword">void</span></div><div class="line">c.emplace_front(args)</div><div class="line">c.insert(p,t)　　　　　　　　　  在迭代器p指向的元素之前创建一个值为t或由args创建的元素，返回指向新添加的元素的迭代器</div><div class="line">c.emplace(p,args)</div><div class="line">c.insert(p,n,t)　 在迭代器p指向的元素之前插入n个值为t的元素。返回指向新添加的第一个元素的迭代器；若n为<span class="number">0</span>，则返回p</div><div class="line">c.insert(p,b,e)　 将迭代器b和e指向的范围内的元素插入到迭代器p指向的元素之前。b和e不能指向c中的元素，返回指向新添加的第一个元素的迭代器；若范围为空，则返回p</div><div class="line">c.insert(p,il)　　il是一个花括号包围的元素值列表，将这些给定值插入到迭代器p指向的元素之前。返回指向新添加的第一个元素的迭代器：若列表为空，则返回p</div></pre></td></tr></table></figure>
<p><strong>向一个vector、string或deque插入元素会使所有指向容器的迭代器、引用和指针失效。</strong></p>
<p>当我们使用这些操作时，必须记得不同容器使用不同的策略来分配元素空间，而这些策略直接影响性能。在一个vector或string的尾部之外的任何位置，或是一个deque的首位之外的任何位置添加元素，都需要移动元素。而且，向一个vector或string添加元素可能引起整个对象存储空间的重新分配。重新分配一个对象的存储空间需要分配新的内存，并将元素从旧的空间移动到新的空间中。</p>
<h2 id="使用push-back"><a href="#使用push-back" class="headerlink" title="使用push_back"></a>使用push_back</h2><p><strong>我们看到push_back将一个元素追加到一个vector的尾部。除array和forward_list之外，每个顺序容器（包括string类型）都支持push_back。</strong></p>
<p>例如，下面的循环每次读取一个string到word中，然后追加到容器尾部：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从标准输入读取数据，将每个单词放到容器末尾</span></div><div class="line"><span class="built_in">string</span> word;</div><div class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;word)</div><div class="line">　　container.push_back(word);</div></pre></td></tr></table></figure>
<p>对push_back的调用在container尾部创建了一个新的元素，将container的size增大了1。该元素的值为word的一个拷贝，container的类型可以是list、vector或deque。</p>
<p><strong>关键概念</strong>：当我们用一个对象来初始化容器时，或将一个对象插入到容器中时，实际上放入到容器中的是对象值的一个拷贝，而不是对象本身。就像我们将一个对象传递给非引用参数一样，容器中的元素与提供值的对象之间没有任何关联。随后对容器中元素的任何改变都不会影响到原始对象，反之亦然。</p>
<h2 id="使用push-front"><a href="#使用push-front" class="headerlink" title="使用push_front"></a>使用push_front</h2><p><strong>除了push_back, list、forward_list和deque容器还支持名为push_front的类似操作。此操作将元素插入到容器头部：</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; ilist;</div><div class="line"><span class="comment">//将元素添加到Ilist开头</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">size_t</span> ix=<span class="number">0</span>;ix!=<span class="number">4</span>;++ix)</div><div class="line">　　ilist.push_front(ix);</div></pre></td></tr></table></figure>
<p>此循环将元素0、1、2、3添加到ilist头部。每个元素都插入到list的新的开始位置。即，当我们插入1时，它会被放置在0之前，2被放置在1之前，依次类推。因此，在循环中以这种方式将元素添加到容器中，最终会形成逆序。</p>
<p><strong>注意：</strong> deque像vector一样提供了随机访问元素的能力，但它提供了vector所不支持的push_front。deque保证在容器首部进行插入和删除元素的操作都只花费常数时间。与vector一样，在deque首尾之外的位置插入元素会很耗时。</p>
<h2 id="在容器中的特定位置添加元素（insert）"><a href="#在容器中的特定位置添加元素（insert）" class="headerlink" title="在容器中的特定位置添加元素（insert）"></a>在容器中的特定位置添加元素（insert）</h2><p><strong>push_back和push_front操作提供了一种方便地在顺序容器尾部或头部插入单个元素的方法。insert成员提供了更一般的添加功能，它允许我们在容器中任意位置插入0个或多个元素。vector、deque、list和string都支持insert成员。forward_list提供了特殊版本的insert成员。</strong></p>
<p>每个insert函数都接受一个迭代器作为其一个参数。迭代器指出了在容器中什么位置放置新元素。它可以指向容器中任何位置，包括容器尾部之后的下一个位置。由于迭代器可能指向容器尾部之后不存在的元素的位置，而且在容器开始位置插入元素是很有用的功能，<font color="red"> <strong>所有insert函数将元素插入到迭代器所指定的位置之前</strong> </font>。例如，下面的语句</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slist.insert(iter,<span class="string">"Hello!"</span>);  <span class="comment">//将hello添加到iter之前的位置</span></div></pre></td></tr></table></figure>
<p>虽然某些容器不支持push_front操作，但他们对于insert操作并无类似的限制（插入开始位置）。因此我们可以将元素插入到容器的开始位置，而不必担心容器是否支持push_front:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; svec;</div><div class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; slist;</div><div class="line"><span class="comment">//等价于调用slist.push_front("Hello!");</span></div><div class="line">slist.insert(slist.begin(),<span class="string">"Hello!"</span>);</div><div class="line"><span class="comment">//vector不支持push_front，但我们可以插入到begin()之前</span></div><div class="line"><span class="comment">//警告：插入到vector末尾之外的任何位置都可能很慢</span></div><div class="line">svec.insert(svec.begin(),<span class="string">"Hello!"</span>);</div></pre></td></tr></table></figure>
<p><strong>将元素插入到vector、deque和string中的任何位置都是合法的。然而，这样做可能很耗时</strong>。</p>
<h2 id="插入范围内元素"><a href="#插入范围内元素" class="headerlink" title="插入范围内元素"></a>插入范围内元素</h2><p>除了第一个迭代器参数之外，insert函数还可以接受更多的参数，这与容器构造函数类似。其中一个版本接受一个元素数目和一个值，它将指定数量的元素添加到指定位置之前，这些元素够按给定值初始化：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svec.insert(svec.end(),<span class="number">10</span>,<span class="string">"Anna"</span>);</div></pre></td></tr></table></figure>
<p>这行代码将10个元素插入到svec的末尾，并将所有元素都初始化为string“Anna”。</p>
<p>接受一对迭代器或一个初始化列表的insert版本将给定范围中的元素插入到指定位置之前：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v=&#123;<span class="string">"quasi"</span>,<span class="string">"simba"</span>,<span class="string">"frollo"</span>,<span class="string">"scar"</span>&#125;;</div><div class="line"><span class="comment">//将v的最后两个元素添加到slist的开始位置</span></div><div class="line">slist.insert(slist.begin(),v.end()<span class="number">-2</span>,v.end());</div><div class="line">slist.insert(slist.end(),&#123;<span class="string">"these"</span>,<span class="string">"words"</span>,<span class="string">"will"</span>,<span class="string">"go"</span>,<span class="string">"at"</span>,<span class="string">"the"</span>,<span class="string">"end"</span>&#125;);</div><div class="line">slist.insert(slist.begin(),slist.begin(),slist.end()); <span class="comment">//运行时错误：迭代器表示要拷贝的范围，不能指向与目的位置相同的容器</span></div></pre></td></tr></table></figure>
<p><strong>如果我们传递给insert一对迭代器，它们不能指向添加元素的目标容器。</strong></p>
<h2 id="使用insert的返回值"><a href="#使用insert的返回值" class="headerlink" title="使用insert的返回值"></a>使用insert的返回值</h2><p>通过使用insert的返回值，可以在容器中一个特定的位置反复插入元素：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; lst;</div><div class="line"><span class="keyword">auto</span> iter=lst.begin();</div><div class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;word)</div><div class="line">　　iter=lst.insert(iter,word);  <span class="comment">//等价于调用push_front</span></div></pre></td></tr></table></figure>
<p>在循环之前，我们将iter初始化为lst.begin()。第一次调用insert会将我们刚刚读入的string插入到iter所指向的元素之前的位置。insert返回的迭代器恰好指向这个新元素。我们将此迭代器赋予iter并重复循环，读取下一个单词。</p>
<h2 id="使用emplace操作"><a href="#使用emplace操作" class="headerlink" title="使用emplace操作"></a>使用emplace操作</h2><p>使用emplace操作</p>
<p><strong>新标准引入了三个成员——emplace_front、emplace和emplace_back，这些操作（构造而不是拷贝元素）。这些操作分别对应push_front、insert和push_back，允许我们将元素放置在容器头部、一个指定的位置之前或容器尾部。</strong></p>
<p>当调用push或insert成员函数时，我们将元素类型对象传递给它们，这些对象被拷贝到容器中。而当我们调用一个emplace成员函数时，<strong>则是将参数传递给元素类型的构造函数</strong>。emplace成员使用这些参数在容器管理的内存空间中直接构造元素。例如，假定c保存Sales_data元素：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在c的末尾构造一个Sales_data对象</span></div><div class="line"><span class="comment">//使用三个参数的Sales_data的构造函数</span></div><div class="line">c.emplace_back(<span class="string">"978-0590353403"</span>,<span class="number">25</span>,<span class="number">15.99</span>);</div><div class="line">c.push_back(<span class="string">"978-0590353403"</span>,<span class="number">25</span>,<span class="number">15.99</span>);     <span class="comment">//错误：没有接受三个参数的push_back版本</span></div><div class="line"><span class="comment">//正确：创建一个临时的Sales_data对象传递给push_back</span></div><div class="line">c.push_back(Sales_data((<span class="string">"978-0590353403"</span>,<span class="number">25</span>,<span class="number">15.99</span>));</div></pre></td></tr></table></figure>
<p><strong>其中对emplace_back的调用和第二个push_back调用都会创建新的Sales_data对象。在调用emplace_back时，会在容器管理的内存空间中直接创建对象。而调用push_back则会创建一个局部临时对象，并将其压入容器中。</strong></p>
<font color="red"> <strong>emplace函数的参数根据元素类型而变化，参数必须与元素类型的构造函数相匹配</strong> </font> ：<br><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//iter指向c中一个元素，其中保存了Sales_data元素</span></div><div class="line">c.emplace_back();<span class="comment">//使用Sales_data的默认构造函数</span></div><div class="line">c.emplace(iter,<span class="string">"999-999999999"</span>); <span class="comment">//使用Sales_data(string)</span></div><div class="line"><span class="comment">//使用Sales_data的接受一个ISBN、一个count和一个price的构造函数</span></div><div class="line">c.emplace_front(<span class="string">"978-0590353403"</span>,<span class="number">25</span>,<span class="number">15.99</span>);</div></pre></td></tr></table></figure><br><br><strong>emplace函数在容器中直接构造元素，传递给emplace函数的参数必须与元素类型的构造函数相匹配。</strong><br><br><br>## 访问元素 （访问成员函数返回的是引用）<br><br>下表列出了我们可以用来在顺序容器值访问元素的操作。如果容器中没有元素，访问操作的结果是未定义的。<br><br>包括array在内的每个顺序容器都有一个front成员函数，而除了forward_list之外的所以顺序容器都有一个back成员函数。这两个操作分别返回首元素和尾元素的引用：<br><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在解引用一个迭代器或调用front或back之前检查是否有元素</span></div><div class="line"><span class="keyword">if</span>(!c.empty())&#123;</div><div class="line">　　<span class="comment">//val和val2是c中第一个元素值的拷贝</span></div><div class="line">　　<span class="keyword">auto</span> val=*c.begin(),val2=c.front();</div><div class="line">　　<span class="comment">//val3和val4是c中最后一个元素值的拷贝</span></div><div class="line">　　<span class="keyword">auto</span> last=c.end();</div><div class="line">　　<span class="keyword">auto</span> val3=*(--last);  <span class="comment">//不能递减forward_list迭代器</span></div><div class="line">　　<span class="keyword">auto</span> val4=c.back();  <span class="comment">//forward_list不支持</span></div></pre></td></tr></table></figure><br><br><strong>此程序用两种不同方式来获取c中的首元素和尾元素的引用。</strong> 直接的方式是调用front和back。而间接的方法是通过解引用begin返回的迭代器来获得首元素的引用，以及通过递减然后解引用end返回的迭代器来获取尾元素的引用。<br><br><font color="red">  <strong>在顺序容器中访问元素的操作</strong> </font>

<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">at和下标操作只适用于<span class="built_in">string</span>、<span class="built_in">vector</span>、<span class="built_in">deque</span>和<span class="built_in">array</span>。</div><div class="line">back不适用于forward_list。</div><div class="line">c.back() 　　　　　　　　　　返回c中尾元素的引用。若c为空，函数行为未定义</div><div class="line">c.front()　　　　　　　　　　 返回c中首元素的引用。若c为空，函数行为未定义</div><div class="line">c[n]　　　　　　　　　　　　 返回c中下标为n的元素的引用，n是一个无符号整数。若n&gt;c.size(),则函数的行为未定义</div><div class="line">c.at[n]　　　　　　　　　　  返回下标为n的元素的引用。如果下标越界，则抛出一个out_of_range异常</div></pre></td></tr></table></figure>
<p><strong>对一个空容器调用front和back，就像使用一个越界的下标一样。是一种严重的程序设计错误。</strong></p>
<h2 id="访问成员函数返回的是引用"><a href="#访问成员函数返回的是引用" class="headerlink" title="访问成员函数返回的是引用"></a>访问成员函数返回的是引用</h2><p>在容器中访问元素的成员函数（即，front、back、下标和at）返回的都是引用。如果容器是一个const对象，则返回值是const的引用。如果容器不是const的，则返回值是普通引用，我们可以用来改变元素的值：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!c.empty())&#123;</div><div class="line">    c.front() = <span class="number">42</span>;   <span class="comment">//将42赋予c中的第一个元素</span></div><div class="line">    <span class="keyword">auto</span> &amp;v = c.back();     <span class="comment">//获得指向最后一个元素的引用</span></div><div class="line">    v = <span class="number">1024</span>;          <span class="comment">//改变c中的元素</span></div><div class="line">    <span class="keyword">auto</span> v2 = c.back();    <span class="comment">//v2不是一个引用，它是c.back()的一个拷贝</span></div><div class="line">    v2 = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>与往常一样，如果我们使用auto变量来保存这些函数的返回值，并且希望使用此变量来改变元素的值，必须记得将变量定义为引用类型。</strong></p>
<h2 id="下标操作和安全的随机访问"><a href="#下标操作和安全的随机访问" class="headerlink" title="下标操作和安全的随机访问"></a>下标操作和安全的随机访问</h2><p>提供快速随机访问的容器(string、vector、deque和array)也都提供下标运算符。就像我们已经看到的那样，下标运算符接受一个下标参数，返回容器中该位置的元素的引用。</p>
<p><strong>我们希望确保下标是合法的，可以使用at成员函数</strong>。at成员函数类似下标运算符，但如果下标越界，at会抛出一个out_of_range异常：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; svec;  <span class="comment">//空vector</span></div><div class="line"><span class="built_in">cout</span>&lt;&lt;svec[<span class="number">0</span>];   <span class="comment">//运行时错误：svec中没有元素</span></div><div class="line"><span class="built_in">cout</span>&lt;&lt;svec.at[<span class="number">0</span>];   <span class="comment">//抛出一个out_of_range异常</span></div></pre></td></tr></table></figure>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p>与添加元素的多种方式类似，（非array）容器也有多种删除元素的方式。如下表所示：</p>
<font color="red"> <strong>顺序容器的删除操作</strong> </font>

<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">这些操作会改变容器的大小，所以不适用于<span class="built_in">array</span></div><div class="line">forward_list有特殊版本的erase</div><div class="line">forward_list不支持pop_back；<span class="built_in">vector</span>和<span class="built_in">string</span>不支持pop_front</div><div class="line">c.pop_back() 　　　　　　删除c中尾元素，若c为空，则函数行为未定义，函数返回<span class="keyword">void</span></div><div class="line">c.pop_front()　　　　　　删除c中首元素，若c为空，则函数行为未定义，函数返回<span class="keyword">void</span></div><div class="line">c.erase(p)　　　　　　　 删除迭代器p所指的元素，返回以指向被删除元素之后的迭代器，若p指向尾元素，则返回尾后迭代器。若p是尾后迭代器，则函数的行为未定义</div><div class="line">c.erase(b,e)　　　　　　 删除迭代器b和e所指定范围内的元素，返回一个指向最后一个被删除元素之后元素的迭代器，若e本身就是尾后迭代器，则函数也返回尾后迭代器</div><div class="line">c.clear()　　　　　　　　 删除c中的所以元素，返回<span class="keyword">void</span></div></pre></td></tr></table></figure>
<p><strong>删除deque中除首位元素之外的任何元素都会使所有迭代器、引用和指针失效。指向vector或string中删除点之后位置的迭代器、引用和指针都会失效。</strong></p>
<h2 id="pop-front和pop-back成员函数"><a href="#pop-front和pop-back成员函数" class="headerlink" title="pop_front和pop_back成员函数"></a>pop_front和pop_back成员函数</h2><p>pop_front和pop_back成员函数分别删除首元素和尾元素。与vector和string不支持push_front一样，这些类型也不支持pop_front。类似的，forward_list不支持pop_back。与元素访问成员函数类似，不能对一个空容器执行弹出操作。</p>
<p>这些操作返回void，如果你需要弹出的元素的值，就必须在执行弹出操作之前保存它：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(!ilist.empty())&#123;</div><div class="line">　　process(ilist.front());  <span class="comment">//对ilist的首元素进行一些处理</span></div><div class="line">　　ilist.pop_front();　　<span class="comment">//完成处理后删除首元素</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="从容器内部删除一个元素"><a href="#从容器内部删除一个元素" class="headerlink" title="从容器内部删除一个元素"></a>从容器内部删除一个元素</h2><p>成员函数erase从容器中指定位置删除元素，我们可以删除由一个迭代器指定的单个元素，也可以删除由一对迭代器指定的范围内的所有元素。<strong>两种形式的erase都返回指向删除的（最后一个）元素之后位置的迭代器。即，若j是i之后的元素，那么erase(i)将返回指向j的迭代器。</strong></p>
<p>例如，下面的循环删除一个list中的所有奇数元素：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lst=(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line"><span class="keyword">auto</span> it=lst.begin();</div><div class="line"><span class="keyword">while</span>(it!=lst.end())</div><div class="line">　　<span class="keyword">if</span>(*it%<span class="number">2</span>)</div><div class="line">　　　　it=lst.erase(it);  <span class="comment">//删除此元素</span></div><div class="line">　　<span class="keyword">else</span></div><div class="line">　　　　++it;</div></pre></td></tr></table></figure>
<p>每个循环步中，首先检查当前元素是否是奇数，如果是，就删除该元素，并将it设置为我们所删除的元素之后的元素。如果*it为偶数，我们将it递增，从而在下一步循环检查下一个元素。</p>
<h2 id="删除多个元素"><a href="#删除多个元素" class="headerlink" title="删除多个元素"></a>删除多个元素</h2><p>接受一对迭代器的erase版本允许我们删除一个范围内的元素：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//删除两个迭代器表示的范围内的元素</span></div><div class="line"><span class="comment">//返回指向最后一个被删除元素之后位置的迭代器</span></div><div class="line">elem1=slist.erase(elem1,elem2);  <span class="comment">//调用后，elem1==elem2</span></div></pre></td></tr></table></figure>
<p><strong>迭代器elem1指向我们要删除的第一个元素，elem2指向我们要删除的最后一个元素之后的位置</strong>。</p>
<p>为了删除一个容器中的所有元素，我们既可以调用clear，也可以用begin和end获得的迭代器作为参数调用erase：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">slist.clear() ;<span class="comment">//删除容器中的所有元素</span></div><div class="line">slist.erase(slist.begin(),slist.end());   <span class="comment">//等价调用</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;介绍顺序容器的种类及基本操作。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.wangxinri.cn/categories/C/"/>
    
    
      <category term="顺序容器" scheme="http://www.wangxinri.cn/tags/%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>I/O流与string流</title>
    <link href="http://www.wangxinri.cn/2017/10/23/IO%E6%B5%81%E4%B8%8Estring%E6%B5%81/"/>
    <id>http://www.wangxinri.cn/2017/10/23/IO流与string流/</id>
    <published>2017-10-23T13:59:00.000Z</published>
    <updated>2018-01-17T12:39:54.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>介绍I/O流和string流及其基本使用。<br><a id="more"></a></p>
<h1 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h1><h2 id="IO对象无拷贝或赋值"><a href="#IO对象无拷贝或赋值" class="headerlink" title="IO对象无拷贝或赋值"></a>IO对象无拷贝或赋值</h2><p>由于不能拷贝IO对象，因此我们也不能将形参或返回类型设置为流类型。进行IO操作的函数通常以引用方式传递和返回流。读写一个IO对象会改变其状态，因此传递和返回的引用不能是const的。</p>
<h2 id="条件状态"><a href="#条件状态" class="headerlink" title="条件状态"></a>条件状态</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">istream&amp; <span class="title">func</span><span class="params">(istream &amp;is)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">string</span> buf;</div><div class="line">    <span class="keyword">while</span> (is &gt;&gt; buf)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; buf &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    is.clear();   <span class="comment">//将流的状态设置为有效</span></div><div class="line">    <span class="keyword">return</span> is;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    istream&amp; is = func(<span class="built_in">std</span>::<span class="built_in">cin</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; is.rdstate() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hi!"</span>&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//输出hi和一个换行，然后刷新缓冲区</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hi!"</span>&lt;&lt;flush;  <span class="comment">//输出hi，然后刷新缓冲区，不附加任何额外的字符串</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"hi!"</span>&lt;&lt;ends;   <span class="comment">//输出hi和一个空字符，然后刷新缓冲区</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h2><p>头文件<strong>fstream</strong>定义了三个类型来支持文件IO：<strong>ifstream</strong>从给定文件读取数据，<strong>ofstream</strong>向一个给定文件写入数据，以及<strong>fstream</strong>可以读写文件。</p>
<p>这些类型提供的操作与我们之前已经使用过的对象cin和cout的操作一样，特别是，我们可以用IO运算符（&lt;&lt;和&gt;&gt;）来读写文件，可以用getline从一个ifstream读取数据。</p>
<p><strong>代码示例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readfile</span><span class="params">(<span class="built_in">string</span> filename,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; svec)</span></span>&#123;   <span class="comment">//从文件中读取数据到svec中</span></div><div class="line">    ifstream input;   <span class="comment">//从一个给定文件读取数据</span></div><div class="line">    input.open(filename);</div><div class="line">    <span class="keyword">if</span>(input)&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        string line;</span></div><div class="line"><span class="comment">        while(getline(input,line))&#123;   //按行读取文件，input当成输入流cin处理就行</span></div><div class="line"><span class="comment">            svec.push_back(line);</span></div><div class="line"><span class="comment">        &#125;*/</span></div><div class="line">        <span class="built_in">string</span> word;</div><div class="line">        <span class="keyword">while</span>(input&gt;&gt;word)&#123;   <span class="comment">//按单词读取文件，input当成输入流cin处理就行</span></div><div class="line">            svec.push_back(word);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"couldn't open: "</span> + filename&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    input.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">writefile</span><span class="params">(<span class="built_in">string</span> filename,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; svec)</span></span>&#123;   <span class="comment">//从文件中读取数据到svec中</span></div><div class="line">    ofstream out;  <span class="comment">//ofstream向一个给定文件写入数据</span></div><div class="line">    out.open(filename,ofstream::app);  <span class="comment">//不清空文件，末尾追加写入</span></div><div class="line">    <span class="keyword">if</span>(out)&#123;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">auto</span> word : svec)&#123;</div><div class="line">           out&lt;&lt;word&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//输出流，也就将word写入到文件中</span></div><div class="line">       &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"couldn't open: "</span> + filename&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    out.close();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">string</span> filename = <span class="string">"STRING.txt"</span>;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; svec;</div><div class="line">    readfile(filename,svec);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> line : svec)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;line&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//从svec写入数据到文件中</span></div><div class="line">    filename = <span class="string">"WRITE.txt"</span>;</div><div class="line">    writefile(filename,svec);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="文件模式"><a href="#文件模式" class="headerlink" title="文件模式"></a>文件模式</h2><p>每个流都有一个关联的文件模式（mode），用来指出如何使用文件。具体的mode有哪些呢？<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">in       以读方式打开</div><div class="line">out      以写方式打开</div><div class="line">app      每次写操作前均定位到文件末尾（从文件尾开始写，不覆盖前面写的）</div><div class="line">ate      打开文件后立即定位到文件末尾</div><div class="line">trunc     截断文件</div><div class="line">binary    以二进制方式进行IO</div></pre></td></tr></table></figure></p>
<p>不管用哪种方式打开文件，我们都可以指定文件模式，调用open显式打开或者用一个文件名初始化文件流来隐式打开文件都可指定文件模式。<br>但是上述模式间有限制关系：</p>
<ul>
<li>只可以对ifstream和ifstream对象设定in模式</li>
<li>只可以对ofstream和fstream对象设定out模式</li>
<li>只有当out被设定时才能设定trunc模式</li>
<li>只要trunc没被设定，就可以设定app模式。在app模式下，即使没有显式指定out模式，文件也总是以输出方式打开</li>
<li>默认情况下，即使我们没有指定trunc模式，以out模式打开的文件也会被截断。为了保留以out模式打开的文件内容，我们必须同时指定app模式，这样只会将数据追加写到文件末尾；或者同时指定in模式，即打开文件同时进行读写操作。</li>
</ul>
<p>每个文件流类型都定义了一个默认的文件模式，当我们未指定文件模式时，就使用此默认模式。<strong>与ifstream关联的文件默认以in模式打开，与ofstream关联的文件默认以out模式打开，与fstream关联的文件默认以in和out模式打开。</strong></p>
<p>此外，有两点需要特别注意：</p>
<p><strong>1：以out模式打开文件会丢弃已有数据</strong></p>
<p>默认情况下，当我们打开一个ofstream时，文件的内容会被丢弃。阻止清空文件的方法是同时指定app模式。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这三条语句中，file都将被截断</span></div><div class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"file"</span>)</span></span>;     <span class="comment">// 隐含以输出模式打开文件并截断文件</span></div><div class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"file"</span>,ofstream::out)</span></span>;   <span class="comment">// 隐含地截断文件</span></div><div class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"file"</span>,ofstream::out|ofstream::trunc)</span></span>; </div><div class="line"><span class="comment">//这两条语句中，文件内容将被保存</span></div><div class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"file"</span>,ofstream::app)</span></span>;     <span class="comment">//隐含为输出模式</span></div><div class="line"><span class="function">ofstream <span class="title">app</span><span class="params">(<span class="string">"file"</span>,ofstream::out|ofstream::app)</span></span>;</div></pre></td></tr></table></figure>
<p><strong>小结：保留被ofstream打开的文件中内容的唯一方法是显示指定app或in模式。</strong></p>
<p><strong>2 ：每次调用open时都会确定文件模式</strong></p>
<p>对于一个给个流，每当打开文件时，都可以改变其文件模式。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ofstream  out;         <span class="comment">// 未指定文件打开模式</span></div><div class="line">out.open(<span class="string">"file"</span>);      <span class="comment">// 隐含设置为输出和截断</span></div><div class="line">out.close();          <span class="comment">// 与out绑定的名为file的文件被关闭，以便我们将对象out用于其他文件</span></div><div class="line">out.open(<span class="string">"preFile"</span>,ofstream::app);      <span class="comment">//模式为输出和文件尾追加</span></div><div class="line">out.close();</div></pre></td></tr></table></figure>
<p>名为file的文件内容将被清空，名为preFile的文件中已有的数据将都被保存。</p>
<p><strong>小结：每次打开文件时，都要设置文件模式，可以是显式的设置，也可以是隐式的设置。当文件未指定模式时，都是使用默认值。</strong>  </p>
<h1 id="String流"><a href="#String流" class="headerlink" title="String流"></a>String流</h1><p>sstream头文件定义了三个类型来支持内存IO，这些类型可以向string写入数据，从string读取数据，就像string是一个IO流一样。</p>
<p><strong>istringstream从string读取数据，ostreamstream向string写入数据，而头文件stringstream既可以读数据也可向string写数据。</strong></p>
<p>头文件sstream中定义的类型都继承自我们已经使用过的iostream头文件中定义的类型。除了继承得来的操作，sstream中定义的类型还增加了一些成员来管理与流相关联的string。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stringstream</span>特有的操作</div><div class="line">sstream strm； strm是一个未绑定的<span class="built_in">stringstream</span>对象。sstream是头文件sstream中定义的一个类型</div><div class="line"><span class="function">sstream <span class="title">strm</span><span class="params">(s)</span></span>; strm是一个sstream对象，保存strings的一个拷贝。此构造函数是<span class="keyword">explicit</span>的</div><div class="line">strm.str（） 返回strm所保存的<span class="built_in">string</span>类型</div><div class="line">strm.str(s) 将<span class="built_in">string</span>的s拷贝到strm中，返回<span class="keyword">void</span></div></pre></td></tr></table></figure>
<h2 id="使用istringstream"><a href="#使用istringstream" class="headerlink" title="使用istringstream"></a>使用istringstream</h2><p>当我们的某些工作是对整行文本进行处理，而其他一些工作是处理行内的某个单词时，通常可以使用istringstream。</p>
<p>考虑如下文件，列出了一些人和他们的电话号码（电话号码多选）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">morgan 20155555 685522</div><div class="line">drew 5524566</div><div class="line">lee 425422 542122 55444222</div></pre></td></tr></table></figure></p>
<p>我们定义一个简单的类来描述输入数据：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span>&#123;</span></div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; phones;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们从文本中读入输入数据，并将输入数据写入到vector<personinfo>容器中：</personinfo></p>
<p>以下是完整代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">//成员默认公有</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span>&#123;</span></div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; phones;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">string</span> filename = <span class="string">"Info.txt"</span>;</div><div class="line">    ifstream input;   <span class="comment">//从文件中读取数据</span></div><div class="line">    <span class="built_in">vector</span>&lt;PersonInfo&gt; Pvec;</div><div class="line">    input.open(filename);</div><div class="line">    <span class="keyword">if</span>(input)&#123;</div><div class="line">        <span class="built_in">string</span> line;</div><div class="line">        <span class="built_in">string</span> phone;</div><div class="line">        <span class="keyword">while</span>(getline(input,line))&#123;</div><div class="line">            PersonInfo info;</div><div class="line">            <span class="function"><span class="built_in">istringstream</span> <span class="title">record</span><span class="params">(line)</span></span>;   <span class="comment">//将记录绑定到刚读入的行</span></div><div class="line">            record&gt;&gt;info.name;     <span class="comment">//读取名字</span></div><div class="line">            <span class="keyword">while</span>(record&gt;&gt;phone)&#123;  <span class="comment">//读取电话号码</span></div><div class="line">                info.phones.push_back(phone);</div><div class="line">            &#125;</div><div class="line">            Pvec.push_back(info);   <span class="comment">//将记录追加到people末尾</span></div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"couldn't not open file"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    input.close();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> people : Pvec)&#123;   <span class="comment">//输出</span></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;people.name;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> phone : people.phones)&#123;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;phone;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用ostringstream"><a href="#使用ostringstream" class="headerlink" title="使用ostringstream"></a>使用ostringstream</h2><p><strong><br>当我们逐步构造输出，希望最后一起打印是，ostringstream是很有用的。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">ostringstream</span> badNums;</div><div class="line"><span class="built_in">string</span> num = <span class="string">"123"</span>;</div><div class="line"><span class="built_in">string</span> name = <span class="string">"xin"</span>;</div><div class="line">badNums&lt;&lt;num&lt;&lt;name;     <span class="comment">//将数的字符串的形式存入badNums</span></div><div class="line"><span class="built_in">cout</span>&lt;&lt;badNums.str()&lt;&lt;<span class="built_in">endl</span>;    <span class="comment">//输出123xin</span></div></pre></td></tr></table></figure>
<p><strong>输出badNums.str()!</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;介绍I/O流和string流及其基本使用。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.wangxinri.cn/categories/C/"/>
    
    
      <category term="I/O流" scheme="http://www.wangxinri.cn/tags/I-O%E6%B5%81/"/>
    
      <category term="string流" scheme="http://www.wangxinri.cn/tags/string%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>类的基本概念</title>
    <link href="http://www.wangxinri.cn/2017/10/22/%E7%B1%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://www.wangxinri.cn/2017/10/22/类的基本概念/</id>
    <published>2017-10-22T13:59:00.000Z</published>
    <updated>2018-01-17T12:39:40.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>介绍一些类的基本概念，包括类的基本思想，函数成员和数据成员，static成员，友元等。<br><a id="more"></a></p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类的基本思想是<strong>数据抽象和封装</strong>。数据抽象是一种依赖于接口和实现分离的编程技术。类的接口包括用户所能执行的操作：类的实现则包括类的数据成员、负责接口实现的函数体以及定义类所需的各种私有函数。</p>
<p>封装实现了类的接口和实现的分离。封装后的类隐藏了它的实现细节，也就是说，类的用户只能使用接口而无法访问实现部分。</p>
<h2 id="定义成员函数"><a href="#定义成员函数" class="headerlink" title="定义成员函数"></a>定义成员函数</h2><p>尽管所有成员函数都必须在类的内部声明，但是成员函数体可以定义在类内也可以定义在类外。</p>
<p>Sales_data的一个成员函数</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo;&#125;</div></pre></td></tr></table></figure>
<h2 id="引入this指针"><a href="#引入this指针" class="headerlink" title="引入this指针"></a>引入this指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Sales_data total;</div><div class="line">total.isbn();</div></pre></td></tr></table></figure>
<p>在这里，使用点运算符来访问total对象的isbn成员，然后再调用它。</p>
<p>当我们调用成员函数时，实际上是在替某个对象调用它。它隐式地指向调用该函数的对象的成员。实际上隐式地返回 total.bookNo。</p>
<p>成员函数通过一个名为<strong>this</strong>的额外参数来访问调用它的那个对象。<strong>当我们调用一个成员函数时，用请求该函数的对象地址初始化this。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">total.isbn()</div></pre></td></tr></table></figure>
<p>相当于：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//伪代码，用于说明调用成员函数的实际执行过程</span></div><div class="line">Sales_data::isbn(&amp;total)</div></pre></td></tr></table></figure>
<p>其中调用Sales_data的isbn成员时传入了total地址。</p>
<p>this是一个常量指针，我们不允许改变。</p>
<h2 id="引入const成员函数"><a href="#引入const成员函数" class="headerlink" title="引入const成员函数"></a>引入const成员函数</h2><p>默认情况下，this的类型是指向类类型非常量版本的常量指针。意味着（在默认情况下）我们不能把this绑定到一个常量对象上。<strong>这一情况也就使我们不能在一个常量对象上调用普通的成员函数。</strong></p>
<p><strong>C++允许把const关键字放在成员函数的参数列表之后，此时，紧跟在参数列表后面的const表示this是一个指向常量的指针</strong>（const Sales_data <em>const this）。<em>*像这样使用const的成员函数被称作常量成员函数</em></em>。</p>
<p>因为this是指向常量的指针，所以常量成员函数不能改变调用它的对象的内存。</p>
<p><strong>常量对象、以及常量对象的引用或指针都只能调用常量成员函数。</strong> ，非常量对象可以调用常量成员函数。</p>
<h2 id="类作用域和成员函数"><a href="#类作用域和成员函数" class="headerlink" title="类作用域和成员函数"></a>类作用域和成员函数</h2><p>编译器分两步处理类：<strong>首先编译成员的声明，然后才轮到成员函数体。</strong> 因此，成员函数体可以随意使用类中的其他成员而无须在意这些成员出现的次序。</p>
<p><strong>类外部定义的成员的名字必须包含它所属的类名。</strong></p>
<h2 id="定义类相关的非成员函数"><a href="#定义类相关的非成员函数" class="headerlink" title="定义类相关的非成员函数"></a>定义类相关的非成员函数</h2><p>一般来说，如果非成员函数是类接口的组成部分，则这些函数的声明应该与类在同一个头文件内。在这种方式下，用户使用接口的任何部分都只需要引入一个文件。</p>
<h2 id="点运算符和箭头运算符（-gt"><a href="#点运算符和箭头运算符（-gt" class="headerlink" title="点运算符和箭头运算符（.  -&gt;)"></a>点运算符和箭头运算符（.  -&gt;)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Person p1 ,*p2;</div><div class="line">p1.getname();   <span class="comment">//针对于对象来使用的</span></div><div class="line">p2-&gt;getname();   <span class="comment">//针对于指针来使用的，等价于*p2.getname();</span></div></pre></td></tr></table></figure>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>类通过一个或几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做<strong>构造函数</strong>。</p>
<p><strong>构造函数不能被声明成const。</strong> 当我们创建类的一个const对象时，直到构造函数完成初始化过程，对象才真正取得其“常量”属性，因此，构造函数在const对象的构造过程中可以向其写值。</p>
<p>只有当类没有声明任何构造函数时，编译器才会自动地生成默认构造函数。</p>
<p>知识点1：构造函数—特殊的成员函数，用来控制对象的初始化过程。无返回类型，可重载，不能被声明为const.</p>
<p>知识点2：若无，则有默认的构造函数，是编译器自己隐式的定义的。又称合成的默认构造函数。</p>
<p>知识点3：某些类是不能使用默认的构造函数的，以下三个原因：</p>
<p>1：在未声明任何构造函数的前提下，类内对象的初始化将不受控制</p>
<p>2：合成的默认构造函数可能会造成不必要的错误，如若没有类内初始值来初始化成员，可能这些成员将是未定义的。</p>
<p>3：如果类中包含了一个其他类类型的成员，且这个成员的类型没有默认构造函数，那么编译器将无法初始化该对象。</p>
<p>所以，在撰写类的时候，最好定义一个自己的构造函数。</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>;</span>  <span class="comment">//前向声明Person类</span></div><div class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(istream&amp; is,Person&amp; person)</span></span>;  <span class="comment">//声明read函数</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Person() = <span class="keyword">default</span>;     <span class="comment">//默认构造函数  等价于Person()&#123;&#125;;</span></div><div class="line">    Person(<span class="built_in">string</span> name,<span class="built_in">string</span> address);   <span class="comment">//重载构造函数</span></div><div class="line">    Person(istream &amp;is)&#123;   <span class="comment">//重载构造函数，通过调用非成员函数read对其进行赋值</span></div><div class="line">        read(is,*<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="title">getname</span><span class="params">()</span></span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="title">getaddress</span><span class="params">()</span></span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>-&gt;address;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setname</span><span class="params">(<span class="built_in">string</span> name)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setaddress</span><span class="params">(<span class="built_in">string</span> address)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>-&gt;address = address;</div><div class="line">    &#125;</div><div class="line">    <span class="function">Person&amp; <span class="title">combine</span><span class="params">(<span class="keyword">const</span> Person &amp;person)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="built_in">string</span> address;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">void</span> Person::show()&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"name:"</span>&lt;&lt;<span class="keyword">this</span>-&gt;name&lt;&lt;<span class="string">" address:"</span>&lt;&lt;<span class="keyword">this</span>-&gt;address&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line">Person::Person(<span class="built_in">string</span> name,<span class="built_in">string</span> address):name(name),address(address)&#123;</div><div class="line">&#125;</div><div class="line">Person&amp; Person::combine(<span class="keyword">const</span> Person &amp;person)&#123;</div><div class="line">    name += person.name;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(istream&amp; is,Person&amp; person)</span></span>&#123;   <span class="comment">//非成员函数</span></div><div class="line">    <span class="built_in">string</span> name ,address;</div><div class="line">    is&gt;&gt;name&gt;&gt;address;</div><div class="line">    person.setname(name);</div><div class="line">    person.setaddress(address);</div><div class="line">    <span class="keyword">return</span> is;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"wangxinri"</span>,<span class="string">"cqu"</span>)</span></span>;</div><div class="line">    p1.show();</div><div class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">"ri"</span>,<span class="string">"cqu"</span>)</span></span>;</div><div class="line">    p1.combine(p2);</div><div class="line">    p1.show();</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;p2.getname()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;p2.getaddress()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="built_in">cin</span>)</span></span>;</div><div class="line">    p3.show();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="拷贝、赋值和析构"><a href="#拷贝、赋值和析构" class="headerlink" title="拷贝、赋值和析构"></a>拷贝、赋值和析构</h2><p>如果我们不主动定义这些操作，则编译器将替我们合成它们。一般来说，编译器生成的版本将对对象的每个成员执行拷贝、赋值和销毁操作。</p>
<p>对于某些类来说合成的版本无法正常工作，管理动态内存的类通常不能依赖于上述操作的合成版本。</p>
<p>使用vector或者string的类能避免分配和释放内存带来的复杂性。如果类包含vector或者string成员，则其拷贝、赋值和销毁的合成版本能够正常工作。</p>
<h1 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h1><p><strong>有的时候类需要它的一些成员与类本身直接相关，而不是与类的各个对象保持关联</strong>。例如，一个银行账号类可能需要一个数据成员来表示当前的基准利率。在此例中，我们希望利率与类关联，而非与类的每个对象关联。从实现效率的角度来看，没必要每个对象都存储利率信息。而且更加重要的是，一旦利率浮动，我们希望所有的对象都能使用新值。</p>
<h2 id="声明静态成员"><a href="#声明静态成员" class="headerlink" title="声明静态成员"></a>声明静态成员</h2><p>我们通过在成员的声明之前加上关键字static使得其与类关联在一起，和其他成员一样，静态成员可以使public得或private的。静态数据成员的类型可以使常量、引用、指针、类类型等。</p>
<p>举个例子，我们定义一个类，用它表示银行的账户记录：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;amount+=amount*interestRate;&#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">rate</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> interestRate;&#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rate</span><span class="params">(<span class="keyword">double</span>)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> owner;</div><div class="line">    <span class="keyword">double</span> amount;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">double</span> interestRate;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">initRate</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>类的静态成员存在于任何对象之外，对象中不包含任何与静态数据成员有关的数据。</strong> 因此，每个Account对象将包含两个数据成员：owner和amount。只存在一个interestRate对象而且它被所有Account对象共享。</p>
<p><strong>类似的，静态成员函数也不与任何对象绑定在一起，它们不包含this指针。作为结果，静态成员函数不能声明成const的（const是用来修饰this指针类型的），而且我们也不能在static函数体内使用this指针，这一限制既适用于this的显式使用，也对调用非静态成员的隐式使用有效。静态成员函数不可以调用类的非静态成员。因为静态成员函数不含this指针。静态成员函数不可以同时声明为 virtual、const、volatile函数。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span>&#123;</span>   </div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;<span class="comment">//错误   </span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> <span class="keyword">const</span></span>;<span class="comment">//错误   </span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func3</span><span class="params">()</span> <span class="keyword">volatile</span></span>;<span class="comment">//错误   </span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="使用类的静态成员"><a href="#使用类的静态成员" class="headerlink" title="使用类的静态成员"></a>使用类的静态成员</h2><p>我们使用作用域运算符直接访问静态成员：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> r;</div><div class="line">r=Account::rate();   <span class="comment">//使用作用域运算符访问静态成员</span></div></pre></td></tr></table></figure></p>
<p>虽然静态成员不属于类的某个对象，但是我们仍然可以使用类的对象、引用或者指针类访问静态成员：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Account ac1;</div><div class="line">Account *ac2=&amp;ac1;</div><div class="line"><span class="comment">//调用静态成员函数rate的等价形式</span></div><div class="line">r=ac1.rate();   <span class="comment">//通过Account的对象或引用</span></div><div class="line">r=ac2-&gt;rate();   <span class="comment">//通过指向Account对象的指针</span></div></pre></td></tr></table></figure></p>
<p>成员函数不用通过作用域运算符就能直接使用静态成员。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　<span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123;amount+=amount*interestRate;&#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">　　<span class="keyword">static</span> <span class="keyword">double</span> interestRate;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="定义静态成员"><a href="#定义静态成员" class="headerlink" title="定义静态成员"></a>定义静态成员</h2><p>和其他的成员函数一样，<strong>我们既可以在类的内部也可以在类的外部定义静态成员函数。当在类的外部定义静态成员时，不能重复static关键字，该关键字只出现在类内部的声明语句</strong>：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> Account::rate(<span class="keyword">double</span> newRate)</div><div class="line">&#123;</div><div class="line">　　interestRate=newRate;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>和类的所有成员一样，当我们指向类外部的静态成员时，必须指明成员所属的类名。static关键字则只出现在类内部的声明语句中。</strong></p>
<p>因为静态数据成员不属于类的任何一个对象，所以它们并不是在创建类的对象时被定义的。这意味着它们不是由类的构造函数初始化的。<strong>而且一般来说，我们不能在类的内部初始化静态数据成员。相反的，必须在类的外部定义和初始化每个静态成员。和其他对象一样，一个静态数据成员只能定义一次。</strong></p>
<p>类似于全局变量，静态数据成员定义在任何函数之外，因此一旦它被定义，就将一直存在于程序的整个生命周期中。</p>
<p>我们定义静态数据成员的方式和在类的外部定义成员函数差不多。我们需要指定对象的类型名，然后是类名、作用域运算符以及成员自己的名字：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义并初始化一个静态成员</span></div><div class="line"><span class="keyword">double</span> Account::interestRate=initRate();</div></pre></td></tr></table></figure>
<p>这条语句定义了名为interestRate的对象，该对象是类Account的静态成员，其类型是double。从类名开始，这条定义语句的剩余部分就都位于类的作用域之内了。因此，我们可以直接使用initRate函数。注意，虽然initRate是私有的，我们也能使用它初始化interestRate。和其他成员的定义一样，interestRate的定义也可以访问类的私有成员。</p>
<p><strong>要想确保对象只定义一次，最好的办法是把静态数据成员的定义与其他非内联函数的定义放在同一文件中</strong>。</p>
<h2 id="静态成员的类内初始化（一般来讲，我们在类的外部定义和初始化）"><a href="#静态成员的类内初始化（一般来讲，我们在类的外部定义和初始化）" class="headerlink" title="静态成员的类内初始化（一般来讲，我们在类的外部定义和初始化）"></a>静态成员的类内初始化（一般来讲，我们在类的外部定义和初始化）</h2><p>通常情况下，类的静态成员不应该在类的内部初始化。然而，我们可以为静态成员提供const整数类型的类内初始值，不过要求静态成员必须是字面值常量类型的constexpr。初始值必须是常量表达式，因为这些成员本身就是常量表达式，所以它们能用在所有适用于常量表达式的地方。例如，我们可以用一个初始化了的静态数据成员执行数组成员的维度：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">rate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> interestRate;&#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rate</span><span class="params">(<span class="keyword">double</span>)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> period=<span class="number">30</span>;</div><div class="line">    <span class="keyword">double</span> daily_tbl[period]; <span class="comment">//period是常量表达式</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>如果在类的内部提供了一个初始值，则成员的定义不能再指定一个初始值了</strong>：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一个不带初始值的静态成员的定义</span></div><div class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> Account::period;  <span class="comment">//初始值在类的定义内提供</span></div></pre></td></tr></table></figure>
<font color="red"><strong>即使一个常量静态数据成员在类内部被初始化了，通常情况下也应该在类的外部定义一下该成员</strong>。 </font>

<h2 id="静态成员能用于某些场景，而普遍成员不能"><a href="#静态成员能用于某些场景，而普遍成员不能" class="headerlink" title="静态成员能用于某些场景，而普遍成员不能"></a>静态成员能用于某些场景，而普遍成员不能</h2><p>如我们所见，静态成员独立于任何对象。因为，在某些非静态数据成员可能非法的场合，静态 成员却可以正常地使用。举个例子，<strong>静态数据成员可以是不完全类型。特别地，静态数据成员的类型可以就是它所属的类类型。而非静态数据成员则受到限制，只能声明成它所属类的指针或引用。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">//......</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> Bar mem1;  <span class="comment">//正确：静态成员可以是不完全类型</span></div><div class="line">    Bar *mem2;         <span class="comment">//正确：指针成员可以使不完全类型</span></div><div class="line">    Bar mem3;         <span class="comment">//错误：数据成员必须是完全类型</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>静态成员和普通成员的另一个区别是我们可以使用静态成员作为默认实参</strong>：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">//bkground 不是一个在类中稍后定义的静态成员</span></div><div class="line">    <span class="function">Screen &amp;<span class="title">clear</span><span class="params">(<span class="keyword">char</span> =bkground)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> bkground;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>非静态数据成员不能作为默认实参，因为它的值本身属于对象的一部分，这么做的结果是无法真正提供一个对象以从中获取成员的值，最终引发错误。</p>
<h2 id="简单代码示例"><a href="#简单代码示例" class="headerlink" title="简单代码示例"></a>简单代码示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">rate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> interestRate; &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rate</span><span class="params">(<span class="keyword">double</span> Rate)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">string</span> owner;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">double</span> interestRate ;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> aa = <span class="number">0</span>;  <span class="comment">//正确</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> bb = <span class="number">0</span>;  <span class="comment">//正确，constexpr类型可以类内初始化</span></div><div class="line">    <span class="comment">//static double cc = 0;  //错误</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//外层定义static成员不需要加上static</span></div><div class="line"><span class="keyword">double</span> Account::interestRate = <span class="number">1.0</span>;   <span class="comment">//定义并初始化一个成员</span></div><div class="line"><span class="keyword">void</span> Account::rate(<span class="keyword">double</span> Rate)&#123;</div><div class="line">    interestRate = Rate;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Account a1,a2;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;a1.rate()&lt;&lt;<span class="string">" "</span>&lt;&lt;a2.rate()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    a1.rate(<span class="number">2.0</span>);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;a1.rate()&lt;&lt;<span class="string">" "</span>&lt;&lt;a2.rate()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="友元（friend）"><a href="#友元（friend）" class="headerlink" title="友元（friend）"></a>友元（friend）</h1><p>友元：类允许其他类或者函数访问其非公有成员，方法是令其他类或者函数成为它的<strong>友元（friend)</strong>。如果类想把一个函数作为它的友元，只需要增加一条以friend关键字开始的函数声明语句即可。</p>
<p>友元函数只能出现在类定义的内部，但是在类内出现的位置不限。友元不是类的成员函数也不受它所在区域访问控制级别的约束。</p>
<p>一般来说，最好在类定义开始或者结束前的位置集中声明友元。</p>
<h2 id="友元的声明"><a href="#友元的声明" class="headerlink" title="友元的声明"></a>友元的声明</h2><p>友元的声明仅仅指定了访问的权限，而非一个通常意义上的函数声明，如果我们希望类的用户能够调用某个友元函数，那么我们就必须在友元声明之外再专门对函数进行一次声明。</p>
<h2 id="友元再探"><a href="#友元再探" class="headerlink" title="友元再探"></a>友元再探</h2><p>类还可以把其他的类定义成友元，也可以把其他类（之前已定义过的）的成员函数定义成友元。此外，友元函数能定义在类的内部，这样的函数时隐式内联的。</p>
<h2 id="类之间的友元关系"><a href="#类之间的友元关系" class="headerlink" title="类之间的友元关系"></a>类之间的友元关系</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span>&#123;</span></div><div class="line">    <span class="comment">//Window_megr的成员可以访问Screen类的私有部分。</span></div><div class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Window_megr</span>;</span>  把Window_megr指定成Screen的友元</div><div class="line">    <span class="comment">//Screen类的剩余部分</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员。</p>
<p>必须注意的是，友元关系不存在传递性。也就是说，如果Window_mgr有它自己的友元，则这些友元并不能理所当然地具有访问Screen的特权。</p>
<h2 id="令成员函数作为友元"><a href="#令成员函数作为友元" class="headerlink" title="令成员函数作为友元"></a>令成员函数作为友元</h2><p>除了令整个Window_mgr作为友元之外，Screen还可以只为Window_mgr成员函数clear提供访问权限。当把一个成员函数声明成友元时，我们必须明确指出该成员函数属于哪个类：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span>&#123;</span></div><div class="line">    <span class="comment">//Window_mgr::clear必须在Screen类之前被声明</span></div><div class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> Window_mgr::clear(ScreenIndex);</div><div class="line">    <span class="comment">//Screen类的剩余部分</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>要想令某个成员函数作为友元，我们必须仔细组织程序的结构以满足声明和定义的彼此依赖关系。在这个例子中，我们必须按照如下方式设计程序：</p>
<ul>
<li>首先定义Window_mgr类，其中声明clear函数，但是不能定义它。在clear使用Screen的成员之前必须先声明Screen。</li>
<li>接下来定义Screen，包括对于clear的友元声明</li>
<li>最后定义clear，此时它才可以使用Screen的成员。</li>
</ul>
<h2 id="函数重载和友元"><a href="#函数重载和友元" class="headerlink" title="函数重载和友元"></a>函数重载和友元</h2><p>尽管重载函数的名字相同，但他们仍然是不同的函数。因此，如果一个类想把一组重载函数声明成它的友元，它需要对这组函数中的每一个分别声明：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//重载的storeOn函数</span></div><div class="line"><span class="function"><span class="keyword">extern</span> ostream&amp; <span class="title">storeOn</span><span class="params">(ostream＆ ,Screen &amp;)</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> BitMap &amp;<span class="title">storeOn</span><span class="params">(BitMap&amp; ,Screen &amp;)</span></span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span>&#123;</span></div><div class="line">    <span class="comment">//StoreOnde ostream版本能访问Screen对象的私有部分</span></div><div class="line">    <span class="keyword">friend</span> ostream::<span class="function">ostream&amp; <span class="title">storeOn</span><span class="params">(ostream&amp; ,Screen)</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Screen类把接受ostream&amp;的storeOn函数声明成它的友元，但是接受BitMap&amp;作为参数的版本仍然不能访问Screen。</p>
<h2 id="友元声明和作用域"><a href="#友元声明和作用域" class="headerlink" title="友元声明和作用域"></a>友元声明和作用域</h2><p>类和非成员函数的声明不是必须在它们的友元声明之前。当一个名字第一次出现在一个友元声明中时，我们隐式地假定该名字在当前作用域中是可见的。然而，友元本身不一定真的声明在当前作用域中。</p>
<p>甚至<strong>就算在类的内部定义该函数，我们也必须在类的外部提供相应的声明从而使得函数可见。</strong> 换句话说，即使我们仅仅是用声明友元的类的成员调用该友元函数，它也必须是被声明过的：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="comment">/*友元函数可以定义在类的内部*/</span>&#125;</div><div class="line">    X() &#123;f();&#125;  <span class="comment">//错误：f还没有被声明</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">h</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">void</span> X::g()&#123;<span class="keyword">return</span> f();&#125;  <span class="comment">//错误：f还没有被声明</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;   <span class="comment">//声明那个定义在X中的函数</span></div><div class="line"><span class="keyword">void</span> X::h() &#123;<span class="keyword">return</span> f();&#125;  <span class="comment">//正确：现在f的声明在作用域中了</span></div></pre></td></tr></table></figure>
<p>关于这段代码最重要的是理解友元声明的作用是影响访问权限，它本身并非普通意义上的声明。</p>
<h2 id="简单友元类示例"><a href="#简单友元类示例" class="headerlink" title="简单友元类示例"></a>简单友元类示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>&#123;</span></div><div class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">teacher</span>;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_info</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"name:"</span>&lt;&lt;name&lt;&lt;<span class="string">" address"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">string</span> name = <span class="string">"xin"</span>;</div><div class="line">    <span class="built_in">string</span> address = <span class="string">"cqu"</span>;</div><div class="line">&#125;;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show_info</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"name:"</span>&lt;&lt;name&lt;&lt;<span class="string">" address"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showStudent</span><span class="params">(student &amp;STD)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line">    <span class="built_in">string</span> address;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> teacher::showStudent(student &amp;STD)&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;STD.name&lt;&lt;<span class="string">" "</span>&lt;&lt;STD.address&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    student STD;</div><div class="line">    STD.show_info();</div><div class="line">    teacher TEA;</div><div class="line">    TEA.showStudent(STD);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;介绍一些类的基本概念，包括类的基本思想，函数成员和数据成员，static成员，友元等。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.wangxinri.cn/categories/C/"/>
    
    
      <category term="static成员" scheme="http://www.wangxinri.cn/tags/static%E6%88%90%E5%91%98/"/>
    
      <category term="C++" scheme="http://www.wangxinri.cn/tags/C/"/>
    
      <category term="类定义" scheme="http://www.wangxinri.cn/tags/%E7%B1%BB%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>函数基础</title>
    <link href="http://www.wangxinri.cn/2017/10/19/%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.wangxinri.cn/2017/10/19/函数基础/</id>
    <published>2017-10-19T02:59:00.000Z</published>
    <updated>2018-01-16T13:11:28.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h1><p>一个典型的函数定义包括以下部分：<strong>返回类型、函数名、由0个或多个形参组成的列表以及函数体</strong>。<br><a id="more"></a></p>
<p>函数的调用完成两项工作：<strong>一是用实参初始化函数对应的形参，二是将控制权转移给被调用函数</strong>。此时，主调函数的执行被暂时中断，被调函数开始执行。</p>
<h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><p>函数有几个形参，我们就必须提供相同数量的实参。</p>
<h2 id="局部对象"><a href="#局部对象" class="headerlink" title="局部对象"></a>局部对象</h2><p>形参和函数体内部定义的变量（含｛｝块域）统称为<strong>局部变量</strong>。他们对函数而言是“局部”的，仅在函数的作用域内可见，同时局部变量还会隐藏在外层作用域中同名的其他所有声明中。</p>
<h2 id="自动对象"><a href="#自动对象" class="headerlink" title="自动对象"></a>自动对象</h2><p>对于普通局部变量对应的对象来说, 当函数的控制路径经过变量定义语句时创建该对象, 当到达定义所在的块末尾时销毁它. <strong>我们把只存在于块执行期间的对象称为自动对象</strong>, 当块的执行结束后, 块中创建的自动对象的值就变成未定义的了.</p>
<p>形参是一种自动对象, 函数开始时候为形参申请存储空间, 因为形参定义在函数体作用域之内, 所以函数终止, 形参被销毁.</p>
<p>对于局部变量对应的自动对象来说, 分两种情况：<br>如果变量定义本身含初始值, 就用这个初始值初始化;否则, 如果变量定义本身不含初始值, 执行默认初始化.意味着内置类型的未初始化局部变量将产生未定义的值.</p>
<h2 id="局部静态对象"><a href="#局部静态对象" class="headerlink" title="局部静态对象"></a>局部静态对象</h2><p>当有些时候, <strong>有必要令局部变量的生命周期贯穿函数调用及之后的时间</strong>,可以将局部变量定义为<strong>static 类型</strong>, 局部静态变量在程序执行路径第一次经过对象定义语句时候初始化,并直到程序终止才被销毁。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">size_t</span> count_calls()</div><div class="line">&#123;</div><div class="line">   <span class="keyword">static</span> <span class="keyword">size_t</span> ctr=<span class="number">0</span>;</div><div class="line">   eturn ++ctr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i!=<span class="number">10</span>; i++)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt; count_calls() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在控制流第一次经过ctr的定义之前, ctr被创建且初始化为0; 每次调用ctr加1. 每次执行函数, 变量ctr的值已经存在并等于函数上一次退出的时候的值。</p>
<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>函数只能定义一次，但可以声明多次。（有例外），如果一个函数永远不可能给我们用到，那他可以只有声明没有定义。</p>
<p>函数的三要素（返回类型、函数名、形参类型）描述了函数的接口，说明了调用该函数所需要的全部信息，函数声明也称作<strong>函数原型</strong>。</p>
<p><strong>best practices:</strong> 在头文件中进行函数声明，含有函数声明的头文件应该包含到定义函数的源文件中。</p>
<h2 id="分离式编译"><a href="#分离式编译" class="headerlink" title="分离式编译"></a>分离式编译</h2><p>分离式编译，C++允许我们将程序分割到几个文件中去，每个文件独立编译。</p>
<p><strong>简单的示例：</strong></p>
<p><strong>目录树：</strong></p>
<pre><code>source 
      facc.cpp
      main.cpp
header
      myHead.h
</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//facc.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyHead.h"</span>     <span class="comment">//定义fac函数，肯定要包含其声明</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> n*fac(n<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//main.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyHead.h"</span>     <span class="comment">//使用fac，肯定也要包含其声明</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;fac(<span class="number">5</span>)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//myHead.h    //头文件中只有函数的声明</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYHEAD_H_INCLUDED</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MYHEAD_H_INCLUDED</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span></span>;     </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MYHEAD_H_INCLUDED</span></span></div></pre></td></tr></table></figure>
<h2 id="const形参和实参"><a href="#const形参和实参" class="headerlink" title="const形参和实参"></a>const形参和实参</h2><p>实参初始化形参会忽略掉顶层const，也就是当形参有顶层const时，传给它常量对象或者非常量对象都是可以的。</p>
<p>我们可以使用非常量初始化底层const，但是反过来不行。</p>
<h1 id="数组形参"><a href="#数组形参" class="headerlink" title="数组形参"></a>数组形参</h1><p><strong>数组的两个特殊点：</strong> </p>
<ul>
<li>不允许拷贝数组，所以不可以使用传值的方式使用数组参数(传值即为拷贝)。</li>
<li>通常数组的传递使用的是指针形式，传递的是指针的首地址。</li>
</ul>
<p>尽管不能以值传递的形式传递数组，但是我们可以把形参写成类似数组的形式：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//尽管形式不同，但这三个print函数是等价的</span></div><div class="line"><span class="comment">//每个函数都有一个const int*类型的形参</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>*)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>[<span class="number">10</span>])</span> <span class="comment">//这里的维度表示我们期望数组含有多少元素，实际不一定</span></span></div></pre></td></tr></table></figure>
<p>当编译器处理对print函数的调用时，只检查传入的参数是否是const int*类型：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">2</span>;</div><div class="line"><span class="keyword">int</span> j[<span class="number">2</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</div><div class="line">print(&amp;i);  <span class="comment">//正确，&amp;i的类型是int*</span></div><div class="line">print(j);   <span class="comment">//正确，j被转换成int*并指向j[0]</span></div></pre></td></tr></table></figure>
<p>如果我们传给print函数的是一个数组，则实参自动地转换成指向首元素的指针，数组的大小对函数的调用没有影响。</p>
<p><strong>由于数组实际上是以指针的形式传递给函数的，因此一开始函数并不知道数组的确切尺寸，调用者应该为此提供额外的一些信息。</strong> </p>
<p>管理指针形参有三种常用的技术：</p>
<p><strong>1.使用标记指定数组长度</strong></p>
<p>这种方法要求数组本身包含一个结束标记，使用这种方法的典型示例是C风格字符串。C风格字符串存储在字符数组中，并且在最后一个字符后面跟着一个空字符。函数在处理C风格字符串时遇到空字符就停止：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(cp)&#123;     <span class="comment">//若cp不是空指针</span></div><div class="line">        <span class="keyword">while</span>(*cp)&#123;     <span class="comment">//只要指针所指字符不是空字符</span></div><div class="line">            <span class="built_in">cout</span>&lt;&lt;*cp++;    <span class="comment">//输出当前字符并将指针前移</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法适用于那些有明显结束标记且该标记不会与普通数据混淆的情况。</p>
<p><strong>2.显示传递一个表示数组大小的形参</strong></p>
<p>这种方法是专门定义一个表示数组大小的形参，在C程序和过去的C++程序中常常使用这种方法。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//const int ia[]等价于const int *ia</span></div><div class="line"><span class="comment">//size表示数组的大小，将它显示地传给函数用于控制对ia元素的访问</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> ia[],<span class="keyword">size_t</span> size)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i != size; ++i)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ia[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方法通过形参size的值确定要输出多少个元素，调用print函数时必须传入这个表示数组大小的值：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> j[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line">print(j,<span class="number">3</span>);</div></pre></td></tr></table></figure></p>
<p><strong>3.使用标准库函数begin和end</strong></p>
<p>C++11标准引入两个名为begin和end的函数，begin函数返回指向数组首元素的指针，end函数返回指向数组尾元素下一位置的指针，这两个函数定义在iterator头文件中。<br>示例代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">-1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> *pbeg = begin(arr);     <span class="comment">//指向arr首元素的指针</span></div><div class="line">    <span class="keyword">int</span> *pend = end(arr);       <span class="comment">//指向arr尾元素的指针</span></div><div class="line"></div><div class="line">    <span class="comment">//寻找第一个负值元素，如果已经检查完全部元素则结束循环</span></div><div class="line">    <span class="keyword">while</span>(pbeg != pend &amp;&amp; *pbeg &gt;= <span class="number">0</span>)&#123;</div><div class="line">        ++pbeg;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*pbeg&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//输出第一个负数的值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于本文的print函数，可以写成如下形式:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *beg, <span class="keyword">const</span> <span class="keyword">int</span> *end)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//输出beg到end之间（不含end）的所有元素</span></div><div class="line">    <span class="keyword">while</span>(beg != end)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;*beg++&lt;&lt;<span class="string">" "</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了调用这两个函数，我们需要传入两个指针：一个指向要输出的首元素，另一个指向尾元素的下一个位置。使用方法如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line">print(begin(j),end(j));</div></pre></td></tr></table></figure></p>
<h2 id="数组形参和const"><a href="#数组形参和const" class="headerlink" title="数组形参和const"></a>数组形参和const</h2><p>当函数不需要对数组元素执行写操作的时候，数组形参应该是指向const的指针。只有当函数确实要改变元素值的时候，才把形参定义成指向非常量的指针。</p>
<h2 id="数组引用形参"><a href="#数组引用形参" class="headerlink" title="数组引用形参"></a>数组引用形参</h2><p>形参也可以是数组的引用，此时，引用形参绑定到对应的实参上，也就是绑定到数组上：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void print(int (&amp;arr)[10]) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> elem : arr)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;elem&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f(<span class="keyword">int</span> &amp;arr[<span class="number">10</span>])<span class="comment">//错误,将arr声明为引用的数组</span></div><div class="line">f(<span class="keyword">int</span> (&amp;arr)[<span class="number">10</span>])<span class="comment">//正确, arr是有10个整形的数组引用</span></div></pre></td></tr></table></figure></p>
<h2 id="传递多维数组"><a href="#传递多维数组" class="headerlink" title="传递多维数组"></a>传递多维数组</h2><p>和所有数组一样，当将多维数组传递给函数时，真正传递的是指向数组首元素的指针。因为我们处理的是数组的数组，<strong>所以首元素本身就是一个数组，指针就是指向数组的指针，数组的第二维（以及后面所有维度）的大小都是数组类型的一部分, 不能省略:</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//matrix指向数组的首元素，该数组的元素是由10个整数构成的数组</span></div><div class="line">void print(int (*matrix)[10], int rowsize)&#123;...&#125;</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> matrix[][<span class="number">10</span>], <span class="keyword">int</span> rowsize)</span></span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>我们也可以使用数组的语法定义函数，此时编译器会一如既往地忽略掉第一个维度，所以最好不要把它包括在形参列表内。</p>
<h2 id="main-处理命令行选项"><a href="#main-处理命令行选项" class="headerlink" title="main: 处理命令行选项"></a>main: 处理命令行选项</h2><p>C/C++语言中的main函数，经常带有参数argc，argv，如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div></pre></td></tr></table></figure>
<p>第二个形参argv是一个数组，它的元素是指向C风格字符串的指针；第一个形参argc表示数组中字符串的数量。</p>
<p><strong>当使用argv中的实参时，一定要记得可选的实参从argv[1]开始；argv[0]保存程序的名字，而非用户输入。</strong></p>
<p>下面的程序演示argc和argv的使用：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; argc; i++) &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Argument "</span>&lt;&lt;i&lt;&lt;<span class="string">" is "</span>&lt;&lt;argv[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如上述代码编译为hello.exe，那么运行<br>hello.exe a b c d e</p>
<p>将得到</p>
<pre><code>Argument 0 is hello.exe.
Argument 1 is a.
Argument 2 is b.
Argument 3 is c.
Argument 4 is d.
Argument 5 is e.
</code></pre><h2 id="含有可变形参的参数（先知道有这么个东西，后面详细了解）"><a href="#含有可变形参的参数（先知道有这么个东西，后面详细了解）" class="headerlink" title="含有可变形参的参数（先知道有这么个东西，后面详细了解）"></a>含有可变形参的参数（先知道有这么个东西，后面详细了解）</h2><h2 id="返回函数指针"><a href="#返回函数指针" class="headerlink" title="返回函数指针"></a>返回函数指针</h2><h1 id="函数重载（重点，待完善）"><a href="#函数重载（重点，待完善）" class="headerlink" title="函数重载（重点，待完善）"></a>函数重载（重点，待完善）</h1><p><strong>对于函数重载来说，形参数量或形参类型上有所不同。</strong></p>
<p><strong>不允许两个函数除了返回类型外，其他所有的要素都相同。</strong></p>
<h1 id="特殊用途语言特性"><a href="#特殊用途语言特性" class="headerlink" title="特殊用途语言特性"></a>特殊用途语言特性</h1><h2 id="默认实参"><a href="#默认实参" class="headerlink" title="默认实参"></a>默认实参</h2><p>知识点1：函数反复调用的过程中重复出现的形参，这样的值被称为默认实参。该参数在使用过程中可以被用户指定，也可以使用默认数值</p>
<p>知识点2：调用含有默认实参的函数时，可以包含该实参，也可以省略该实参。</p>
<p>知识点3：一旦某个形参被赋予了默认值，其后所有形参都必须有默认值。</p>
<p>知识点4：顺序很重要！在设计函数时，将默认值的形参放在后面。</p>
<p>知识点5：在给定的作用域中，一个形参只能被赋予一次默认实参，且局部变量不能作为默认实参。</p>
<h2 id="内联函数（inline）"><a href="#内联函数（inline）" class="headerlink" title="内联函数（inline）"></a>内联函数（inline）</h2><p>调用函数函数一般比求等价表达式的值要慢一些。在大多数机器上，一次函数调用其实包含着一系列工作：调用前要先保存寄存器，并在返回时恢复：可能需要拷贝实参；程序转向一个新的位置继续执行。</p>
<p><strong>内联函数可以避免函数调用的开销。</strong></p>
<p>将函数指定为“内联函数(inline)”，将它在每个调用点上“内联的展开”，该说明只是向编译器发出一个请求，编译器可以选择忽略这个请求。一般来说，内联的机制用于优化规模较小、流程直接、频繁调用的函数，建议不大于75行。</p>
<h2 id="constexpr函数"><a href="#constexpr函数" class="headerlink" title="constexpr函数"></a>constexpr函数</h2><p>constexpr函数是指能用于常量表达式的函数。定义constexpr函数的方法与其他函数类似，不过要遵循几项约定：函数的返回类型及所有参数的类型都得是字面值类型，而且函数体中必须有且只有一条return语句。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">new_sz</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="number">42</span>;&#125;</div><div class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> foo = new_sz();     <span class="comment">//正确：foo是一个常量表达式</span></div></pre></td></tr></table></figure>
<p>constexpr函数不一定返回常量表达式</p>
<h2 id="程序的调试帮助：assert和NDEBUG"><a href="#程序的调试帮助：assert和NDEBUG" class="headerlink" title="程序的调试帮助：assert和NDEBUG"></a>程序的调试帮助：assert和NDEBUG</h2><p>知识点1：预处理宏assert(expr)：包含一个表达式，expr为真时，assert什么也不做，为假时输出信息并终止程序。包含在cassert头文件中。通常用于检查不能发生的条件</p>
<p>知识点2：assert依赖于一个NDEBUG的预处理变量的状态，如果定义了NDEBUG，assert什么也不做，默认状态下NDEBUG是未定义的。编译器也可以预先定义该变量。</p>
<p>知识点3：也可以使用NDEBUG编写自己的条件调试代码，如果NDEBUG未定义，将执行#ifndef到#endif之间的代码，如果定义了NDEBUG，这些代码将被忽略。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pp</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> NDEBUG  </span></div><div class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">"my name is:"</span>&lt;&lt;__func__&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    <span class="comment">//其他代码  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一些C++编译器定义的调试有用的名字：</p>
<p>_ <em>func</em> _ :一个静态数组，存放函数的名字</p>
<p>_ <em>FILE</em> _ :存放文件名的字符串字面值</p>
<p>_ <em>LINE</em> _ :存放当前行号的整形字面值</p>
<p>_ <em>TIME</em> _ :存放文件编译时间的字符串字面值</p>
<p>_ <em>DATE</em> _ :存放文件编译日期的字符串字面值</p>
<h2 id="函数匹配"><a href="#函数匹配" class="headerlink" title="函数匹配"></a>函数匹配</h2><ol>
<li>首先确定<strong>候选函数</strong>：候选函数具备两个特征：一是与被调用的函数同名，二是其声明在调用点可见。</li>
<li>接着选出<strong>可行函数</strong>：可行函数具备两个特征：一是其形参数量与本次调用提供的实参数量相等，二是每个实参的类型与对应的形参类型相同，或者能转换成形参的类型。</li>
</ol>
<p>如果函数含有默认实参，则我们在调用该函数时传入的实参数量可能少于它实际使用的实参数量。</p>
<p>如果没有找到可行函数，编译器将报告无匹配函数的错误。</p>
<p>3.寻找<strong>最佳匹配</strong>：它的基本思想是，<strong>实参类型与形参类型越接近，他们匹配得越好</strong>。</p>
<p>编译器一次检查每个实参以确定哪个函数是最佳匹配。如果有且只有一个函数满足下列条件，则匹配成功：</p>
<ul>
<li>该函数每个实参的匹配都不劣于其他可行函数需要的匹配。</li>
<li>至少有一个实参的匹配优于其他可行函数提供的匹配。</li>
</ul>
<p>如果在检查了所有实参之后没有任何一个函数脱颖而出，则该调用是错误的。编译器将报告二义性调用的信息。</p>
<h1 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h1><p>函数指针指向的是函数而非对象，和其他指针一样，函数指针指向某种特定类型。函数的类型由它的返回类型和形参类型共同决定，与函数名无关。例如：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">lengthCompare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;,<span class="keyword">const</span> <span class="built_in">string</span> &amp;)</span></span>;</div></pre></td></tr></table></figure></p>
<p>该函数的类型是bool(const string&amp;,const string&amp;)。<strong>要想声明一个可以指向该函数的指针，只需要用指针替换函数名即可</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//pf指向一个函数，该函数的参数是两个const string 的引用，返回值是bool类型</div><div class="line">bool (*pf) const string&amp; ,const string &amp;);     //未初始化</div></pre></td></tr></table></figure>
<p>从我们声明的名字开始观察，pf前面有个*，因此pf是指针；右侧是形参列表，表示pf指向的是函数；在观察左侧，发现函数的返回类型是布尔值。因此，pf就是一个指向函数的指针，其中该函数的参数是两个const string的引用，返回值是bool类型。</p>
<p><strong>注意：</strong> *pf两端的括号必不可少。</p>
<p>知识点2：当我们把函数名当作一个值使用时，函数自动的转换为指针，直接赋予或者取址皆可。可以直接使用只想该函数的指针调用该函数。</p>
<p>知识点3：给指针赋予nullptr或者0时，指针不指向任何函数。</p>
<p>知识点4：函数重载时，指针的类型必须与重载函数精确匹配，包括形参类型数量和返回值类型。</p>
<p>知识点5：虽然不能返回一个函数，但是可以返回一个指向函数的指针。</p>
<h2 id="返回指向函数的指针"><a href="#返回指向函数的指针" class="headerlink" title="返回指向函数的指针"></a>返回指向函数的指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (*f1(<span class="keyword">int</span>)) (<span class="keyword">int</span> *,<span class="keyword">int</span>)</div></pre></td></tr></table></figure>
<p>我们看到f1有形参列表，所以f1是个函数；f1前面有*，所以f1返回一个指针；进一步观察发现，指针的类型本身也包含形参列表，因此指针指向函数，该函数的返回类型是int.</p>
<p>出于完整性的考虑，有必要提醒读者我们还可以使用尾置返回类型的方式声明一个返回函数指针的函数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">auto f1(int)  -&gt; int (*)(int *,int);</div></pre></td></tr></table></figure>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;  </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">      </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">return</span> a+b;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a - b; &#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a * b; &#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b != <span class="number">0</span> ? a / b : <span class="number">0</span>; &#125;<span class="comment">//声明定义函数  </span></div><div class="line">      </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*p)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  <span class="comment">//声明函数指针，未初始化,p为指向函数的指针。使用typedef的声明语句定义的不再是变量而是类型别名  </span></div><div class="line">    <span class="comment">//就是将变量转化为类型别名的一种方式，p原来是指向函数的指针变量，现在变成了指向函数的指针变量的类型别名  </span></div><div class="line">    <span class="built_in">vector</span>&lt;p&gt; vec&#123;add, subtract, multiply, divide&#125;;<span class="comment">//vector初始化的C++11新特性  </span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> f : vec)  </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; f(<span class="number">2</span>, <span class="number">2</span>) &lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数基础&quot;&gt;&lt;a href=&quot;#函数基础&quot; class=&quot;headerlink&quot; title=&quot;函数基础&quot;&gt;&lt;/a&gt;函数基础&lt;/h1&gt;&lt;p&gt;一个典型的函数定义包括以下部分：&lt;strong&gt;返回类型、函数名、由0个或多个形参组成的列表以及函数体&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.wangxinri.cn/categories/C/"/>
    
    
      <category term="函数" scheme="http://www.wangxinri.cn/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>try语句块和异常处理</title>
    <link href="http://www.wangxinri.cn/2017/10/15/try%E8%AF%AD%E5%8F%A5%E5%9D%97%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://www.wangxinri.cn/2017/10/15/try语句块和异常处理/</id>
    <published>2017-10-15T02:59:00.000Z</published>
    <updated>2018-01-16T12:52:54.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>简单介绍try语句块和异常处理。</p>
<a id="more"></a>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常处理机制为程序中异常检测和异常处理这两部分的协作提供了支持。在C++语言中，异常处理包括：</p>
<ul>
<li><strong>throw表达式</strong>（throw expression），异常检测部分使用throw表达式来表示它遇到的了无法处理的问题，我们说throw引发了异常。</li>
<li><strong>try语句块</strong>（try block）,异常处理部分使用try语句处理异常。try语句块以关键字try开始，并以一个或多个catch字句结束。try语句块中代码抛出的异常通常会被某个catch字句处理。因为<strong>catch字句”处理“异常，所以它们也被称作异常处理代码</strong>。</li>
<li><strong>一套异常类</strong>（exception class），用于在throw表达式和相关的catch字句之间传递异常具体信息。</li>
</ul>
<h2 id="throw表达式"><a href="#throw表达式" class="headerlink" title="throw表达式"></a>throw表达式</h2><p>程序的异常检测部分使用throw表达式引发一个异常。throw表达式包含关键字throw和紧随其后的一个表达式，其中表达式的类型就是抛出的异常类型。throw表达式后面通常紧跟一个分号，从而构成一条表达式语句。</p>
<h2 id="try语句块"><a href="#try语句块" class="headerlink" title="try语句块"></a>try语句块</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    program-staments</div><div class="line">&#125;<span class="keyword">catch</span>(exception-declaration)&#123;</div><div class="line">    handler-staments</div><div class="line">&#125;<span class="keyword">catch</span>(exception-declaration)&#123;</div><div class="line">    handler-staments</div><div class="line">&#125; ...</div></pre></td></tr></table></figure>
<p><strong>代码示例</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">#include &lt;stdexcept&gt;   //标准异常库</div><div class="line">using namespace std;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int a,b;</div><div class="line">    cout&lt;&lt;&quot;请输入相除的两个整数：&quot;;</div><div class="line">    while(cin&gt;&gt;a&gt;&gt;b)</div><div class="line">    &#123;</div><div class="line">        try</div><div class="line">        &#123;</div><div class="line">            if (b == 0) throw std::runtime_error(&quot;被除数不能为0&quot;);//runtime_error异常类:只有在运行时才能检测出的问题</div><div class="line">            cout&lt;&lt;static_cast&lt;double&gt;(a)/b&lt;&lt;endl;//考虑到不可以整除产生小数的情况,先将a强制转化为double类型</div><div class="line">        &#125;</div><div class="line">        catch (runtime_error err)//err是runtime_error类的一个实例</div><div class="line">        &#123;</div><div class="line">            cout &lt;&lt; err.what() ;</div><div class="line">            //实例的成员函数，返回内容由编译其决定</div><div class="line">            cout &lt;&lt; &quot;\n是否需要重新输入? Enter y or n:&quot; &lt;&lt; endl;</div><div class="line">            char c;</div><div class="line">            cin &gt;&gt; c;</div><div class="line">            if (!cin || c == &apos;n&apos;)</div><div class="line">                break;//break只能用在开关体或者循环体中</div><div class="line">        &#125;//简单来说try是检测异常的，如果产生了异常，就throw(抛出)一个异常，然后被catch到，进行异常的处理</div><div class="line">        //如果没有catch部分，仅有try，仍然会报错</div><div class="line">        cout&lt;&lt;&quot;请输入相除的两个整数：&quot;;</div><div class="line">    &#125;</div><div class="line">    return 0 ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果：</p>
<pre><code>请输入相除的两个整数：2 4
0.5
请输入相除的两个整数：2 0
被除数不能为0
是否需要重新输入?
n
</code></pre><p>简单来说try是检测异常的，如果产生了异常，就throw(抛出)一个异常，然后被catch到，进行异常的处理，如果没有catch部分，仅有try，仍然会报错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;简单介绍try语句块和异常处理。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.wangxinri.cn/categories/C/"/>
    
    
      <category term="异常处理" scheme="http://www.wangxinri.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>表达式基础</title>
    <link href="http://www.wangxinri.cn/2017/10/14/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.wangxinri.cn/2017/10/14/表达式基础/</id>
    <published>2017-10-14T14:00:00.000Z</published>
    <updated>2018-01-16T12:49:39.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>介绍C++中常见的表达式。</p>
<a id="more"></a>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="组合运算符和运算对象"><a href="#组合运算符和运算对象" class="headerlink" title="组合运算符和运算对象"></a>组合运算符和运算对象</h3><p>对于含有多个运算符的复杂表达式来说，要想理解它的含义首先要理解<strong>运算符的优先级、结合律以及运算对象的求值顺序。</strong></p>
<h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><p>左值可以位于赋值语句的左侧、右值则不能。</p>
<p>当一个对象被用于右值的时候，用的是对象的值（内容）；当对象被用作左值的时候，用的是对象的身份（在内存中的为止）。</p>
<h3 id="求值顺序（重点）"><a href="#求值顺序（重点）" class="headerlink" title="求值顺序（重点）"></a>求值顺序（重点）</h3><p>优先级规定了运算对象的组合方式，但是没有说明运算对象按照什么顺序求值。在大多数情况下，不会明确指定求值的顺序。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = f1()*f2();</div></pre></td></tr></table></figure>
<p>我们是无法知道到底f1在f2之前调用还是f2在f1之前调用。</p>
<p>对于那些没有指定执行顺序的运算符来讲，如果表达式指向并修改了同一个对象，将会引发错误并产生未定义行为，比如：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;++i&lt;&lt;<span class="built_in">endl</span>;</div></pre></td></tr></table></figure>
<p>表达是的行为不可预知，编译器执行i或者++i的顺序是未知的。</p>
<p><strong>以下4中运算符明确规定了运算对象的求值顺序</strong>：<font color="red"><strong>&amp;&amp;(逻辑与) ||(逻辑或) ?:(条件运算符) ,(逗号运算符)。</strong></font></p>
<h3 id="求值顺序、优先级、结合律"><a href="#求值顺序、优先级、结合律" class="headerlink" title="求值顺序、优先级、结合律"></a>求值顺序、优先级、结合律</h3><p>运算对象的求值顺序与优先级和结合律无关，在一条形如f()+g()*h()+j()的表达式中：</p>
<ul>
<li>优先级规定，g()的返回值和h()的返回值相乘。</li>
<li>结合律规定，f()的返回值先与g()和h()的乘积相加，所得结果再与j()的返回值相加。</li>
<li>对于这些函数的调用顺序没有明确规定。</li>
</ul>
<p>如果f、g、h和j是无关函数，它们既不会改变同一对象的状态也不执行IO任务，那么函数的调用顺序不受限制。反之，如果其中某几个函数影响同一对象，则它是一条错误的表达式，将产生未定义的行为。</p>
<p><strong>建议：</strong> 处理复合表达式以下两条经验准则对书写复合表达式有益：</p>
<ul>
<li>拿不准的时候最好用括号来强制让表达式的组合关系符合程序逻辑的要求。</li>
<li>如果改变了某个运算对象的值，在表达式的其他地方不要再使用这个运算对象。</li>
</ul>
<p>第2条规则有一个重要例外，当改变运算对象的子表达式本身就是另外一个子表达式的运算对象时该规则无效。例如，在表达式*++iter中，递增运算符改变iter的值，iter（已经改变）的值又是解引用运算符的运算对象。此时（或类似的情况下），求值的顺序不会成为问题，因为递增运算（即改变运算对象的子表达式）必须先求值，然后才轮到解引用运算。显然，这是一种很常见的用法，不会造成什么问题。</p>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="%运算符"></a>%运算符</h3><p>如果m%n不等于0，则它的符号和m相同。</p>
<pre><code>m%(-n)  等于  m%n
(-m)%n  等于 -(m%n)
-21 % -8 = -5
21 % -5 = 1
</code></pre><h2 id="逻辑和关系运算符"><a href="#逻辑和关系运算符" class="headerlink" title="逻辑和关系运算符"></a>逻辑和关系运算符</h2><p><strong>逻辑与(&amp;&amp;)和逻辑或(||)</strong> 都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。这种策略称为 <strong>短路求值</strong>。</p>
<p>text是存储这string对象的vector，要求输出string对象的内容并且在遇到空字符串或者以句号结束的字符串时进行换行。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//s是对常量的引用；元素既没有被拷贝也不会被改变</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;s : text) &#123;  </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;s;</div><div class="line">    <span class="keyword">if</span>(s.empty()||s[s.size()<span class="number">-1</span>] == <span class="string">'.'</span>)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>值得注意的是</strong>，s被声明成对常量的引用，因为text的元素是string对象，可能非常大，所以将s声明成引用类型可以避免对元素的拷贝；又因为不需要对string对象做写操作，所以声明成对常量的引用。</p>
<h3 id="优先级注意"><a href="#优先级注意" class="headerlink" title="优先级注意"></a>优先级注意</h3><font color="red"> <strong>算数运算符&gt;关系运算符&gt;逻辑运算符</strong> </font>

<h3 id="赋值运算符满足右结合律"><a href="#赋值运算符满足右结合律" class="headerlink" title="赋值运算符满足右结合律"></a>赋值运算符满足右结合律</h3><p>赋值运算符满足右结合律，这一点与其他二元运算符不太一样。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival,jval;</div><div class="line">ival = jval = <span class="number">0</span>;    <span class="comment">//正确，都被赋值为0</span></div></pre></td></tr></table></figure>
<p>因为赋值运算符满足右结合律，所以靠右的赋值运算 jval=0作为靠左的赋值运算符的右侧运算对象。又因为<strong>赋值运算符返回的是其左侧运算对象</strong>，所以靠右的赋值运算的结果（jval=2返回的结果为左侧运算对象jval）被赋给了ival。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cout</span>&lt;&lt;(jval = <span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;      <span class="comment">// 输出2</span></div></pre></td></tr></table></figure></p>
<h3 id="赋值运算符优先级较低"><a href="#赋值运算符优先级较低" class="headerlink" title="赋值运算符优先级较低"></a>赋值运算符优先级较低</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i ;</div><div class="line"><span class="comment">//一种很好的写法</span></div><div class="line"><span class="keyword">while</span>((i=get_value()) != <span class="number">42</span>) &#123;</div><div class="line">    <span class="comment">//其他处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 因为赋值运算符的优先级低于关系运算符的优先级，所以在条件语句中，赋值部分通常应该加上括号。</p>
<h2 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h2><p>递增和递减有两种形式：前置版本和后置版本。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i =<span class="number">0</span>,j;</div><div class="line">j = ++i;              <span class="comment">//j = 1,i = 1;   前置版本得到递增之后的值</span></div><div class="line">j = i++;              <span class="comment">//j = 1,i = 2;   后置版本得到递增之前的值</span></div></pre></td></tr></table></figure>
<p><strong>区别：前置版本将对象本身作为左值返回，后置版本则将对象的原始副本作为右值返回。</strong></p>
<font color="red"> <strong>建议：除非必须，否则不用递增递减运算符的后置版本</strong> </font>                      

<p>有C语言背景的读者可能对优先使用前置版本递增运算符有所疑问，其实原因非常简单：前置版本的递增运算符避免了不必要的工作，它把值加1后直接返回改变了的运算对象。与之相比，<strong>后置版本需要将原始值存储下来以便于返回这个未修改的内容。如果我们不需要修改前的值，那么后置版本的操作就是一种浪费。</strong></p>
<p>对于整数和指针类型来说，编译器可能对这种额外的工作进行一定的优化；但是对于相对复杂的迭代器类型，这种额外的工作就消耗巨大了。建议养成使用前置版本的习惯，这样不仅不需要担心性能的问题，而且更重要的是写出的代码会更符合编程的初衷。</p>
<h2 id="混用解引用和递增运算符"><a href="#混用解引用和递增运算符" class="headerlink" title="混用解引用和递增运算符"></a>混用解引用和递增运算符</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//推荐写法</span></div><div class="line"><span class="built_in">cout</span>&lt;&lt;*iter++&lt;&lt;<span class="built_in">endl</span>;    <span class="comment">//等价于*(iter++)</span></div></pre></td></tr></table></figure>
<p>后置运算符的优先级高于解引用运算符。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vec[ival++] &lt;= vec[ival];        <span class="comment">//未定义的错误，先求左侧的值还是先求右侧的值不确定</span></div></pre></td></tr></table></figure>
<h2 id="成员访问运算符"><a href="#成员访问运算符" class="headerlink" title="成员访问运算符"></a>成员访问运算符</h2><p>点运算符和箭头运算符都可用与访问成员，其中，点运算符获取类对象的一个成员；箭头运算符与点运算符有关，<font color="red">表达式ptr-&gt;men等价于(*ptr)mem </font> :</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> s1 = <span class="string">"a string"</span>, *p = &amp;s1;</div><div class="line"><span class="keyword">auto</span> n = s1.size();        </div><div class="line">n = (*p).size();        <span class="comment">//运行p所指对象的size成员</span></div><div class="line">n = p-&gt;size();          <span class="comment">//等价于(*p).size()</span></div></pre></td></tr></table></figure>
<p><strong>注意：解引用运算符的优先级低于点运算符。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*p.size()          <span class="comment">// 错误，p是一个指针，它没有名为size的成员</span></div></pre></td></tr></table></figure>
<h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p><strong>优先级</strong></p>
<p><strong>条件运算符优先级高于赋值、逗号运算符，低于其他运算符。</strong></p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m&lt;n ? x : a+3                等价于：(m&lt;n) ?(x) :(a+3)</div><div class="line">a++&gt;=10 &amp;&amp; b--&gt;20 ? a : b    等价于：(a++&gt;=10 &amp;&amp; b--&gt;20) ? a : b</div><div class="line">x=3+a&gt;5 ? 100 : 200          等价于：x= (( 3+a&gt;5 ) ? 100 : 200 )</div></pre></td></tr></table></figure></p>
<p><strong>结合性</strong></p>
<p><strong>条件运算符具有右结合性。</strong></p>
<p>当一个表达式中出现多个条件运算符时，应该将位于最右边的问号与离它最近的冒号配对，并按这一原则正确区分各条件运算符的运算对象。</p>
<p>例如：</p>
<pre><code> w&lt;x ? x+w : x&lt;y ? x : y
与 w&lt;x ? x+w : ( x&lt;y ? x : y) 等价
与 (w&lt;x ? x+w : x&lt;y) ? x : y 不等价
</code></pre><font color="red">注意： 随着条件运算嵌套的增加，代码的可读性急剧下降。因此，条件运算符的嵌套最好别超过两到三层。 </font>


<h2 id="位运算符（基础，待补充）"><a href="#位运算符（基础，待补充）" class="headerlink" title="位运算符（基础，待补充）"></a>位运算符（基础，待补充）</h2><p>一个使用位运算符的例子</p>
<p>假设一个班级有30个学生,我们用一个二进制位来代表某个学生在依次测试中是否通过，显然全班的测试结果可以用一个无符号整数来表示：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> quizl = <span class="number">0</span> ;          <span class="comment">//我们把这个值当成是位的集合来使用</span></div></pre></td></tr></table></figure>
<p>将quizl类型定义位unsigned long，这样，quizl在任何机器上都将至少拥有32位；给quizl赋一个明确的初始值，使得它的每一位在开始时都有统一且固定的值。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1UL是一个unsigned long类型的整数字面值1</span></div><div class="line"><span class="comment">//1UL&lt;&lt;27;    生成一个值，该值只有第27位为1</span></div><div class="line">quizl |= <span class="number">1U</span>L&lt;&lt;<span class="number">27</span>;        <span class="comment">//表示学生27通过了测试</span></div><div class="line"></div><div class="line">quizl &amp;= ~(<span class="number">1U</span>L&lt;&lt;<span class="number">27</span>);     <span class="comment">//学生27未通过测试</span></div><div class="line"></div><div class="line"><span class="keyword">bool</span> status = quizl &amp; (<span class="number">1U</span>L&lt;&lt;<span class="number">27</span>);   <span class="comment">//学生27是否通过了测试？</span></div></pre></td></tr></table></figure>
<h2 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h2><p>sizeof运算符返回一条表达式或一个类型名字所占的字节数。sizeof运算符满足右结合律，其所得到的值是一个size_t类型的常量表达式。</p>
<p>sizeof的三种语法形式：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sizeof</span>(object);        <span class="comment">//sizeof(对象);</span></div><div class="line"><span class="keyword">sizeof</span>(type_name);     <span class="comment">//sizeof(类型);</span></div><div class="line"><span class="keyword">sizeof</span> object;         <span class="comment">//sizeof对象;</span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">sizeof</span>(i);     <span class="comment">//ok</span></div><div class="line"><span class="keyword">sizeof</span> i;      <span class="comment">//ok</span></div><div class="line"><span class="keyword">sizeof</span>(<span class="keyword">int</span>);   <span class="comment">//ok</span></div><div class="line"><span class="keyword">sizeof</span> <span class="keyword">int</span>;    <span class="comment">//error</span></div></pre></td></tr></table></figure>
<p>既然写法3可以用写法1代替，为求形式统一以及减少我们大脑的负担，第3种写法，忘掉它吧！实际上，sizeof计算对象的大小也是转换成对对象类型的计算，也就是说，同种类型的不同对象其sizeof值都是一致的。这里，对象可以进一步延伸至表达式，即sizeof可以对一个表达式求值，编译器根据表达式的最终结果类型来确定大小，一般不会对表达式进行计算。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">sizeof</span>(*p);          <span class="comment">//指针所占的空间大小，与指针指向的类型无关</span></div></pre></td></tr></table></figure>
<p>sizeof不会实际求运算对象的值，所以即使p是一个无效（即未初始化）的指针也不会有什么影响，在sizeof的运算对象中解引用一个无效指针仍然是一种安全行为，因为指针实际并没有被真正使用。sizeof不需要真的解引用指针也能知道它所指对象的类型。</p>
<p>C++11新标准允许我们使用作用域来获取成员的大小。通常情况下只有通过类的对象才能访问到类的成员，但是sizeof运算符无须我们提供一个具体的对象。因为要想知道类成员的大小无须真的获取该成员。</p>
<p>sizeof运算符的结果部分地依赖于其作用的类型：</p>
<ul>
<li>对char或者类型为char的表达式指向sizeof运算，结果为1；</li>
<li>对引用类型执行sizeof运算得到被引用对象所占空间的大小；</li>
<li>对指针指向sizeof运算得到指针本身所占空间的大小；</li>
<li>对解引用指针执行sizeof运算符得到指针指向的对象所占空间的大小，指针不需有效。</li>
<li>对数组执行sizeof运算限制得到整个数组所占空间的大小，等价于对数组这所有的元素各执行一次sizeof运算并将所得结果求和。注意，sizeof运算不会把数组转换成指针来处理</li>
<li>对string对象或vector对象执行sizeof运算只返回该类型固定部分的大小，不会计算对象中的元素占用了多少空间。</li>
</ul>
<p>因为执行sizeof运算能得到整个数组的大小，所以可以用数组的大小除以单个元素的大小得到数组中元素的个数：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sizeof(ia)/sizeof(*ia)返回ia的元素数量  </span></div><div class="line"><span class="keyword">constexpr</span> <span class="keyword">size_t</span> sz = <span class="keyword">sizeof</span>(ia)/<span class="keyword">sizeof</span>(*ia);  </div><div class="line"><span class="keyword">int</span> arr2[sz];   <span class="comment">// 正确：sizeof返回一个常量表达式</span></div></pre></td></tr></table></figure>
<p>因为sizeof的返回值是一个常量表达式，所以我们可以用sizeof的结果声明数组的维度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;介绍C++中常见的表达式。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.wangxinri.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.wangxinri.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>数组&amp;指针&amp;string</title>
    <link href="http://www.wangxinri.cn/2017/10/14/%E6%95%B0%E7%BB%84&amp;%E6%8C%87%E9%92%88&amp;string/"/>
    <id>http://www.wangxinri.cn/2017/10/14/数组&amp;指针&amp;string/</id>
    <published>2017-10-14T04:59:25.000Z</published>
    <updated>2018-01-16T12:43:02.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>介绍使用数组的基本方法，同时介绍C++中string的初始化和一些常用函数。</p>
<a id="more"></a>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组与vector相似的地方是，数组也是存放类型相同的对象的容器，这些对象本身没有名字需要通过其所在位置访问。与vector不同的是，数组的大小确定不变，不能随意向数组中增加元素。因为数组的大小固定，因此对某些特殊的应用来说程序运行时性能较好，但是相对地也损失了一些灵活性。</p>
<p><strong>note：</strong> 如果不清楚元素的确切个数，请使用vector。</p>
<h2 id="定义和初始化内置数组"><a href="#定义和初始化内置数组" class="headerlink" title="定义和初始化内置数组"></a>定义和初始化内置数组</h2><p>数组是一种复合类型，数组中元素的个数也属于数组类型的一部分，编译的时候维度应该是已知的。也就是说，<strong>维度必须是一个常量表达式</strong>。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> cnt = <span class="number">42</span>;        <span class="comment">//不是常量表达式</span></div><div class="line"><span class="keyword">constexpr</span> <span class="keyword">unsigned</span> sz = <span class="number">42</span>;       <span class="comment">//常量表达式</span></div><div class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];           <span class="comment">//含有10个整型的数组</span></div><div class="line"><span class="keyword">int</span> *parr[sz];          <span class="comment">//含有42个整型指针的数组</span></div><div class="line"><span class="built_in">string</span> bad[cnt];         <span class="comment">//错误：cnt不是常量表达式</span></div><div class="line"><span class="built_in">string</span> strs[get_size()];     <span class="comment">//当gett_size是constexpr时正确；否则错误</span></div></pre></td></tr></table></figure>
<p>默认情况下，数组的元素被默认初始化。另外数组的元素应为对象，因此不存在引用的数组。</p>
<h2 id="显式初始化数组元素"><a href="#显式初始化数组元素" class="headerlink" title="显式初始化数组元素"></a>显式初始化数组元素</h2><p>可以对数组的元素进行列表初始化，此时允许忽略数组的纬度。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> sz = <span class="number">3</span>;</div><div class="line"><span class="keyword">int</span> ial[sz] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;      <span class="comment">//含有三个元素的数组，元素值分别是０１２</span></div><div class="line"><span class="keyword">int</span> a2[] = &#123;<span class="number">0</span> ,<span class="number">1</span> , <span class="number">2</span>&#125;;      <span class="comment">//维度是３的数组</span></div><div class="line"><span class="keyword">int</span> a3[<span class="number">5</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;        <span class="comment">// 等价于&#123;0,1,2,0,0&#125;</span></div><div class="line"><span class="built_in">string</span> a4[<span class="number">3</span>] = &#123;“hi” , “bye”&#125;;  <span class="comment">//&#123;“hi”,”bye” ,”“&#125;</span></div><div class="line"><span class="keyword">int</span> a5[<span class="number">2</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;         <span class="comment">//错误，　初始值太多</span></div></pre></td></tr></table></figure>
<h2 id="字符数组的特殊性（用字符串字面值对数组进行初始化）"><a href="#字符数组的特殊性（用字符串字面值对数组进行初始化）" class="headerlink" title="字符数组的特殊性（用字符串字面值对数组进行初始化）"></a>字符数组的特殊性（用字符串字面值对数组进行初始化）</h2><p>字符数组可以用字符串字面值初始化，但是特殊的是结束符（’\0’）也会被拷贝进去<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> a1[] = &#123;‘C’,’+’ ,’+’&#125;;       <span class="comment">//列表初始化没有空字符</span></div><div class="line"><span class="keyword">char</span> a2[] = &#123;‘C’,’+’,‘+’,’\<span class="number">0</span>’&#125;;    <span class="comment">//列表初始化，含有显示的空字符</span></div><div class="line"><span class="keyword">char</span> a3[] = “C++”;                 <span class="comment">//自动添加表示字符串结束的空字符</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> a4[<span class="number">6</span>] =”Daniel”;      <span class="comment">//错了，没有空间可以存放空字符</span></div></pre></td></tr></table></figure></p>
<p>a4数组的大小必须至少是7。</p>
<h2 id="数组不允许拷贝和赋值"><a href="#数组不允许拷贝和赋值" class="headerlink" title="数组不允许拷贝和赋值"></a>数组不允许拷贝和赋值</h2><p>不能将数组的内容拷贝给其他数组作为其初始值，也不能用数组为其他数组赋值：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">int</span> a2[] = a;         <span class="comment">//错误：不允许使用一个数组初始化另一个数组</span></div><div class="line">a2 = a;               <span class="comment">//错误：不能把一个数组直接赋值给另一个数组</span></div></pre></td></tr></table></figure>
<h2 id="理解复杂的数组声明"><a href="#理解复杂的数组声明" class="headerlink" title="理解复杂的数组声明"></a>理解复杂的数组声明</h2><p>可以定义一个存放指针的数组。又因为数组本身是对象，所以允许定义数组的指针（指向数组的指针）及数组的引用（对数组的引用）。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//[]的优先级比*高</span></div><div class="line"><span class="keyword">int</span> *ptrs[<span class="number">10</span>];                  <span class="comment">//ptrs是含有10个整型指针的数组</span></div><div class="line"><span class="keyword">int</span> (*Parray)[<span class="number">10</span>] = &amp;arr;       <span class="comment">//Parray指向一个含有10个整数的数组</span></div><div class="line"><span class="keyword">int</span> (&amp;arrRef)[<span class="number">10</span>] = arr;        <span class="comment">//arrRef引用一个含有10个整数的数组</span></div></pre></td></tr></table></figure>
<p><strong>默认情况下，类型修饰符从右向左一次绑定，</strong> 对于ptrs来说，首先知道我们定义了一个大小为10的数组，它的名字是ptrs，然后知道数组中存放的是指向int的指针。</p>
<p><strong>要想理解数组声明的含义，最好的办法是从数组的名字开始按照由内向外的顺序阅读。</strong></p>
<p>Parray的含义：首先*Parray意味着Parray是个指针，接下来观察右边，可知道Parray是个指向大小为10的数组的指针，最后观察左边，知道数组中的元素是int。最终，Parray是一个指针，它指向一个int数组，数组中包含10个元素。</p>
<p>当然，对修饰符的数量并没有特殊限制：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *(&amp;<span class="built_in">array</span>)[<span class="number">10</span>] = ptrs;     <span class="comment">//array是数组的引用，该数组含有10个指针</span></div></pre></td></tr></table></figure>
<h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p>数组的元素也能使用范围for语句或下标运算符来访问。</p>
<p>当需要遍历数组的所有元素时，最好的办法也是使用范围for语句。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : scores) &#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h2><p>在C++语言中，指针和数组有非常紧密的联系。使用数组的时候编译器一般会把它转换成指针。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> nums[] = &#123;<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>&#125;;          <span class="comment">//数组的元素是string对象</span></div><div class="line"><span class="built_in">string</span> *p = &amp;nums[<span class="number">0</span>];                           <span class="comment">//p指向nums的第一个元素</span></div></pre></td></tr></table></figure>
<p>数组的一个特性：<strong>在很多用到数组名字的地方，编译器都会自动地将其替换为一个指向数组首元素的指针。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> *p = nums;       <span class="comment">//等价于p2=&amp;nums[0];</span></div></pre></td></tr></table></figure>
<h2 id="auto-和-decltype"><a href="#auto-和-decltype" class="headerlink" title="auto 和 decltype"></a>auto 和 decltype</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ia[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">auto</span> <span class="title">ia2</span><span class="params">(ia)</span></span>;       <span class="comment">//ia2是一个整型指针，指向ia的第一个元素</span></div><div class="line"></div><div class="line"><span class="keyword">decltype</span>(ia) ia3 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;     <span class="comment">//ia3类型是由10个整数构成的数组，并对该数组进行赋值</span></div></pre></td></tr></table></figure>
<h2 id="指针也是迭代器"><a href="#指针也是迭代器" class="headerlink" title="指针也是迭代器"></a>指针也是迭代器</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line"><span class="keyword">int</span> *p = arr;            <span class="comment">//p指向arr的第一个元素</span></div><div class="line">++p;</div></pre></td></tr></table></figure>
<p>遍历数组元素，我们可以设法获取数组尾元素之后的那个并不存在的元素的地址：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *e = &amp;arr[<span class="number">10</span>];       <span class="comment">//指向尾元素的下一位置的指针</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> *b = arr; b!=e; ++b)&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*b&lt;&lt;end;       <span class="comment">//输出arr的元素</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>note:</strong> 尽管能计算得到尾后指针，但是这种用法极易出错，C++11新标准引入了两个名为begin和end的函数。这两个函数与容器中的两个同名成员功能类似。</p>
<p><strong>begin函数返回指向ia首元素的指针，end函数返回指向ia尾元素下一位置的指针</strong>，这两个函数定义在<strong>iterator</strong>头文件中。</p>
<p>正确的使用形式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ia[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line"><span class="keyword">int</span> *beg = begin(ia);    <span class="comment">//指向ia首元素的指针</span></div><div class="line"><span class="keyword">int</span> *last = end(ia);     <span class="comment">//指向arr尾元素的下一位置的指针</span></div><div class="line"><span class="keyword">for</span>(beg;beg!=last;++beg)&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;*beg&lt;&lt;<span class="string">" "</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>note:</strong> 一个指针如果指向了某种内置类型数组的尾元素的”下一位置“，则其具备与vector的end()函数返回的与迭代器类似的功能。特别要注意，<strong>尾后指针不能执行解引用和递增操作</strong>。</p>
<h3 id="下标和指针"><a href="#下标和指针" class="headerlink" title="下标和指针"></a>下标和指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ia[] = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;    <span class="comment">//含有5个整数的数组</span></div><div class="line"><span class="keyword">int</span> i = ia[<span class="number">2</span>];        <span class="comment">//ia[2]得到(ia+2)所指的元素，即*(ia+2)</span></div><div class="line"><span class="keyword">int</span> *p = ia;</div><div class="line">i = *(p+<span class="number">2</span>);         <span class="comment">//等价于i = ia[2];</span></div><div class="line">只要指针指向的是数组中的元素(或者数组中尾元素的下一位置，此时下标需要为负值)，都可以执行下标运算。</div><div class="line"><span class="keyword">int</span> *p = &amp;ia[<span class="number">2</span>];      <span class="comment">//p指向索引为2的元素</span></div><div class="line"><span class="keyword">int</span> j = p[<span class="number">1</span>];         <span class="comment">//j = ia[3]</span></div><div class="line"><span class="keyword">int</span> k = p[<span class="number">-2</span>];        <span class="comment">//k = ia[0]</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 内置的下标运算符所用的索引值不是无符号类型，这一点与vector和string不一样。</p>
<h2 id="C风格字符串"><a href="#C风格字符串" class="headerlink" title="C风格字符串"></a>C风格字符串</h2><p>C风格字符串不是一种类型，而是为了表达和使用字符串而形成的一种约定俗成的写法。按此习惯书写的字符串存放在字符数组中并以<strong>空字符结束</strong>（null terminated）。以空字符结束的意思是在字符串最后一个字符后面跟着一个空字符（’\0’）。</p>
<p><strong>C风格字符字符串函数</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">\\p,p1,p2都是字符数组的形式，在<span class="built_in">string</span>.h头文件中</div><div class="line"><span class="built_in">strlen</span>(p)         返回p的长度，空字符不计算在内</div><div class="line"><span class="built_in">strcmp</span>(p1,p2)     比较p1和p2的相等。如果p1==p2，返回<span class="number">0</span>；如果p1&gt;p2,返回一个正值；如果p1&lt;p2，返回一个负值</div><div class="line"><span class="built_in">strcat</span>(p1,p2)     将p2附加到p1之后，返回p1</div><div class="line"><span class="built_in">strcpy</span>(p1,p2)     将p2拷贝给p1,返回p1</div></pre></td></tr></table></figure>
<p>对大多数应用来说，使用标准库string要比使用C风格字符串更安全、更高效。</p>
<h2 id="与旧代码的接口"><a href="#与旧代码的接口" class="headerlink" title="与旧代码的接口"></a>与旧代码的接口</h2><p>现代的C++ 程序不得不与那些充满了数组或C风格字符串的代码衔接，为了使这一工作简单易行，C++专门提供了一组功能。</p>
<h2 id="混用string对象和C风格字符串"><a href="#混用string对象和C风格字符串" class="headerlink" title="混用string对象和C风格字符串"></a>混用string对象和C风格字符串</h2><p>允许使用字符串字面值来初始化对象：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">"Hello world"</span>)</span></span>;      <span class="comment">//s的内容是Hello world</span></div></pre></td></tr></table></figure>
<p>更一般的情况，<strong>任何出现字符串字面值的地方都可以用以空字符结束的字符数组来替代</strong>：</p>
<ul>
<li>允许使用空字符结束的字符数组来初始化string对象或为string对象赋值。</li>
<li>在string对象的加法运算过程中允许使用以空字符串结束的字符数组作为其中一个运算对象（不能两个运算对象都是）；在string对象的复合赋值运算中匀速使用以空字符串结束的字符数组作为右侧的运算对象。</li>
</ul>
<p>上述性质反过来就不成立，比如不能用string对象直接初始化指向字符的指针。为了完成该功能，string专门提供了一个名为<strong>c_str的成员函数</strong>。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> s = <span class="string">"wangxinri"</span>;</div><div class="line"><span class="keyword">char</span> *p = s ;      <span class="comment">//错误，不能用string对象直接初始化指向字符的指针</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str = s.c_str();      <span class="comment">//正确</span></div></pre></td></tr></table></figure>
<p>我们无法保证c_str()返回的数组一直有效，事实上，如果后续的操作改变了s的值就可能让之前返回的数组失去效果。因此使用最好将c_str()返回的数组拷贝一份。</p>
<h2 id="使用数组初始化vector对象"><a href="#使用数组初始化vector对象" class="headerlink" title="使用数组初始化vector对象"></a>使用数组初始化vector对象</h2><p>不允许使用一个数组为另一个内置类型的数组赋初值，也不允许使用vector对象初始化数组。相反的，允许使用数组来初始化vector对象</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> int_arr[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec(begin(int_arr),end(int_arr));</div><div class="line"></div><div class="line"><span class="comment">//拷贝三个元素：int_arr[1],int_arr[2],int_arr[3]</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; subVec(int_arr+<span class="number">1</span>,int_arr4);</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 现代的C++程序应当尽量使用vector和迭代器，避免使用内置数组和指针；应该尽量使用string，避免使用C风格的基于数组的字符串。</p>
<h2 id="多维数组（待补充）"><a href="#多维数组（待补充）" class="headerlink" title="多维数组（待补充）"></a>多维数组（待补充）</h2><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><p>string表示可变长的字符序列，使用string类型必须首先包含string头文件。</p>
<h2 id="初始化string对象的方式"><a href="#初始化string对象的方式" class="headerlink" title="初始化string对象的方式"></a>初始化string对象的方式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> s1             默认初始化，s1是一个空串</div><div class="line">string s2(s1)         s2是s1的副本</div><div class="line"><span class="built_in">string</span> s2 = s1        等价于s2(s1)，s2是s1的副本</div><div class="line"><span class="built_in">string</span> s3(<span class="string">"value"</span>)    s3是字面值<span class="string">"value"</span>的副本，除了字面值最后的那个空字符外</div><div class="line"><span class="built_in">string</span> s3 = <span class="string">"value"</span>   等价于s3(<span class="string">"value"</span>)，s3是字面值<span class="string">"value"</span>的副本</div><div class="line"><span class="built_in">string</span> s4(n, <span class="string">'c'</span>)     把s4初始化为由连续n个字符c组成的串</div></pre></td></tr></table></figure>
<h2 id="string对象上的操作"><a href="#string对象上的操作" class="headerlink" title="string对象上的操作"></a>string对象上的操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">os&lt;&lt;s 	将s写到输出流os当中，返回os</div><div class="line">is&gt;&gt;s 	从is中读取字符串赋给s，字符串以空白分隔，返回is</div><div class="line">getline(is, s) 	从is中读取一行赋给s，返回is</div><div class="line">s.empty() 	s为空赋返回<span class="literal">true</span>，否则返回<span class="literal">false</span></div><div class="line">s.size() 	返回s中的字符的个数</div><div class="line">s[n] 	返回s中第n个字符的引用，位置n从<span class="number">0</span>计起</div><div class="line">s1+s2 	返回s1和s2连接后的结果</div><div class="line">s1=s2 	用s2的副本代替s1中原来的字符</div><div class="line">s1==s2 	如果s1和s2中所含的字符完全一样，则它们相等，返回<span class="literal">true</span></div><div class="line">s1!=s2 	如果s1和s2中所含的字符不一样，返回<span class="literal">true</span></div><div class="line">&lt;, &lt;=, &gt;, &gt;= 	利用字符在字典中的顺序进行比较，且对字母的大小写敏感</div></pre></td></tr></table></figure>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> str;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)&#123;   </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">string</span> line;</div><div class="line">    <span class="keyword">while</span>(getline(<span class="built_in">cin</span>,line))&#123;   </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;line&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="处理string对象中的字符"><a href="#处理string对象中的字符" class="headerlink" title="处理string对象中的字符"></a>处理string对象中的字符</h2><p>对字符处理的一些方法，在<strong>cctype</strong>头文件中定义了一组标准库函数处理这部分工作<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">isalnmu(c) 	当c是字母或数字为真</div><div class="line"><span class="built_in">isalpha</span>(c) 	当c是字母为真</div><div class="line"><span class="built_in">iscntrl</span>(c) 	当c是控字符时为真</div><div class="line"><span class="built_in">isdigit</span>(c) 	当c是数字为真</div><div class="line"><span class="built_in">isgraph</span>(c) 	当c不是空格但可打印为真</div><div class="line"><span class="built_in">islower</span>(c) 	当c是小写字母为真</div><div class="line"><span class="built_in">isprint</span>(c) 	当c是可打印字符为真(即c是空格或c具有可视形式)</div><div class="line"><span class="built_in">ispunct</span>(c) 	当c是标点符号为真(即c不是控字符、数字、字母、可打印空白中的一种)</div><div class="line"><span class="built_in">isspace</span>(c) 	当c是空白为真(即c是空格、横向制表符、纵向制表符、回车符、换行符、进制符中一种)</div><div class="line">issupper(c) 	当c是大写字母为真</div><div class="line"><span class="built_in">isxdigit</span>(c) 	当c是十六进制数字为真</div><div class="line"><span class="built_in">tolower</span>(c) 	若c是大写字母，输出对应小写字母；否则原样输出c</div><div class="line"><span class="built_in">toupper</span>(c) 	若c是小写字母，输出对应大写字母；否则原样输出c</div></pre></td></tr></table></figure></p>
<h2 id="处理string每个字符，使用基于范围的for语句"><a href="#处理string每个字符，使用基于范围的for语句" class="headerlink" title="处理string每个字符，使用基于范围的for语句"></a>处理string每个字符，使用基于范围的for语句</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用范围for语句和ispunct函数统计string对象中标点符号的个数（使用范围for语句遍历给定序列的每个元素）</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">"Hello World!!!"</span>)</span></span>;</div><div class="line"><span class="keyword">decltype</span>(s.size()) punct_cnt = <span class="number">0</span>;            <span class="comment">//punct_cnt的类型同s.size()，即为string :: size_type</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> c : s)            <span class="comment">// 对于s中的每个字符</span></div><div class="line">      <span class="keyword">if</span> (<span class="built_in">ispunct</span>(c))       <span class="comment">// 如果该字符是标点符号</span></div><div class="line">           ++ispunct_cnt;  <span class="comment">// 计数</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; punct_cnt &lt;&lt; <span class="string">" punctuation characters in "</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 用范围for语句将字符串改写为大写字母的形式（使用范围for语句改变字符串中的字符）</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span> <span class="params">(<span class="string">"Hello World!!!"</span>)</span></span></div><div class="line"><span class="function"><span class="comment">// 转换成大写形式</span></span></div><div class="line"><span class="function"><span class="title">for</span> <span class="params">(<span class="keyword">auto</span> &amp;c : s)</span>          <span class="comment">// 对于s中的每个字符(c是引用)</span></span></div><div class="line"><span class="function">      c </span>= <span class="built_in">toupper</span>(c);     <span class="comment">// c是一个引用，赋值语句改变了c绑定的字符的值，标准库函数toupper将小写的参数c改为大写</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="只处理string一部分字符"><a href="#只处理string一部分字符" class="headerlink" title="只处理string一部分字符"></a>只处理string一部分字符</h2><p>要想访问string对象总的单个字符有两种方式：一种是使用下标，另外一种是使用迭代器。</p>
<p><strong>注意：检查下标的合法性</strong></p>
<p>一种简便易行的方法是：总是设下标的类型为<strong>string::size_type</strong>，因为此类型是无符号数，可以确保下标不会小于0，此时，代码只需要保证下标小于size()的值就可以了。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="built_in">string</span> s = <span class="string">"keep out"</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c :s)&#123;    <span class="comment">//C的类型是常量引用，不能通过C修改其绑定的对象</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;介绍使用数组的基本方法，同时介绍C++中string的初始化和一些常用函数。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.wangxinri.cn/categories/C/"/>
    
    
      <category term="数组" scheme="http://www.wangxinri.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="指针" scheme="http://www.wangxinri.cn/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>引用&amp;指针&amp;const</title>
    <link href="http://www.wangxinri.cn/2017/09/01/%E5%BC%95%E7%94%A8&amp;%E6%8C%87%E9%92%88&amp;const/"/>
    <id>http://www.wangxinri.cn/2017/09/01/引用&amp;指针&amp;const/</id>
    <published>2017-09-01T11:59:25.000Z</published>
    <updated>2018-01-16T06:30:25.588Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文详细讲解了引用与指针的用法及具体区别，同时探讨了const限定符的基本用法。<br><a id="more"></a></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>一条声明语句由一个<strong>基本数据类型</strong>和紧随其后的一个<strong>声明符</strong>列表组成。每个声明符命名了一个变量并指定该变量为与基本数据类型有关的某种类型。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a;</div><div class="line">基本数据类型   声明符（其实就是变量名）</div><div class="line"><span class="comment">//更复杂的声明符 ----接下来的指针和引用</span></div><div class="line"><span class="keyword">int</span> *b;   <span class="comment">//指针可以不初始化，没语法错误</span></div><div class="line"><span class="keyword">int</span> &amp;b = a;     <span class="comment">//引用必须初始化</span></div></pre></td></tr></table></figure>
<p><strong>引用</strong>（reference）为对象起了另外一个名字，引用类型引用另外一种类型，通过将声明符号写成&amp;d的形式来定义引用类型，其中d是声明的变量名。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;</div><div class="line"><span class="keyword">int</span> &amp;refVal = ival; <span class="comment">//refVal指向ival(是ival的另一个名字)</span></div><div class="line"><span class="keyword">int</span> &amp;refVal2;   <span class="comment">//报错，引用必须初始化</span></div></pre></td></tr></table></figure>
<p>一般初始化变量时，初始值会被拷贝到新建的对象中。然而定义引用时，程序把引用和它的初始值<strong>绑定</strong>在一起，而不是将初始值拷贝给引用。一旦初始化完成。引用将和它的初始值对象一直绑定在一起。<strong>因为无法令引用重新绑定到另外一个对象，因此引用必须初始化。</strong></p>
<h2 id="引用注意细节"><a href="#引用注意细节" class="headerlink" title="引用注意细节"></a>引用注意细节</h2><ul>
<li>无法令引用重新绑定到另外一个对象，因此引用必须初始化。</li>
<li>引用并非对象，相反的，它只是为一个已经存在的对象所起的另外一个名字，即引用即别名。</li>
<li>引用本身不是对象，所以不能定义引用的引用。</li>
<li>引用的类型要和绑定的对象严格匹配。而且，引用只能绑定在对象上，而不能与字面值或某个表达式的计算结果绑定在一起。（<strong>两种例外，一种是对常量的引用 const int &amp;</strong>）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> &amp;refVal4 = <span class="number">10</span>;  <span class="comment">//错误，引用类型的初始值必须是一个对象</span></div><div class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</div><div class="line"><span class="keyword">int</span> &amp;refVal5 = dval;  <span class="comment">//错误：此处引用类型初始值必须是int型对象</span></div></pre></td></tr></table></figure>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> c = <span class="number">4</span>;</div><div class="line">    <span class="keyword">int</span> &amp;b = a;  <span class="comment">//b是a的引用，即b是a的别名</span></div><div class="line">    <span class="comment">//&amp;b = c;  错误,无法令引用重新绑定到另外一个对象上</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;b&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    a = <span class="number">5</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;b&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    b = <span class="number">6</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;b&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    a = c;    <span class="comment">//将a的值改变，b的值也相应改变，但&amp;a和&amp;b还是一样的</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">" "</span>&lt;&lt;c&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;b&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;c&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    b = c;   <span class="comment">//同上</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="string">" "</span>&lt;&lt;c&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;a&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;b&lt;&lt;<span class="string">" "</span>&lt;&lt;&amp;c&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>2  2  0x28fef8  0x28fef8
5  5  0x28fef8  0x28fef8
6  6  0x28fef8  0x28fef8
4  4  0x28fef8  0x28fef8 0x28fef4
4  4  0x28fef8  0x28fef8 0x28fef4
</code></pre><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p><strong>指针</strong>是“指向”另外一种类型的复合类型。与引用类似，指针也实现了对其他对象的间接访问。然而指针与引用相比又有很多不同点。</p>
<p><strong>指针和引用的不同点</strong>：</p>
<ul>
<li>指针本身就是一个对象，允许对指针赋值和拷贝，而且在指针的生命周期内它可以先后指向几个不同的对象。</li>
<li>指针无须在定义时赋初值。和其他内置类型一样，在块作用域内定义的指针如果没有被初始化，也将拥有一个不确定的值。</li>
</ul>
<h2 id="获取对象的地址"><a href="#获取对象的地址" class="headerlink" title="获取对象的地址"></a>获取对象的地址</h2><p>指针存放某个对象的地址，要想获取该地址，需要使用取地址符（&amp;）.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">42</span>;</div><div class="line"><span class="keyword">int</span> *p = &amp;ival;  <span class="comment">//指针变量p存放变量ival的地址,也即p是指向变量ival的指针</span></div></pre></td></tr></table></figure>
<h2 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h2><ul>
<li>引用不是对象，没有实际地址，所有不能定义指向引用的指针。</li>
<li>指针的类型要和它指向的对象严格匹配(<strong>两种例外，一种是指向常量的指针</strong>)，因为在声明语句中指针的类型实际上被用于指定它所指向对象的类型，所以二者必须匹配。如果指针指向了一个其他类型的对象，对该对象的操作将发生错误。</li>
</ul>
<h2 id="指针值"><a href="#指针值" class="headerlink" title="指针值"></a>指针值</h2><p>指针的值（即地址）应属下列4种状态之一：</p>
<ol>
<li>指向一个对象</li>
<li>指向紧邻对象所占空间的下一个位置   </li>
<li>空指针，意味着指针没有指向任何对象</li>
<li>无效指针，也就是上述情况之外的其他值（比如指针未初始化，指针的值也就指向的地址为指针变量内存空间的当前内容，是一个随机值）</li>
</ol>
<p><strong>注意</strong>：指针没有指向任何具体对象，所以试图访问此类指针对象的行为不被允许，虽然编译可能通过，但如果这样做了，后果无法预计。</p>
<h2 id="利用指针访问对象"><a href="#利用指针访问对象" class="headerlink" title="利用指针访问对象"></a>利用指针访问对象</h2><p>使用<strong>解引用符</strong>（操作符*）来访问该对象。解引用操作仅适用于那些确实指向了某个对象的有效指针。</p>
<h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>空指针不指向任何对象，在试图使用一个指针之前代码可以首先检查它是否为空。以下列出几个生成空指针的方法：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p1 = <span class="literal">nullptr</span>;    <span class="comment">//等价于int *p1 = 0;</span></div><div class="line"><span class="keyword">int</span> *p2 = <span class="number">0</span>;   <span class="comment">//直接将p2初始化为字面常量0</span></div><div class="line"><span class="keyword">int</span> *p3 = <span class="literal">NULL</span>;    <span class="comment">//等价于int *p1 = 0;</span></div></pre></td></tr></table></figure>
<p>C++程序最好使用nullptr,同时尽量避免使用NULL。</p>
<ul>
<li>把int变量直接赋给指针是错误的操作，即使int变量的值恰好等于0也不行。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> zero = <span class="number">0</span> ,*p;</div><div class="line">pi = zero;       <span class="comment">// 错误：不能把int变量直接赋给指针</span></div></pre></td></tr></table></figure>
<p><strong>note</strong>:<strong>建立初始化所有指针</strong></p>
<p><strong>原因</strong>：在大多数编译器环境下，如果使用了未经初始化的指针，则该指针所占内存空间的当前内容将被看作一个地址值（即该地址值是一个随机数）。访问该指针，相当于去访问一个本不存在的位置上的本不存在的对象。糟糕的是，如果指针所占内存空间中恰好有内容，而这些内容又被当作了某个地址，我们就很难分清它到底是合法的还是非法的了。</p>
<p>因此建议初始化所有的指针，并且在可能的情况下，尽量等定义了对象之后再定义指向它的指针。如果实在不清楚指针应该指向何处，就把它初始化为nullptr或者0，这样程序就能检测并知道它没有指向任何具体的对象了。</p>
<h2 id="void-指针"><a href="#void-指针" class="headerlink" title="void* 指针"></a>void* 指针</h2><p><strong>void*</strong> <strong>是一种特殊的指针类型，可用于存放任意对象的地址</strong>。一个void*指针存放着一个地址，这一点和其他指针类似。不同的是，我们对该地址中到底是个什么类型的对象并不了解：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> obj = <span class="number">3.14</span>, *pd = &amp;obj;  <span class="comment">// 正确：void*能存放任意类型对象的地址</span></div><div class="line"><span class="keyword">void</span> *pv = &amp;obj;      <span class="comment">// obj可以是任意类型的对象</span></div><div class="line">pv = pd;             <span class="comment">// pv可以存放任意类型的指针</span></div></pre></td></tr></table></figure>
<p>利用void<em>指针能做的事儿比较有限：拿它和别的指针比较、作为函数的输入或输出，或者赋给另外一个void</em>指针。不能直接操作void*指针所指的对象，因为我们并不知道这个对象到底是什么类型，也就无法确定能在这个对象上做哪些操作。</p>
<p>概括说来，<strong>以void*的视角来看内存空间也就仅仅是内存空间，没办法访问内存空间中所存的对象</strong></p>
<h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">double</span> obj = <span class="number">3.14</span>,*pd = &amp;obj;</div><div class="line">    <span class="keyword">void</span> *pv = &amp;obj;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;&amp;obj&lt;&lt;<span class="string">" "</span>&lt;&lt;obj&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;&amp;pd&lt;&lt;<span class="string">" "</span>&lt;&lt;pd&lt;&lt;<span class="string">" "</span>&lt;&lt;*pd&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;&amp;pv&lt;&lt;<span class="string">" "</span>&lt;&lt;pv&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//不能直接操作void* 指针所指的对象，即*pv是不合法的</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>0x28ff08   3.14
0x28ff04   0x28ff08   3.14
0x28ff00   0x28ff08 
</code></pre><h2 id="理解复合类型的声明"><a href="#理解复合类型的声明" class="headerlink" title="理解复合类型的声明"></a>理解复合类型的声明</h2><p>修饰符（<em>或&amp;）和变量标识符写在一起，修饰符(</em>或者&amp;)都是修饰变量的。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p1,*p2;   <span class="comment">//p1和p2都是指向int的指针</span></div></pre></td></tr></table></figure>
<h2 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h2><p>指针是内存中的对象，像其他对象一样也有自己的地址，因此允许把指针的地址再存放到另一个指针当中。</p>
<p>通过<em>的个数可以区分指针的级别。也就是说，<strong>表示指向指针的指针，</strong></em>表示指向指针的指针的指，依次类推：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;</div><div class="line"><span class="keyword">int</span> *pi = &amp;ival;   <span class="comment">//pi指向一个int型的数</span></div><div class="line"><span class="keyword">int</span> **ppi = &amp;pi;   <span class="comment">//ppi指向一个int型的指针</span></div><div class="line"><span class="comment">//解引用</span></div><div class="line"><span class="built_in">cout</span>&lt;&lt;ival&lt;&lt;<span class="string">" "</span>&lt;&lt;*pi&lt;&lt;<span class="string">" "</span>&lt;&lt;**ppi&lt;&lt;<span class="built_in">endl</span>;</div></pre></td></tr></table></figure>
<h2 id="指向指针的引用"><a href="#指向指针的引用" class="headerlink" title="指向指针的引用"></a>指向指针的引用</h2><p>引用本身不是对象，因此<strong>不能定义指向引用的指针</strong>。但指针是对象，所以<strong>存在对指针的引用</strong>。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">int</span> *p;   <span class="comment">//p是一个int型指针</span></div><div class="line"><span class="keyword">int</span> *&amp;r = p;   <span class="comment">//r是一个对指针p的引用,  此时r和p指针同名</span></div><div class="line">r = &amp;i;   <span class="comment">//r引用了一个指针，因此给r赋值&amp;i就是令指向i</span></div><div class="line">*r = <span class="number">0</span>;   <span class="comment">//解引用r得到i，也就是p指向的对象，将i的值改为0</span></div></pre></td></tr></table></figure>
<p>要理解r的类型到底是什么，最简单的方法就是<strong>从右向左阅读r的定义</strong>。<strong>离变量名最近的符号（此例中是&amp;r的符号&amp;）对变量的类型有最直接的影响</strong>，因此r是一个引用。<strong>声明符的其余部分用以确定r引用的类型是什么</strong>，此例中的符号*说明r引用的是一个指针。最后，声明的基本数据类型部分指出r引用的是一个int型指针。</p>
<h1 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h1><h2 id="const定义"><a href="#const定义" class="headerlink" title="const定义"></a>const定义</h2><p>有时我们希望定义这样一种变量，它的值不能被改变。为了满足这一要求，可以用关键字<strong>const</strong>对变量的类型加以限制：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>;     <span class="comment">//输入缓冲区大小</span></div></pre></td></tr></table></figure>
<p>这样就把bufSize定义成了一个常量。任何试图为bufSize赋值的行为都将引发错误。</p>
<p><strong>因为const对象一旦创建后其值就不能再改变，所以const对象必须初始化。</strong></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> i = get_size();    <span class="comment">//正确：运行时初始化</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> j = <span class="number">42</span>;            <span class="comment">//正确：编译时初始化</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> k;                 <span class="comment">//错误：k是一个未经初始化的常量</span></div></pre></td></tr></table></figure>
<p><strong>const类型能参与的操作</strong>：只能在const类型的对象上执行不改变其内容的操作。再不改变const对象的操作中还有一种是初始化。</p>
<h2 id="默认状态下，const对象仅在文件内有效"><a href="#默认状态下，const对象仅在文件内有效" class="headerlink" title="默认状态下，const对象仅在文件内有效"></a>默认状态下，const对象仅在文件内有效</h2><p>当以编译时初始化的方式定义一个const对象时，就如对bufSize的定义一样：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>;     <span class="comment">//输入缓冲区大小</span></div></pre></td></tr></table></figure>
<p>编译器将在编译过程中把用到该变量的地方都替换成对应的值也就是说，编译器会找到代码中所有用到bufSize的地方，然后用512替换。</p>
<p><strong>默认情况下，const对象被设定为仅在文件内有效。当多个文件中出现同名的const变量时，不同文件中分别定义了独立的变量。</strong></p>
<p>某些时候有这样一种const变量，它的初始值不是一个常量表达式，但又确实有必要在文件间共享。这种情况下，我们不希望编译器为每个文件分别生成独立的变量。相反，我们想让这类const对象像其他（非常量）对象一样工作，也就是说，<strong>只在一个文件中定义const，而在多个文件中声明并使用它。</strong></p>
<p><strong>解决办法：</strong>  对于const变量不管是声明还是定义都添加extern关键字，这样只需要定义一次就可以了：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//file1.cpp定义并初始化和一个常量，该常量能被其他文件访问</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufferSize = function();</div><div class="line"><span class="comment">//file1.h头文件</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufferSize; <span class="comment">//与file1.cpp中定义的是同一个</span></div></pre></td></tr></table></figure>
<p><strong>note</strong>：如果想在多个文件之间共享const对象，必须在变量的定义之前添加extern关键字。</p>
<h2 id="const引用"><a href="#const引用" class="headerlink" title="const引用"></a>const引用</h2><p>可以把引用绑定到const对象上，就像绑定其他对象上一样，我们称之为<strong>对常量的引用</strong>（reference to const）。与普通引用不同的是，对常量的引用不能被用作修改它所绑定的对象。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">1024</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = ci;    <span class="comment">//正确：引用及其对应的对象都是常量</span></div><div class="line">r1 = <span class="number">42</span>;               <span class="comment">//错误：r1时对常量的引用</span></div><div class="line"><span class="keyword">int</span> &amp;r2 = ci;          <span class="comment">//错误：试图让一个非常量引用指向一个常量对象</span></div></pre></td></tr></table></figure>
<p>因为不允许直接为ci赋值，当然也就是不能通过引用去改变ci。因此，对r2的初始化也是错误的。假设该初始化合法，则可以通过r2来改变它引用对象的值，这显然是不正确。</p>
<h2 id="初始化和对const的引用"><a href="#初始化和对const的引用" class="headerlink" title="初始化和对const的引用"></a>初始化和对const的引用</h2><p>引用的类型必须与其所引用对象的类型一致，但是有两个例外。<strong>第一种例外就是在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能抓换成引用的类型即可。</strong> 尤其，<strong>允许为一个常量引用绑定非常量的对象、字面值，甚至是个一般表达式</strong>：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;    </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = i;       <span class="comment">//允许将const int &amp;绑定到一个普通int对象上</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = <span class="number">42</span>;      <span class="comment">//正确：r1是一个常量引用</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r3 = r1*<span class="number">2</span>;    <span class="comment">//正确：r3是一个常量引用</span></div><div class="line"><span class="keyword">int</span> &amp;r4 = r1*<span class="number">2</span>;          <span class="comment">//错误：r4是一个普通的非常量y</span></div></pre></td></tr></table></figure>
<p>如果int &amp;r4 = r1*2合法，那么就可以通过r4改变r1的值，而r1是常量引用。</p>
<p>常量引用被绑定到另外一种类型上时到底发生了什么：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = dval;</div><div class="line"><span class="comment">//为了确保ri绑定一个整数，编译器把上述代码变成了如下形式：</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> temp = dval;  <span class="comment">//由双精度浮点数生成一个临时的整形常量</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = temp;   <span class="comment">//让ri绑定这个临时量</span></div></pre></td></tr></table></figure>
<p><strong>总结</strong>：常量引用（const &amp;）可以绑定到const常量上，也可以绑定到int变量上，但是让一个非常量引用指向一个常量对象是不对的。</p>
<h2 id="对const的引用可能引用一个并非const的对象"><a href="#对const的引用可能引用一个并非const的对象" class="headerlink" title="对const的引用可能引用一个并非const的对象"></a>对const的引用可能引用一个并非const的对象</h2><p>必须认识到，常量引用仅对引用可参与的操作做出了限定，对于引用的对象本身是不是一个常量未做限定。因为对象也可能是个非常量，所以允许通过其他途径改变它的值：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</div><div class="line"><span class="keyword">int</span> &amp;r1 = i;                 <span class="comment">// 引用r1绑定对象i</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = i； <span class="comment">// r2也绑定对象i，但是不允许通过r2修改i的值</span></div><div class="line">r1 = <span class="number">0</span>;    <span class="comment">// r1并非常量引用，i的值修改为0</span></div><div class="line">r2 = <span class="number">0</span>;    <span class="comment">// 错误：r2是一个常量引用</span></div></pre></td></tr></table></figure>
<p>r2绑定（非常量）整数i是合法的行为。然而，不允许通过r2修改i的值。尽管如此，i的值仍然允许通过其他途径修改，既可以直接给i赋值，也可以通过像r1一样绑定到i的其他引用来修改。</p>
<h2 id="指针和const-指向常量的指针-const-double-cptr"><a href="#指针和const-指向常量的指针-const-double-cptr" class="headerlink" title="指针和const(指向常量的指针 const double *cptr)"></a>指针和const(指向常量的指针 const double *cptr)</h2><p><strong>指向常量的指针（pointer to const）不能用于改变其所指对象的值</strong>。要想存放常量对象的地址，只能使用指向常量的指针。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;   <span class="comment">//pi是一个常量，它的值不能改变</span></div><div class="line"><span class="keyword">double</span> *ptr = &amp;pi;        <span class="comment">//错误，ptr是一个普通指针</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> *cptr = &amp;pi; <span class="comment">//正确：cptr可以指向一个双精度常量</span></div><div class="line">*cptr = <span class="number">42</span>;               <span class="comment">//错误：不能给*cptr赋值</span></div><div class="line"><span class="keyword">double</span> dval = <span class="number">3.2</span>;</div><div class="line">cptr = &amp;dval;            <span class="comment">//对的</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong>之前提到，指针的类型必须与其所指对象的类型一致，但是有两个例外。第一个就是允许令一个指向常量的指针指向一个非常量对象：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> *ptr = &amp;dval;</div></pre></td></tr></table></figure>
<p>和常量引用一样，指向常量的指针也没有规定其所指的对象必须是一个常量。<strong>所谓指向常量的指针仅仅要求不能通过该指针改变对象的值，而没有规定那个对象的值不能通过其他途径改变</strong>。</p>
<h2 id="const指针（常量指针-int-const-curErr）"><a href="#const指针（常量指针-int-const-curErr）" class="headerlink" title="const指针（常量指针 int *const curErr）"></a>const指针（常量指针 int *const curErr）</h2><p>指针是对象而引用不是，因此就像其他对象类型一样，允许把指针本身定为常量。<strong>常量指针必须初始化，而且一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能改变了</strong>。把*放在const关键字之前用以说明指针是一个常量，这样的书写形式隐含着一层意味， 即不变的是指针本身的值而非指向的那个值：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> errNumb = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> *<span class="keyword">const</span> curErr = &amp;errNumb;  <span class="comment">//curErr将一直指向errNumb</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14159</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> *<span class="keyword">const</span> pip = &amp;pi;  <span class="comment">//pip是一个指向常量对象的常量指针</span></div></pre></td></tr></table></figure>
<p><strong>从右向左阅读</strong></p>
<p>此例中，离curErr最近的符号是const,意味着curErr本身是一个常量对象，对象的类型由声明符的其余部分确定。声明符中的下一个符号是*，意思是curErr是一个常量指针。最后，该声明语句的基本数据类型部分确定了常量指针指向的是一个int对象。与之相似，我们也能推断出，pip是一个常量指针，它所指向的对象是一个双精度浮点型常量。</p>
<p>指针本身是一个常量并不意味着不能通过指针修改其所值对象的值，能否这样做完全依赖于所指对象的类型。例如，pip是一个指向常量的常量指针，则不论是pip所指的对象值还是pip自己存储的那个地址都不能改变。相反的，curErr指向的是一个一般的非常量整数，那么就完全可以用curErr去修改errNumb的值：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*pip = <span class="number">2.72</span>; <span class="comment">// 错误：pip是一个指向常量的指针</span></div><div class="line"><span class="comment">//如果curErr所指的对象（也就是errNumb）的值不为0</span></div><div class="line"><span class="keyword">if</span>(*curErr)</div><div class="line">&#123;</div><div class="line">    errorHandler();</div><div class="line">    *curErr = <span class="number">0</span>;  <span class="comment">//正确，把curErr所值得对象的值重置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>指向常量的指针（const doubel <em>cptr）不能用于改变其所指向对象的值，但是可以改变指针本身的值，而常量指针（int </em>const curErr）必须初始化，而且一旦初始化完成，则它的值（也就是存放在指针中的那个地址）就不能在改变了，但是可以修改其所指向对象的值。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> *<span class="keyword">const</span> pip = &amp;pi;</div></pre></td></tr></table></figure>
<p>则此时pip是一个指向常量的常量指针，则不论是pip所指的对象值还是pip自己存储的那个地址都不能被改变。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文详细讲解了引用与指针的用法及具体区别，同时探讨了const限定符的基本用法。&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.wangxinri.cn/categories/C/"/>
    
    
      <category term="C++ Primers" scheme="http://www.wangxinri.cn/tags/C-Primers/"/>
    
      <category term="C++基础知识" scheme="http://www.wangxinri.cn/tags/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>个人总结之排序算法</title>
    <link href="http://www.wangxinri.cn/2017/08/21/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%E4%B9%8B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://www.wangxinri.cn/2017/08/21/个人总结之排序算法/</id>
    <published>2017-08-21T11:30:25.000Z</published>
    <updated>2017-12-07T07:59:00.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>回顾之前学习的各种排序算法，从初级到高级，包括选择排序，冒泡排序，插入排序，希尔排序，快速排序，归并排序，堆排序等等，持续更新中…<br><a id="more"></a></p>
<p><strong>注：</strong>这里实现的算法都是递增排序，也就是从小到大排序。</p>
<h2 id="初级排序算法"><a href="#初级排序算法" class="headerlink" title="初级排序算法"></a>初级排序算法</h2><h3 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1.选择排序"></a>1.选择排序</h3><p><strong>思想：</strong>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] sort(<span class="keyword">int</span> a[],<span class="keyword">int</span> length)&#123;    <span class="comment">//选择排序</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">        <span class="keyword">int</span> minIndex = i; <span class="comment">//初始化最小元素的索引</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;length;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(a[minIndex]&gt;a[j])&#123;</div><div class="line">                minIndex = j;  <span class="comment">//找到最小元素的索引</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tem = a[i];</div><div class="line">        a[i] = a[minIndex];</div><div class="line">        a[minIndex] = tem;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-直接插入排序"><a href="#2-直接插入排序" class="headerlink" title="2.直接插入排序"></a>2.直接插入排序</h3><p><strong>思想：</strong> 每一步将一个待排序的记录，插入到前面应排好序的有序序列中去，直到查完所有元素为止。<br><img src="http://ou6yob3zd.bkt.clouddn.com/20170821195323.png" alt=""></p>
<p><strong>代码：</strong></p>
<p>第一种：从后往前依次比较前面排好序的有序序列，如果插入元素较小时，交换，j- -,继续比较。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] sort(<span class="keyword">int</span> a[],<span class="keyword">int</span> length)&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>&amp;&amp;a[j]&lt;a[j-<span class="number">1</span>];j--)&#123;  </div><div class="line">			<span class="keyword">int</span> tem = a[j-<span class="number">1</span>];</div><div class="line">			a[j-<span class="number">1</span>] = a[j];</div><div class="line">			a[j] = tem;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二种：不需要交换的直接插入排序，将内循环中较大的元素都向右移动而不总是交换两个元素，从而提高效率。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] sort(<span class="keyword">int</span> a[],<span class="keyword">int</span> length)&#123;    <span class="comment">//不需要交换的插入排序</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</div><div class="line">		<span class="keyword">int</span> tem = a[i];  <span class="comment">//待插入的元素</span></div><div class="line">		<span class="keyword">int</span> j;</div><div class="line">		<span class="keyword">for</span>(j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>&amp;&amp;tem&lt;a[j];j--)&#123;</div><div class="line">			a[j+<span class="number">1</span>] = a[j];   <span class="comment">//元素后移,直到找到待插入的元素的位置</span></div><div class="line">		&#125;</div><div class="line">		a[j+<span class="number">1</span>] = tem;  <span class="comment">//将带插入元素插入到查找到的位置</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第三种：此外还可以通过增加哨兵的形式，在插入排序的实现中先找出最小的元素并将其置于数组的最左边，这样就能去掉内循环的判断条件j&gt;0。这是一种常见的规避边界测试的方法，能够省略判断条件的元素通常被称为哨兵。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] sort(<span class="keyword">int</span> a[],<span class="keyword">int</span> length)&#123;</div><div class="line">	<span class="keyword">int</span> minIndex =<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(a[minIndex]&gt;a[i])&#123;</div><div class="line">			minIndex = i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> tem = a[<span class="number">0</span>];</div><div class="line">	a[<span class="number">0</span>] = a[minIndex];</div><div class="line">	a[minIndex] = tem;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;length;i++)&#123;</div><div class="line">		tem = a[i];</div><div class="line">		<span class="keyword">int</span> j;</div><div class="line">		<span class="keyword">for</span>(j=i-<span class="number">1</span>;tem&lt;a[j];j--)&#123;</div><div class="line">			a[j+<span class="number">1</span>] = a[j];</div><div class="line">		&#125;</div><div class="line">		a[j+<span class="number">1</span>] = tem;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-希尔排序"><a href="#3-希尔排序" class="headerlink" title="3.希尔排序"></a>3.希尔排序</h3><p><strong>思想：</strong>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>
<p>简单插入排序很循规蹈矩，不管数组分布是怎么样的，依然一步一步的对元素进行比较，移动，插入，比如[5,4,3,2,1,0]这种倒序序列，数组末端的0要回到首位置很是费劲，比较和移动元素均需n-1次。而希尔排序在数组中采用跳跃式分组的策略，通过某个增量将数组元素划分为若干组，然后分组进行插入排序，随后逐步缩小增量，继续按组进行插入排序操作，直至增量为1。希尔排序通过这种策略使得整个数组在初始阶段达到从宏观上看基本有序，小的基本在前，大的基本在后。然后缩小增量，到增量为1时，其实多数情况下只需微调即可，不会涉及过多的数据移动。</p>
<p>我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2…1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>
<p><img src="http://ou6yob3zd.bkt.clouddn.com/20170821203528.png" alt=""></p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span> a[],<span class="keyword">int</span> length)&#123;</div><div class="line">	<span class="keyword">int</span> h = length/<span class="number">2</span>; <span class="comment">//初始增量</span></div><div class="line">	<span class="keyword">while</span>(h&gt;=<span class="number">1</span>)&#123;</div><div class="line">		<span class="comment">//将数组变为h有序</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=h;i&lt;length;i++) &#123;</div><div class="line">			<span class="comment">//将a[i]插入到a[i-h],a[i-2*h],a[i-3*h]...之中</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;=h&amp;&amp;a[j]&lt;a[j-h];j-=h)&#123;</div><div class="line">				<span class="keyword">int</span> tem = a[j-h];</div><div class="line">				a[j-h] = a[j];</div><div class="line">				a[j] = tem;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		h = h/<span class="number">2</span>; <span class="comment">//每次排完序后,增量减少</span></div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考：<a href="http://www.cnblogs.com/chengxiao/p/6104371.html" target="_blank" rel="external">dreamcatcher-cx</a></p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>归并排序，即将两个有序的数组归并成一个更大的有序数组，要将一个数组排序，可以（递归的）先将它分成两半分别排序，然后将结果归并起来。归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需的时间和NlogN成正比；它的主要缺点则是它所需的额外空间和N成正比。</p>
<h3 id="2-路归并排序"><a href="#2-路归并排序" class="headerlink" title="2-路归并排序"></a>2-路归并排序</h3><p><strong>2-路归并排序:</strong>假设初始序列含有n个记录，则可看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到n/2（整数值）个长度为2或1的有序子序列；在两两归并，……，如此重复，直至得到一个长度为n的有序序列为止，这种排序方法称为2-路归并排序。 如下为一个典型的例子。 </p>
<p><strong>该图显示的就是循环2-路归并排序算法的过程：</strong><br><img src="http://ou6yob3zd.bkt.clouddn.com/20170827211130.png" alt=""></p>
<p>2-路归并排序中的核心操作是将一维数组中前后相邻的两个有序序列归并为一个有序序列。</p>
<p><strong>递归算法：自顶向下的2-路归并排序中归并结果的轨迹：</strong></p>
<p><img src="http://ou6yob3zd.bkt.clouddn.com/20170827220032.png" alt=""></p>
<p><img src="http://ou6yob3zd.bkt.clouddn.com/20170827212542.png" alt=""></p>
<p><strong>循环算法：自底向上的2-路归并排序中归并结果的轨迹：</strong><br><img src="http://ou6yob3zd.bkt.clouddn.com/20170827215932.png" alt=""></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mergesort</span> </span>&#123;  <span class="comment">//2-路归并排序</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] aux;  <span class="comment">//辅助数组</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> lo,<span class="keyword">int</span> mid,<span class="keyword">int</span> hi)</span></span>&#123;   <span class="comment">//核心算法</span></div><div class="line">		<span class="comment">//将a[lo..mid]和a[mid+1,hi](已有序)归并 </span></div><div class="line">		<span class="keyword">int</span> i = lo, j = mid+<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k = lo;k&lt;=hi;k++)&#123; <span class="comment">//将a[lo..hi]复制到aux[lo..hi]</span></div><div class="line">			aux[k] = a[k];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k=lo;k&lt;=hi;k++)&#123;</div><div class="line">			<span class="keyword">if</span>(i&gt;mid) a[k] = aux[j++];  <span class="comment">//左半边用尽，取右半边的元素复制到a中</span></div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;hi) a[k] = aux[i++];   <span class="comment">//右半边用尽，取左半边的元素复制到a中</span></div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(aux[i]&lt;aux[j]) a[k] = aux[i++];  <span class="comment">//左半边元素小于右半边元素，取左半边元素复制到a中</span></div><div class="line">			<span class="keyword">else</span> a[k] = aux[j++]; <span class="comment">//右半边元素小于左半边元素，取右半边元素复制到a中</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Mergesort</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;   <span class="comment">//二路归并递归算法</span></div><div class="line">		aux = <span class="keyword">new</span> <span class="keyword">int</span> [a.length];   <span class="comment">//一次性分配空间</span></div><div class="line">		sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">		<span class="comment">// 将数组a[lo..hi]排序</span></div><div class="line">		<span class="keyword">if</span>(lo&gt;=hi) <span class="keyword">return</span> ;</div><div class="line">		<span class="keyword">int</span> mid = lo + (hi-lo)/<span class="number">2</span>;</div><div class="line">		sort(a,lo,mid);     <span class="comment">//递归将左半边排序</span></div><div class="line">		sort(a,mid+<span class="number">1</span>,hi);   <span class="comment">//递归将右半边排序</span></div><div class="line">		merge(a, lo, mid, hi);  <span class="comment">//归并结果</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Mergesort1</span><span class="params">(<span class="keyword">int</span> [] a)</span> </span>&#123;  <span class="comment">//二路归并非递归算法</span></div><div class="line">		<span class="comment">//进行lgN次两两归并</span></div><div class="line">		<span class="keyword">int</span> N = a.length;</div><div class="line">		aux = <span class="keyword">new</span> <span class="keyword">int</span> [N];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> sz = <span class="number">1</span>; sz&lt;N;sz = <span class="number">2</span>*sz)&#123;  <span class="comment">//sz的子数组大小</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> lo =<span class="number">0</span>;lo&lt;N-sz; lo+=<span class="number">2</span>*sz)&#123;  <span class="comment">//子数组的索引</span></div><div class="line">				merge(a, lo, lo+sz-<span class="number">1</span>, Math.max(lo+<span class="number">2</span>*sz-<span class="number">1</span>, N-<span class="number">1</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> a[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</div><div class="line">		<span class="comment">//Mergesort(a);  //调用2-路归并递归排序函数</span></div><div class="line">		Mergesort1(a);  <span class="comment">//调用2-路归并非递归排序函数</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">			System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="一些改进"><a href="#一些改进" class="headerlink" title="一些改进"></a>一些改进</h3><p>1.对小规模子数组使用插入排序，因为递归会使小规模问题中方法的调用过于频繁，所以改进对他们的处理方法就能改进整个算法。使用插入排序处理小规模子数组（比如长度小于15）。</p>
<p>2.测试数组是否已经有序，我们可以添加一个判断条件，如果a[mid]小于等于a[mid+1]，此时前半部分有序数组最后一个数小于后半部分有序数组的第一个数，我们就认为数组已经是有序并跳过merge()方法。这个改动不影响排序的递归调用。</p>
<p>3.不将元素复制到辅助数组（暂时不太明白）。</p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。在第一种情况中，递归调用发生在处理整个数组之前；在第二种情况中，递归调用发生在处理整个数组之后。在归并排序中，一个数组被等分成两半；在快速排序中，切分的位置取决于数组的内容。</p>
<h3 id="关键算法"><a href="#关键算法" class="headerlink" title="关键算法"></a>关键算法</h3><p>该方法的关键在于切分，这个过程使得数组满足下面的三个条件：</p>
<p>1.对于某个j,a[j]已经排定；</p>
<p>2.a[lo]到a[j-1]中的所有元素都不大于a[j]；</p>
<p>3.a[j+1]到a[hi]中的所有元素都不小于a[j]。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quicksort(<span class="keyword">int</span> a[])&#123;</div><div class="line">		sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</div><div class="line">		<span class="keyword">return</span> a;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(hi&lt;=lo) <span class="keyword">return</span> ;</div><div class="line">		<span class="keyword">int</span> j=partition(a,lo,hi);   <span class="comment">//切分</span></div><div class="line">		<span class="comment">//第j个位置已经在它所在的排好序的位置</span></div><div class="line">		sort(a,lo,j-<span class="number">1</span>);</div><div class="line">		sort(a,j+<span class="number">1</span>,hi);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</div><div class="line">	    <span class="keyword">int</span> part = a[lo];   <span class="comment">//切分元素</span></div><div class="line">	    <span class="keyword">int</span> i = lo,j=hi+<span class="number">1</span>;  <span class="comment">//左右扫描指针</span></div><div class="line">	    <span class="keyword">int</span> tem;</div><div class="line">	    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">	    	<span class="comment">//扫描左右，检查扫描是否结束并交换元素</span></div><div class="line">	    	<span class="keyword">while</span>(a[++i]&lt;part) &#123;  <span class="comment">//从左到右(第一个元素除外)找到大于等于part的元素</span></div><div class="line">	    		<span class="keyword">if</span>(i==hi) <span class="keyword">break</span>;    </div><div class="line">	    	&#125;</div><div class="line">	    	<span class="keyword">while</span>(a[--j]&gt;part)&#123;  <span class="comment">//从右到左找到小于等于part的元素</span></div><div class="line">	    		<span class="keyword">if</span>(j==lo) <span class="keyword">break</span>;</div><div class="line">	    	&#125;</div><div class="line">	    	<span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</div><div class="line">	    	tem = a[i];</div><div class="line">	    	a[i] = a[j];</div><div class="line">	    	a[j] = tem;</div><div class="line">	    &#125;</div><div class="line">	    tem = a[lo];   <span class="comment">//将part=a[j]放入正确的位置</span></div><div class="line">    	a[lo] = a[j];</div><div class="line">    	a[j] = tem;</div><div class="line">		<span class="keyword">return</span> j;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> []a = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</div><div class="line">		a = quicksort(a);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</div><div class="line">			System.out.print(a[i]+<span class="string">" "</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;回顾之前学习的各种排序算法，从初级到高级，包括选择排序，冒泡排序，插入排序，希尔排序，快速排序，归并排序，堆排序等等，持续更新中…&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.wangxinri.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://www.wangxinri.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="编程" scheme="http://www.wangxinri.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>牛客网-剑指offer</title>
    <link href="http://www.wangxinri.cn/2017/08/19/%E5%89%91%E6%8C%87offer/"/>
    <id>http://www.wangxinri.cn/2017/08/19/剑指offer/</id>
    <published>2017-08-19T01:30:25.000Z</published>
    <updated>2017-12-07T07:59:00.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>牛客网剑指offer题目汇总，记录自己刷题历程，原文链接：<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="external">点击查看</a><br><a id="more"></a></p>
<h2 id="题目一：二维数组中的查找-（数组）"><a href="#题目一：二维数组中的查找-（数组）" class="headerlink" title="题目一：二维数组中的查找   （数组）"></a>题目一：二维数组中的查找   （数组）</h2><p><strong>题目描述:</strong>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p><strong>思路：</strong>矩阵从左到右，从上到下都是有序的，因此，先查找目标数target在二维数组中的哪一行，通过判断是否在该行的第一个数和最后一个数之间，如果是，则定位到了行，因为该行是有序的，所以接下来通过二分查找，即可查找成功。</p>
<p><strong>注：</strong>时间复杂度的话，查找行花了O(n), 二分查找O(logn),总共应该O(n)+O(logn),奇怪的是我使用普通的遍历查找，运行时间更更少！这不科学，二分查找效率应该更高，这应该是数据量小导致的。</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(array[<span class="number">0</span>].length==<span class="number">0</span>) &#123; <span class="comment">//[[]]的情况</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;   <span class="comment">//判断二维数组是否为空</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++) &#123;</div><div class="line">            <span class="comment">// 找出target所在二维数组的行</span></div><div class="line">            <span class="keyword">if</span>(target&gt;=array[i][<span class="number">0</span>]&amp;&amp;target&lt;=array[i][array[i].length-<span class="number">1</span>]) &#123;</div><div class="line">                <span class="comment">//找到所在行之后，因为该行是有序的，此时使用二分查找即可</span></div><div class="line">                <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">                <span class="keyword">int</span> high = array[i].length-<span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> mid;</div><div class="line">                <span class="keyword">while</span>(low&lt;=high) &#123;</div><div class="line">                    mid = (high + low)/<span class="number">2</span>;</div><div class="line">                    <span class="keyword">if</span>(array[i][mid]&gt;target) &#123;</div><div class="line">                        high = mid - <span class="number">1</span>;</div><div class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i][mid]&lt;target)&#123;</div><div class="line">                        low = mid + <span class="number">1</span>;</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="题目二：替换空格-（字符串）"><a href="#题目二：替换空格-（字符串）" class="headerlink" title="题目二：替换空格  （字符串）"></a>题目二：替换空格  （字符串）</h2><p><strong>题目描述:</strong>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>
<p><strong>思路：</strong></p>
<p><strong>第一种：</strong> 直接用StringBuffer提供的replace函数。(不可取，得自己搞)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">replace(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str);</div></pre></td></tr></table></figure>
<p>Replaces the characters in a substring of this sequence with characters in the specified String.</p>
<p><strong>第二种：</strong> 先统计出空格的个数，然后计算得到替换后的字符串的长度，然后重新更新字符串的长度，此时，<strong>从后向前</strong>遍历字符串，如果是空格，替换，如果不是空格，赋原值，知道遍历结束。</p>
<p><strong>注：</strong>从后往前，每个空格后面的字符只需要移动一次。从前往后，当遇到第一个空格时，要移动第一个空格后所有的字符一次；当遇到第二个空格时，要移动第二个空格后所有的字符一次；以此类推。所以总的移动次数会更多。</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> oldlength = str.length()-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> newlength = oldlength;  <span class="comment">//替换之后新数组的大小</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++) &#123;</div><div class="line">            <span class="keyword">if</span>(str.charAt(i)==<span class="string">' '</span>)&#123;</div><div class="line">                newlength += <span class="number">2</span>;   <span class="comment">//由一个' '变为"%20",长度增加2</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        str.setLength(newlength+<span class="number">1</span>);  <span class="comment">//扩展str的长度,多余的位置是空字符</span></div><div class="line">        <span class="comment">//此时oldlength和newlength都是数组的长度-1</span></div><div class="line">        <span class="keyword">for</span>(;oldlength&gt;=<span class="number">0</span>&amp;&amp;oldlength&lt;newlength;oldlength--)&#123;</div><div class="line">            <span class="keyword">if</span>(str.charAt(oldlength)==<span class="string">' '</span>)&#123;</div><div class="line">                str.setCharAt(newlength--, <span class="string">'0'</span>);</div><div class="line">                str.setCharAt(newlength--, <span class="string">'2'</span>);</div><div class="line">                str.setCharAt(newlength--, <span class="string">'%'</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                str.setCharAt(newlength--, str.charAt(oldlength));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> str.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="题目三：从尾到头打印链表-（链表）"><a href="#题目三：从尾到头打印链表-（链表）" class="headerlink" title="题目三：从尾到头打印链表 （链表）"></a>题目三：从尾到头打印链表 （链表）</h2><p><strong>题目描述:</strong>输入一个链表，从尾到头打印链表每个节点的值。</p>
<p><strong>思路：</strong></p>
<p><strong>第一种：</strong> 遍历链表，将链表存入Arraylist数组vals中，然后对vals进行反转。(确实很low)</p>
<p><strong>第二种：</strong> 使用递归思想，递归到最后一个结点，然后层层返回，此时依次add进vals数组中。</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">*    public class ListNode &#123;</span></div><div class="line"><span class="comment">*        int val;</span></div><div class="line"><span class="comment">*        ListNode next = null;</span></div><div class="line"><span class="comment">*</span></div><div class="line"><span class="comment">*        ListNode(int val) &#123;</span></div><div class="line"><span class="comment">*            this.val = val;</span></div><div class="line"><span class="comment">*        &#125;</span></div><div class="line"><span class="comment">*    &#125;</span></div><div class="line"><span class="comment">*</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</div><div class="line">        ArrayList&lt;Integer&gt; vals = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(listNode != <span class="keyword">null</span>) &#123;</div><div class="line">            vals.add(listNode.val);</div><div class="line">            listNode = listNode.next;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count/<span class="number">2</span>;i++) &#123;</div><div class="line">            <span class="keyword">int</span> tem = vals.get(i);</div><div class="line">            vals.set(i, vals.get(count-i-<span class="number">1</span>));</div><div class="line">            vals.set(count-i-<span class="number">1</span>, tem);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> vals;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">linklist</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; vals = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(listNode != <span class="keyword">null</span>) &#123;</div><div class="line">            printListFromTailToHead(listNode.next);</div><div class="line">    	    vals.add(listNode.val);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//return val; 返回val不需要，因为vals本身就相当于全局变量一样，每次迭代更新的都是同一个vals。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ou6yob3zd.bkt.clouddn.com/20170819204904.png" alt=""></p>
<h2 id="题目四：重建二叉树-（树）"><a href="#题目四：重建二叉树-（树）" class="headerlink" title="题目四：重建二叉树 （树）"></a>题目四：重建二叉树 （树）</h2><h2 id="题目五：用两个栈实现队列-（栈、队列）"><a href="#题目五：用两个栈实现队列-（栈、队列）" class="headerlink" title="题目五：用两个栈实现队列 （栈、队列）"></a>题目五：用两个栈实现队列 （栈、队列）</h2><p><strong>题目描述:</strong>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>
<p><strong>思路：</strong></p>
<p>入队push:将元素进栈A。</p>
<p>出队pop:判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，然后栈B出站。</p>
<p><strong>注：</strong> 1 push，将数据直接压入stack1即可；2 pop,将stack1中的数据弹出压入到stack2中，则数据顺序相反，为保证最新进入的数据一致处于栈顶，只有将stack2中的数据全部pop后，才能继续将stack1中的数据压入到stack2中，继续做pop。</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">        stack1.push(node);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span>(stack1.empty()&amp;&amp;stack2.empty())&#123;</div><div class="line">            System.out.println(<span class="string">"队列为空!"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(stack2.empty())&#123;</div><div class="line">            <span class="keyword">while</span>(!stack1.empty())&#123;</div><div class="line">                stack2.push(stack1.pop());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack2.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="题目十一：二进制中1的个数-（位运算）"><a href="#题目十一：二进制中1的个数-（位运算）" class="headerlink" title="题目十一：二进制中1的个数 （位运算）"></a>题目十一：二进制中1的个数 （位运算）</h2><p><strong>题目描述:</strong>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>
<p><strong>思路：</strong></p>
<p><strong>方法一：</strong> 通过n&amp;n-1可以消除整数最右边的1。多次执行n=n&amp;n-1，最终n为0时，表示所有的1都被消除了，消除1所执行的次数即为1的个数。</p>
<p><strong>分析：</strong>为啥n&amp;n-1可以消除整数最右边的1？ 如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变成0，原来在最右边1后面的所有的0都会变成1（如果最右边的1后面还有0的话）。其余所有位将不会受到影响。我们发现减1的结果是把从最右边的1开始的所有位都取反了，这个时候将n于n-1做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变为0，那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。</p>
<pre><code>n=12          1100 
n-1=11        1011
n=12&amp;11       1000
n=8           1000
n-1=7         0111
n=8&amp;7         0000
</code></pre><p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</div><div class="line">        n &amp;= n-<span class="number">1</span>;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更多参考点击：<a href="http://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html" target="_blank" rel="external">算法-求二进制数中1的个数</a></p>
<h2 id="题目十二：数值的整数次方-（代码的完整性）"><a href="#题目十二：数值的整数次方-（代码的完整性）" class="headerlink" title="题目十二：数值的整数次方 （代码的完整性）"></a>题目十二：数值的整数次方 （代码的完整性）</h2><p><strong>题目：</strong>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>
<p><strong>思路：</strong></p>
<p><strong>方法一：</strong>估计是个人都能想出来，假设要求a^b，只需将a连乘b次，此时的时间复杂度是O(b)。</p>
<p><strong>方法二：</strong> <strong>快速幂</strong>，快速幂能将复杂度降至O(logb)，确实是快了不少。</p>
<p>原理：假设我们要求a^b，b拆成二进制时，该二进制数第i位的权值为2^(i-1)，如下：</p>
<p>a^11 = a^(1011) = a^(1000+0010+0001) = a^(2^0 + 2^1 + 2^3) = a^(2^0)*a^(2^1)*a^(2^3)</p>
<p>通过使用&amp;和&gt;&gt;位运算操作，依次遍历指数二进制表示中的每一位，我们发现，结果为每一位值为1时，也即a^(2^i)的累乘，此时，相邻位的值都是前一个值的翻倍。</p>
<p>更多信息：<a href="http://www.cnblogs.com/CXCXCXC/p/4641812.html" target="_blank" rel="external">快速幂</a></p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = <span class="number">1.0</span>;</div><div class="line">        <span class="keyword">int</span> e = exponent;</div><div class="line">        exponent = Math.abs(exponent);</div><div class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(exponent!=<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>((exponent&amp;<span class="number">1</span>)==<span class="number">1</span>)&#123;</div><div class="line">                result *= base;</div><div class="line">            &#125;</div><div class="line">            base *= base;    <span class="comment">//每移动一位，该为代表的乘数都翻倍</span></div><div class="line">            exponent = exponent &gt;&gt; <span class="number">1</span>;  <span class="comment">//右移一位</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> e&gt;<span class="number">0</span>?result:<span class="number">1</span>/result;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目十三：调整数组顺序使奇数位于偶数前面-（数组）"><a href="#题目十三：调整数组顺序使奇数位于偶数前面-（数组）" class="headerlink" title="题目十三：调整数组顺序使奇数位于偶数前面 （数组）"></a>题目十三：调整数组顺序使奇数位于偶数前面 （数组）</h2><p><strong>题目描述:</strong>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>
<p><strong>思路：</strong></p>
<p><strong>方法一：</strong> 插入排序的思想。从第二个数开始，之前的数（也就只有一个数）是已经排好序的，此时如果第二个数是奇数的话，我们只需要插入到之前序列中所有偶数之前，如果是偶数的话，则不需要插入；继续第三个数，依次遍历完数组即可。</p>
<p><strong>方法二：</strong>重新定义一个vector，从前往后遍历vector,遇到奇数push_back；再遍历一遍vector，遇到偶数push_back,以空间换时间，这就不实现了，easy。</p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</div><div class="line">    	    <span class="keyword">if</span>(array[i]%<span class="number">2</span>==<span class="number">0</span>)&#123;  <span class="comment">//偶数的话，继续下一个数</span></div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">    	    &#125;<span class="keyword">else</span>&#123;   </div><div class="line">                <span class="keyword">int</span> tem = array[i];  <span class="comment">//保存待插入到偶数之前的奇数</span></div><div class="line">                <span class="keyword">int</span> j;</div><div class="line">                <span class="keyword">for</span>(j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>&amp;&amp;(array[j]%<span class="number">2</span>==<span class="number">0</span>);j--)&#123;  <span class="comment">//找到偶数之前插入的位置</span></div><div class="line">                    array[j+<span class="number">1</span>] = array[j];  <span class="comment">//偶数集体后移一位</span></div><div class="line">                &#125;</div><div class="line">                array[j+<span class="number">1</span>] = tem;  <span class="comment">//将奇数插入到该位置上</span></div><div class="line">            &#125;</div><div class="line">    	&#125;      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目十四：链表中倒数第k个结点"><a href="#题目十四：链表中倒数第k个结点" class="headerlink" title="题目十四：链表中倒数第k个结点"></a>题目十四：链表中倒数第k个结点</h2><p><strong>题目描述:</strong>输入一个链表，输出该链表中倒数第k个结点。</p>
<p><strong>思路：</strong> 定义两个指针p1,p2，分别指向表头，再定义count=0,表示p1在第0个结点，此时p1开始遍历链表，每经过一个结点count++，当count&gt;=k时，p2开始遍历链表，直到p1遍历结束，此时p2指向的结点即为倒数第k个结点。</p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">public class ListNode &#123;</span></div><div class="line"><span class="comment">    int val;</span></div><div class="line"><span class="comment">    ListNode next = null;</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment">    ListNode(int val) &#123;</span></div><div class="line"><span class="comment">        this.val = val;</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">&#125;*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindKthToTail</span><span class="params">(ListNode head,<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        ListNode p = head;</div><div class="line">        ListNode node = <span class="keyword">null</span>;  <span class="comment">//head为空，返回null</span></div><div class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">0</span>) <span class="keyword">return</span> node;  <span class="comment">//k&lt;=0无效，返回null</span></div><div class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</div><div class="line">            count++;</div><div class="line">            head = head.next;</div><div class="line">            <span class="keyword">if</span>(count &gt;= k) &#123;  <span class="comment">//相对第一个元素为k-1的间隔时,head和p同时往后走</span></div><div class="line">                node = p;</div><div class="line">                p = p.next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目十五：反转链表"><a href="#题目十五：反转链表" class="headerlink" title="题目十五：反转链表"></a>题目十五：反转链表</h2><p><strong>题目描述:</strong>输入一个链表，反转链表后，输出链表的所有元素。</p>
<p><strong>思路：</strong> 依次遍历每个结点，同时通过头插法再重新创建新的链表</p>
<p><strong>注：</strong>可以利用之前的结点，而不需要重新创建新的结点，以后改进。</p>
<p><strong>代码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">public class ListNode &#123;</span></div><div class="line"><span class="comment">    int val;</span></div><div class="line"><span class="comment">    ListNode next = null;</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment">    ListNode(int val) &#123;</span></div><div class="line"><span class="comment">        this.val = val;</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">&#125;*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode p = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            p = <span class="keyword">new</span> ListNode(head.val);</div><div class="line">        &#125;</div><div class="line">        ListNode q = head.next;</div><div class="line">        <span class="keyword">while</span>(q!=<span class="keyword">null</span>)&#123;</div><div class="line">            ListNode s = <span class="keyword">new</span> ListNode(q.val);</div><div class="line">            s.next = p;</div><div class="line">            p = s;</div><div class="line">            q = q.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="题目十六：合并两个排序的链表"><a href="#题目十六：合并两个排序的链表" class="headerlink" title="题目十六：合并两个排序的链表"></a>题目十六：合并两个排序的链表</h2><p><strong>题目描述:</strong>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>
<p><strong>思路：</strong> 当两个链表list1，list2（指向第一个结点）不空时，比较list1.val和list2.val的值，较小的作为合并后的第一个结点，假设list1.val较小，此时list1 = list1.next，继续比较list1.val和list2.val，直到某一个链表遍历结束，将没遍历结束的链表添加到合并后链表末尾。</p>
<p><strong>注：</strong>可以利用之前的结点，而不需要重新创建新的结点，这样，最后直接指向没遍历结束的链表即可，同时也节省了创建新的结点的空间，后续改进。</p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">public class ListNode &#123;</span></div><div class="line"><span class="comment">    int val;</span></div><div class="line"><span class="comment">    ListNode next = null;</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment">    ListNode(int val) &#123;</span></div><div class="line"><span class="comment">        this.val = val;</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">&#125;*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</div><div class="line">        ListNode p = <span class="keyword">new</span> ListNode(<span class="number">0</span>);  <span class="comment">//创建一个头结点,数据域初始化为0，不存储数据,指针域为null</span></div><div class="line">        ListNode head = p ;  <span class="comment">//头指针,指向头结点</span></div><div class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span> &amp;&amp; list2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span>(list1!=<span class="keyword">null</span> &amp;&amp; list2!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(list1.val &lt; list2.val)&#123;</div><div class="line">                ListNode s = <span class="keyword">new</span> ListNode(list1.val);</div><div class="line">                p.next = s;</div><div class="line">                p = s;</div><div class="line">                list1 = list1.next;</div><div class="line">                 </div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                ListNode s = <span class="keyword">new</span> ListNode(list2.val);</div><div class="line">                p.next = s;</div><div class="line">                p = s;</div><div class="line">                list2 = list2.next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(list1!=<span class="keyword">null</span>)&#123;</div><div class="line">            ListNode s = <span class="keyword">new</span> ListNode(list1.val);</div><div class="line">            p.next = s;</div><div class="line">            p = s;</div><div class="line">            list1 = list1.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(list2!=<span class="keyword">null</span>)&#123;</div><div class="line">            ListNode s = <span class="keyword">new</span> ListNode(list2.val);</div><div class="line">            p.next = s;</div><div class="line">            p = s;</div><div class="line">            list2 = list2.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head.next;  <span class="comment">//头结点不存储元素,head.next指向第一个元素节点，返回 </span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;牛客网剑指offer题目汇总，记录自己刷题历程，原文链接：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://www.wangxinri.cn/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="编程" scheme="http://www.wangxinri.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="剑指offer" scheme="http://www.wangxinri.cn/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="刷题" scheme="http://www.wangxinri.cn/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>样先</title>
    <link href="http://www.wangxinri.cn/2017/08/12/%E6%A0%B7%E5%85%88/"/>
    <id>http://www.wangxinri.cn/2017/08/12/样先/</id>
    <published>2017-08-12T11:59:25.000Z</published>
    <updated>2017-12-07T07:59:00.086Z</updated>
    
    <content type="html"><![CDATA[<p>　　仅以此记录样先发给我的新年贺词，时刻向兄弟学习！（侵犯他的隐私我不管，哈哈）<br><a id="more"></a><br>新日左右：</p>
<p>　　余中求学生涯，惟君与余真正共事三年。初始，吾二人低而普通，待到分班，高而重点，止一年耳。忆往昔高中奋斗岁月，直叫人倍感追忆。</p>
<p>　　予闻朱子言，为学譬如熬肉，先须用猛火煮，然后用慢火温。盖士人读书，第一要有志，第二要有识，第三要有恒。有志则断不甘为下流；有识则知学问无尽，不敢以一得自足，如河伯之观海，如井蛙之窥天，皆无识者也；有恒则断无不成之事。余注曰：“有志者，不在其小也。大者如孙、毛以救天下万民于水火为己任，周之为中华崛起而读书，小者以达一己之私，一举手，一投足。然小志者，亦有其蔽也。志小则为己，为己则时怠，怠则退而求其次，盖不知人自忍之大乎。呜呼！”此亦余之不足也，与老奸共勉。</p>
<p>　　大学确定考研否？准备否？书仍看否？新年细语，浅见孤陋，内心反复，诚惶诚恐。顺问近好。代问伯父、伯母好。</p>
<p>　　新年快乐！ 学业进步！ 甜甜蜜蜜！ 天天开心！</p>
<p>　　样先</p>
 <p align="right">2015.2.18</p> 

<p>　　真怀念高中的时光啊，现在大家相处的时间变得少了，遇见你们，真好，与兄弟们共勉，希望自己能做到最后一条，天天开心！</p>
<div id="music163player"><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=68450&auto=0&height=66"></iframe><br></div>                                                                                       ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　仅以此记录样先发给我的新年贺词，时刻向兄弟学习！（侵犯他的隐私我不管，哈哈）&lt;br&gt;
    
    </summary>
    
      <category term="兄弟" scheme="http://www.wangxinri.cn/categories/%E5%85%84%E5%BC%9F/"/>
    
    
      <category term="兄弟" scheme="http://www.wangxinri.cn/tags/%E5%85%84%E5%BC%9F/"/>
    
      <category term="朋友" scheme="http://www.wangxinri.cn/tags/%E6%9C%8B%E5%8F%8B/"/>
    
  </entry>
  
  <entry>
    <title>github Pages + Hexo搭建个人博客（二）  提升篇</title>
    <link href="http://www.wangxinri.cn/2017/08/07/github%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%20%20%E6%8F%90%E5%8D%87%E7%AF%87/"/>
    <id>http://www.wangxinri.cn/2017/08/07/github Pages + Hexo搭建个人博客（二）  提升篇/</id>
    <published>2017-08-07T04:59:25.000Z</published>
    <updated>2017-12-07T07:59:00.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在之前的<strong>初级篇</strong>中介绍了如何搭建个人博客。本文介绍如何更换博客主题、设置第三方服务和最重要的如何管理发布博客。<br><a id="more"></a></p>
<h1 id="二、更换主题"><a href="#二、更换主题" class="headerlink" title="二、更换主题"></a>二、更换主题</h1><p>在这篇文章中，假定你已经成功安装了Hexo,并使用Hexo提供的命令创建了一个站点。</p>
<p>在Hexo中有两份主要的配置文件，其名称都是<strong>_config.yml</strong>。其中，一份位于站点根目录下（此处为G:\GitHub\hexo），主要包含Hexo本身的配置；另一份位于主题根目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为<strong>站点配置文件</strong>，后者称为<strong>主题配置文件</strong>。 </p>
<h2 id="1-安装NexT"><a href="#1-安装NexT" class="headerlink" title="1. 安装NexT"></a>1. 安装NexT</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 </p>
<h3 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1) 下载主题"></a>1) 下载主题</h3><p>如果你熟悉Git，建议你使用<strong>克隆最新版本</strong>的方式，之后的更新可以通过<strong>git pull</strong>来快速更新，而不用再次下载压缩包替换。 （说多了都是累啊，早知道就该看官网了，我就是下载的压缩包，估计是没法快速更新了）</p>
<p>在终端窗口下，定位到 Hexo 站点目录下。使用 Git 命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> G:\GitHub\hexo</div><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next  <span class="comment">#后面意思是clone到该目录下themes/next文件夹中</span></div></pre></td></tr></table></figure></p>
<h3 id="2-启用主题"><a href="#2-启用主题" class="headerlink" title="2) 启用主题"></a>2) 启用主题</h3><p>与所有 Hexo 主题启用的模式一样。当克隆/下载完成后，打开<strong>站点配置文件</strong>，找到<strong>theme</strong>字段，并将其值更改为<strong>next</strong>。 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
<p>此时我们在<strong>主题配置文件</strong>中设置语言。修改<strong>language</strong>字段。在主题的languages文件夹中选择语言，此处目录为G:\GitHub\hexo\themes\next\languages 。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">language: zh-Hans   <span class="comment">#选择汉语，选择其他语言填写其他值即可</span></div></pre></td></tr></table></figure>
<p>到此，NexT主题安装完成。下一步将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用hexo clean 来清除Hexo的缓存。 </p>
<h3 id="3-验证主题"><a href="#3-验证主题" class="headerlink" title="3) 验证主题"></a>3) 验证主题</h3><p>进入到博客文件夹根目录，此处为G:\GitHub\hexo，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean  <span class="comment">#更换主题，最好先清除Hexo缓存</span></div><div class="line">hexo generate  <span class="comment">#生成静态页面</span></div><div class="line">hexo server   <span class="comment"># hexo server -p **** 更换默认4000端口为****</span></div></pre></td></tr></table></figure>
<p>此时即可使用浏览器访问 <a href="http://localhost:4000。" target="_blank" rel="external">http://localhost:4000。</a></p>
<p>检查站点是否正确运行，如长时间访问不了，更改端口。</p>
<p><img src="http://ou6yob3zd.bkt.clouddn.com/20170808201948.png" alt=""></p>
<p>现在，你已经成功安装并启用了NexT主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p>
<h1 id="三、主题设定"><a href="#三、主题设定" class="headerlink" title="三、主题设定"></a>三、主题设定</h1><p>NexT官网和网上资料非常丰富，就不细说了，参考如下：</p>
<p>官方参考：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT使用文档</a></p>
<p>网上资源：<a href="http://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="external">hexo的next主题个性化教程：打造炫酷网站</a></p>
<p><strong>补充几点：</strong></p>
<h2 id="1-添加评论功能"><a href="#1-添加评论功能" class="headerlink" title="1. 添加评论功能"></a>1. 添加评论功能</h2><p>我选择的是<strong>来比力</strong>，很简单，注册一个账号，妈的，是韩国的网站，发验证码竟然是韩文，通过有道词典才知道它讲的是啥，输入四位验证码回车后，然后填写相关信息，申请获取代码，然后得到安装代码中的data-uid。</p>
<p>编辑主题配置文件， 编辑 livere_uid 字段，设置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">livere_uid: <span class="comment">#your livere_uid</span></div></pre></td></tr></table></figure>
<h2 id="2-修改背景图片"><a href="#2-修改背景图片" class="headerlink" title="2. 修改背景图片"></a>2. 修改背景图片</h2><p>首先找到一个背景图片放到 hexo（hexo工程文件）-&gt; themes -&gt; next -&gt; source -&gt; images 的路径下；</p>
<p>然后进入hexo（hexo工程文件）-&gt; themes -&gt; next -&gt; source -&gt; css -&gt; _custom ，找到路径下的custom.styl文件，在文件的最上方加入如下代码就完事了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Custom styles.</div><div class="line">body &#123;</div><div class="line">  background:url(/images/background.jpeg);</div><div class="line">  background-attachment: fixed;   <span class="comment">#固定背景图，使得不随页面移动</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-修改博客内容宽度"><a href="#3-修改博客内容宽度" class="headerlink" title="3. 修改博客内容宽度"></a>3. 修改博客内容宽度</h2><p>Pisces Scheme 直接在./themes/next/source/css/_variables/custom.styl文件中添加</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$main</span>-desktop = 1200px </div><div class="line"><span class="variable">$content</span>-desktop = 900px</div></pre></td></tr></table></figure>
<p>可以避免直接修改源码，可以解决内容宽度问题，而且在移动设备上显示正常。</p>
<p>参考：<a href="https://github.com/iissnan/hexo-theme-next/issues/759#issuecomment-202242848" target="_blank" rel="external">感觉浏览器留白太多，代码块看起来比较麻烦</a></p>
<h2 id="4-添加菜单栏"><a href="#4-添加菜单栏" class="headerlink" title="4. 添加菜单栏"></a>4. 添加菜单栏</h2><p>在个人网站根目录下使用hexo命令hexo new page “photo” 就直接创建了.\Hexo\source\photo\index.md<br>文件。</p>
<p>在主题配置文件_config.yml中找到meun:字段，添加<strong>photo</strong>字段<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories/</div><div class="line">  tags: /tags/</div><div class="line">  archives: /archives/</div><div class="line">  photo: /photo/</div><div class="line">  about: /about/</div><div class="line">  #sitemap: /sitemap.xml</div><div class="line">  #commonweal: /404.html</div></pre></td></tr></table></figure></p>
<p>给photo添加相应的图标，还是刚才的主题配置文件_config.yml，添加<strong>photo</strong>字段：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  schedule: calendar</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  sitemap: sitemap</div><div class="line">  commonweal: heartbeat</div><div class="line">  photo: photo</div></pre></td></tr></table></figure>
<p>在如下图标库中选择喜欢的icon，添加相应的名称即可，这里添加为<strong>photo</strong>：<a href="http://fontawesome.io/icons/" target="_blank" rel="external">点击选择图标</a></p>
<p>将网站中的<strong>photo</strong>字段显示为中文<strong>照片</strong>字段</p>
<p>在\themes\next\languages\zh-Hans.yml添加：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: 首页</div><div class="line">  archives: 归档</div><div class="line">  categories: 分类</div><div class="line">  tags: 标签</div><div class="line">  about: 关于</div><div class="line">  search: 搜索</div><div class="line">  schedule: 日程表</div><div class="line">  sitemap: 站点地图</div><div class="line">  commonweal: 公益404</div><div class="line">  photo: 照片</div></pre></td></tr></table></figure>
<h2 id="5-调整首页文档摘要和阅读全文按钮高度并删除居中灰色线条"><a href="#5-调整首页文档摘要和阅读全文按钮高度并删除居中灰色线条" class="headerlink" title="5. 调整首页文档摘要和阅读全文按钮高度并删除居中灰色线条"></a>5. 调整首页<strong>文档摘要</strong>和<strong>阅读全文</strong>按钮高度并删除居中灰色线条</h2><p>1.调整文档摘要的高度</p>
<p>在/next/source/css/_common/components/post/post-meta.styl中修改<strong>margin</strong>的值</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-meta</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">3px</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">  <span class="attribute">color</span>: $grey-dark;</div></pre></td></tr></table></figure>
<p>2.调整阅读全文按钮高度</p>
<p>在\next\source\css_common\components\post\post-button.styl中修改<strong>margin-top</strong>的值</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.post-button</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</div><div class="line">  .btn &#123;</div></pre></td></tr></table></figure>
<p>3.去除首页文档与文档之间居中灰色的线条</p>
<p>在\next\source\css_common\components\post\post-eof.styl中注释掉如下样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.posts-expand</span> &#123;</div><div class="line">  .post-eof &#123;</div><div class="line">  <span class="comment">/*</span></div><div class="line"><span class="comment">    display: block;</span></div><div class="line"><span class="comment">    margin: $post-eof-margin-top auto $post-eof-margin-bottom;</span></div><div class="line"><span class="comment">    width: 8%;</span></div><div class="line"><span class="comment">    height: 1px;</span></div><div class="line"><span class="comment">    background: $grey-light;</span></div><div class="line"><span class="comment">    text-align: center;</span></div><div class="line"><span class="comment">  */</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终效果如下：<br><img src="http://ou6yob3zd.bkt.clouddn.com/20170904100438.png" alt=""></p>
<h2 id="6-归档页博文列表高度调整"><a href="#6-归档页博文列表高度调整" class="headerlink" title="6. 归档页博文列表高度调整"></a>6. 归档页博文列表高度调整</h2><p>在\next\source\css_common\components\post\post-collapse.styl中修改.post</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.post</span> &#123; <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0</span>; &#125;</div></pre></td></tr></table></figure>
<p>到这的时候，主题应该也优化的差不多，接下来就是写博客和管理了，加油搞起。</p>
<h1 id="四、博客管理维护"><a href="#四、博客管理维护" class="headerlink" title="四、博客管理维护"></a>四、博客管理维护</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，因为.md文件不存在了，就不可能了（除非你自己写html）。</p>
<p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p>
<p><strong>注：</strong> .gitignoree文件中的内容是忽略上传至Github仓库的文件，这里我修改成如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.deploy*/    <span class="comment">#只忽略上传.deploy*/开头的文件</span></div></pre></td></tr></table></figure></p>
<p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库）。</p>
<p>所以，我利用了分支！！！</p>
<p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p>
<p>下面以我的博客作为例子详细地讲述。</p>
<h2 id="2-博客搭建流程"><a href="#2-博客搭建流程" class="headerlink" title="2. 博客搭建流程"></a>2. 博客搭建流程</h2><p>  1.创建仓库，xinrisanshao.github.io；</p>
<p>  2.创建两个分支：master 与 hexo；</p>
<p>  3.设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</p>
<p>  4.使用如下命令拷贝仓库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/xinrisanshao/xinrisanshao.github.io.git</div></pre></td></tr></table></figure>
<p>  5.在本地xinrisanshao.github.io文件夹下通过Git shell依次执行npm install hexo、hexo init、npm<br>   install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</p>
<p>  6.修改_config.yml中的deploy参数，分支应为master；</p>
<p>  7.依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件（Hexo网站根目录执行）；</p>
<p>  8.执行hexo generate -d生成网站并部署到GitHub上（Hexo网站根目录执行）。</p>
<p>这样一来，在GitHub上的xinrisanshao.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。修改了博客网站原始文件，然后发布到hexo分支上进行保存，同时修改后新的静态网页deploy到master,同步更新，两者都保存至Github仓库上，不怕文件丢失了。</p>
<p><strong>注：</strong>流程的5,6步hexo init创建的是一个新的Hexo网站文件，我们在本地配置好的Hexo+next主题的网站文件可以直接复制到.\xinrisanshao.github.io\文件夹中，直接代替5,6步创建的流程，这样就不需要我们再次重复配置了，其他的过程都是一样的。</p>
<h2 id="3-博客管理流程"><a href="#3-博客管理流程" class="headerlink" title="3. 博客管理流程"></a>3. 博客管理流程</h2><h3 id="1-编辑与修改博客"><a href="#1-编辑与修改博客" class="headerlink" title="1. 编辑与修改博客"></a>1. 编辑与修改博客</h3><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p>
<p>1.依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；</p>
<p>2.然后才执行hexo generate -d发布网站到master分支上。</p>
<p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p>
<h3 id="2-本地资料丢失"><a href="#2-本地资料丢失" class="headerlink" title="2. 本地资料丢失"></a>2. 本地资料丢失</h3><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：<br>1.首先安装Git，Node.js和Hexo。</p>
<p>2.使用下面命令拷贝仓库（默认分支为hexo）；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/xinrisanshao/xinrisanshao.github.io.git</div></pre></td></tr></table></figure>
<p>3.因为之前的.gitignore文件只忽略了上传.deploy*/开头的文件，所以我们上传到hexo分支的是整个的Hexo网站文件，下载之后直接什么依赖配置都好了，此时即可照着编辑与修改博客流程进行博客编辑了，大功告成。</p>
<p>以上博客管理参考：<a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">点击查看</a></p>
<h3 id="3-博客图片存放（补）"><a href="#3-博客图片存放（补）" class="headerlink" title="3. 博客图片存放（补）"></a>3. 博客图片存放（补）</h3><p>如果将博客的图片放在Hexo网站文件中，那么加载博客的时候会变得非常慢，此时，我们可以选择一个合适的图床存放图片，然后获得图片的链接地址，这样访问速度会变快许多。</p>
<p>我选择的是<strong>七牛云</strong>存放图片，具体使用方法很简单，注册账号，上传图片至空间中，这些就不细说了，网上一大堆资料。</p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>不想再敲了，好累！这也算是对搭建这个博客的一个总结吧，休息去。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;在之前的&lt;strong&gt;初级篇&lt;/strong&gt;中介绍了如何搭建个人博客。本文介绍如何更换博客主题、设置第三方服务和最重要的如何管理发布博客。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.wangxinri.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.wangxinri.cn/tags/hexo/"/>
    
      <category term="github" scheme="http://www.wangxinri.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>github Pages + Hexo搭建个人博客（一）  初级篇</title>
    <link href="http://www.wangxinri.cn/2017/08/06/github%20Pages%20+%20Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%20%20%E5%88%9D%E7%BA%A7%E7%AF%87/"/>
    <id>http://www.wangxinri.cn/2017/08/06/github Pages + Hexo搭建个人博客（一）  初级篇/</id>
    <published>2017-08-06T13:59:00.000Z</published>
    <updated>2018-01-16T03:08:38.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>之前一直是在有道云上做一些笔记的，上周末在网上看到了一些别人搭建的个人博客，顿时感兴趣起来，然后自己就瞎捣鼓了几天，最终搭建成功了，哈哈。在这个过程中发现，搭建一个网站还是比较简单的，难的是管理博客，更难的是写博客！！！<br><a id="more"></a><br>这个过程中，注册了自己的第一个github账号（很失败有木有，太out了），同时也了解了一些git的版本控制，还知道了Markdown这种标记语言，后面的这些博客都是用这个标记语言写的，还是很有收获的。</p>
<p>今天特地总结一下使用github Pages + Hexo搭建个人博客的过程，以备不时之需。这里不谈理论，只谈过程，理论自己也不是很清楚，就不瞎说了，以后慢慢熟悉了，在补充！</p>
<h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><h2 id="1-注册github账号"><a href="#1-注册github账号" class="headerlink" title="1. 注册github账号"></a>1. 注册github账号</h2><p>这个就不多说了，账号注册好后，登陆，在首页右边有一个 <strong>+</strong> 号图标，点击之后，选择New repository进行仓库的创建。Repository name命名为username.github.io（username是你的账号名，记住一定要这样命令哦)，点击Create repository，创建成功。</p>
<h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h2><p>我们之所以要安装git，是因为后面我们要用到git命令，将生成的静态博客网页等信息推送至github仓库，我们的git使用一般由两种方式，一种是<strong>图形化界面（GUI）</strong>,另外一种是通过<strong>命令行</strong>。这里我选择安装前者，带界面的，菜鸟嘛，不会git命令，先熟悉熟悉流程，顺带在这个过程中在了解git的一些常用命令。另外安装前者，在桌面上会生成两个图标， <strong>GitHub和Git Shell</strong>,这两个图标分别是图形界面和命令行工具，意思就是我们不仅可以使用图形界面的工具管理我们github上的仓库，同时也可以使用命令行的形式管理，自由切换，爽歪歪！</p>
<p>Github for Windows: <a href="http://download.csdn.net/detail/devsplash/9666012" target="_blank" rel="external">点击下载</a></p>
<p>下载安装完后，桌面上生成<strong>GitHub和Git Shell</strong>两个图标，然后点击<strong>GitHub</strong>图标，输入前面注册的github账号和密码，登录完成，ok，暂时先这样，接着往下走。</p>
<p>Github for Windows 安装配置使用教程: <a href="http://blog.csdn.net/chenxun_2010/article/details/43670651" target="_blank" rel="external">参考</a></p>
<h2 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3. 安装Node.js"></a>3. 安装Node.js</h2><p>安装Node.js,因为Hexo是一个基于Node.js的静态博客程序，所以首先安装Node.js。</p>
<p>点击进入<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js官网</a></p>
<p>我们选择左边的通用版，点击下载后，设置安装路径然后默认安装就可以了。</p>
<h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h2><p>以上环境配好了之后，那么恭喜您！接下来只需要使用npm即可完成Hexo的安装。</p>
<p>打开终端，输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>如果执行这条命令时长时间未成功，那么请先使用下面的命令将npm镜像源更改为国内的镜像，再执行上面的安装命令，因为国外的镜像源很有可能被墙了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p>安装好Hexo以后，在终端输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo</div></pre></td></tr></table></figure>
<p>若出现下图，说明hexo安装成功：</p>
<p><img src="http://ou6yob3zd.bkt.clouddn.com/20170806141617.png" alt=""></p>
<h1 id="三、使用Hexo建站"><a href="#三、使用Hexo建站" class="headerlink" title="三、使用Hexo建站"></a>三、使用Hexo建站</h1><h2 id="1-初始化博客"><a href="#1-初始化博客" class="headerlink" title="1. 初始化博客"></a>1. 初始化博客</h2><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。比如我在终端进入到G:Github目录，输入hexo init hexo，则在该目录下创建了hexo博客文件夹。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init [folder]</div></pre></td></tr></table></figure>
<p>接下来进入到博客文件夹，这里是E:Github/hexo，执行如下命令，根据该目录下的package.json中既定的dependencies配置安装所有的依赖包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>网站的主配置文件为hexo根目录下的<strong>_config.yml</strong>文件：</p>
<p>默认配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: https://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site</div><div class="line">title: Hexo</div><div class="line">subtitle:</div><div class="line">description:</div><div class="line">author: John Doe</div><div class="line">language:</div><div class="line">timezone:</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://yoursite.com</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line">  </div><div class="line"># Home page setting</div><div class="line"># path: Root path for your blogs index page. (default = &apos;&apos;)</div><div class="line"># per_page: Posts displayed per page. (0 = disable pagination)</div><div class="line"># order_by: Posts order. (Order by date descending by default)</div><div class="line">index_generator:</div><div class="line">  path: &apos;&apos;</div><div class="line">  per_page: 10</div><div class="line">  order_by: -date</div><div class="line">  </div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: landscape</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:</div><div class="line"></div></pre></td></tr></table></figure>
<p>这些配置项所代表的意思可以参考Hexo中文网：<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml配置</a> ，我们需要修改的配置只有这几项，拿我自己修改的配置作为示例。</p>
<h3 id="1-修改网站相关信息"><a href="#1-修改网站相关信息" class="headerlink" title="1). 修改网站相关信息"></a>1). 修改网站相关信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: 新日三少的博客 </div><div class="line">subtitle: Big big pig   </div><div class="line">description: Love Coding,Enjoy Life</div><div class="line">author: 新日三少</div><div class="line">language: zh-CN      <span class="comment">#themes主题文件夹下的languages下面有很多语言可选</span></div><div class="line">timezone: Asia/Shanghai</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：每一项的填写，其:后面都要保留一个空格，下同。</p>
<h3 id="2-配置统一资源定位符（个人域名）"><a href="#2-配置统一资源定位符（个人域名）" class="headerlink" title="2). 配置统一资源定位符（个人域名）"></a>2). 配置统一资源定位符（个人域名）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url: http://www.wangxinri.cn</div></pre></td></tr></table></figure>
<p>对于root（根目录）、permalink（永久链接）、permalink_defaults（默认永久链接）等其他信息保持默认。<br>如无个人域名，无需修改这一项。</p>
<h3 id="3-配置部署"><a href="#3-配置部署" class="headerlink" title="3). 配置部署"></a>3). 配置部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo: https://github.com/xinrisanshao/xinrisanshao.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>其中repo项是之前Github上创建好的仓库的地址，，可以通过如下图所示的方式得到：</p>
<p><img src="http://ou6yob3zd.bkt.clouddn.com/20170806151918.png" alt=""></p>
<h2 id="3-本地发布博客"><a href="#3-本地发布博客" class="headerlink" title="3.  本地发布博客"></a>3.  本地发布博客</h2><p>接下来，在网站中建立第一篇文章，<strong>打开终端，进入到博客文件夹根目录</strong>，这里是E:Github/hexo，然后输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"文章标题"</span></div></pre></td></tr></table></figure>
<p>我们可以在本地博客文件夹source-&gt;_post文件夹下看到我们新建的markdown文件。通过Markdown编辑器对我们文章进行编辑，我这采用的是Markdownpad2编辑器。</p>
<p>MarkdownPad2：<a href="http://download.csdn.net/detail/rentongtmd/8333707" target="_blank" rel="external">点击下载</a></p>
<p>Markdown语法：<a href="http://www.markdown.cn/" target="_blank" rel="external">Markdown中文网</a></p>
<p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>接下来,我们进行本地发布：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>执行完后，打开浏览器，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:4000/</div></pre></td></tr></table></figure></p>
<p>我们可以在浏览器端看到我们搭建好的博客和发布的文章，如果访问失败，可能端口被占用，更换端口 hexo server -p 5000 ,将默认4000端口换成5000。<br><img src="http://ou6yob3zd.bkt.clouddn.com/20170806161241.png" alt=""></p>
<h2 id="4-发布博客至github仓库"><a href="#4-发布博客至github仓库" class="headerlink" title="4. 发布博客至github仓库"></a>4. 发布博客至github仓库</h2><p>但是毕竟我们目前发布的博客只有本机看得到，怎么让其他人看到我们写的博客呢？这时候我们来看看博客的部署。</p>
<p>打开终端，进入到博客文件夹根目录，这里还是<strong>E:Github/hexo</strong>，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>输入我们的网址：<a href="http://xinrisanshao.github.io" target="_blank" rel="external">xinrisanshao.github.io</a> ,即可访问博客了。</p>
<p>此时查看github中的仓库，发现我们博客文件夹根目录中的<strong>public文件夹</strong>里面的文件已经发布到仓库中了。</p>
<p>此时搭建的博客还只是入门，外观确实一般般，接下来将更进一步，比如如何更换主题、如何管理博客等等。</p>
<p>好累啊，先休息下，果然还是写博客最累啊。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;之前一直是在有道云上做一些笔记的，上周末在网上看到了一些别人搭建的个人博客，顿时感兴趣起来，然后自己就瞎捣鼓了几天，最终搭建成功了，哈哈。在这个过程中发现，搭建一个网站还是比较简单的，难的是管理博客，更难的是写博客！！！&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.wangxinri.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.wangxinri.cn/tags/hexo/"/>
    
      <category term="github" scheme="http://www.wangxinri.cn/tags/github/"/>
    
  </entry>
  
</feed>
