{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar1.gif","path":"images/avatar1.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1501725144603},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1501725144603},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1501725144603},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1501725144605},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1501725144605},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1501725144605},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1501725144606},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1501725144606},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1501725144606},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1501725144606},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1501725144607},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1501725144607},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1501725144607},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1501725144605},{"_id":"source/_posts/Machine Learning.md","hash":"17e241ce045725e5e1982e95616ec90cabed6829","modified":1503363991243},{"_id":"source/_posts/Words as Vectors.md","hash":"2a5817f3b13b827fefd3df2d4e0d9ecaecfd12f2","modified":1502437370601},{"_id":"themes/next/package.json","hash":"55305ae40690c059cb9140900eb20f9e7f3a7707","modified":1501725144631},{"_id":"source/_posts/个人总结之排序算法.md","hash":"40a2908057899d1eb4e7cbd0b3eea263ee1d7cab","modified":1504009469536},{"_id":"themes/next/_config.yml","hash":"97de95c7e536b6fbffcf046cca35aa914f61fca3","modified":1502800037283},{"_id":"source/_posts/样先.md","hash":"0290b9fbd81f8f634ae06678adeddd356f200d9d","modified":1503364025549},{"_id":"source/tags/index.md","hash":"849f45b782658f74ffbaf2efef4da536e5b5bae0","modified":1501747268275},{"_id":"source/categories/index.md","hash":"708932a56a5845cadce978e617367a0dfb450f47","modified":1501747252782},{"_id":"source/about/index.md","hash":"798202b2fbd1a4ea1df3d3b7e53de0d077865534","modified":1502010358679},{"_id":"source/_posts/github Pages + Hexo搭建个人博客（一）  初级篇.md","hash":"4734945a130ab40230f4cbe855271362cc8e97b1","modified":1502081879173},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1501725144604},{"_id":"source/_posts/github Pages + Hexo搭建个人博客（二）  提升篇.md","hash":"c4d5e190ab7ef9b60396ca6c7b470fe4979c04bf","modified":1504494586386},{"_id":"source/photo/index.md","hash":"2f8ab068b6c4b4515643474e37c1d4b10e5f8a09","modified":1502798686960},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1501725144608},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1501725144608},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1501725144608},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1501725144608},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1501725144608},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1501725144609},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1501725144609},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1501725144610},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1501725144610},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1501725144609},{"_id":"themes/next/languages/zh-Hans.yml","hash":"7a14c961e7008dd297eae06fa14d8f346acaf378","modified":1502798098608},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1501725144611},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1501725144611},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"55091b1aab0b472d3f3e239c8d93306c751e4c1c","modified":1501725144605},{"_id":"source/_posts/剑指offer.md","hash":"45c1e30265db96cd9ccfd0a138eb1e46fa1ddef4","modified":1503748962769},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"3178cadcec94bfad651bdf320d83946b4e0ac932","modified":1501725144604},{"_id":"themes/next/layout/_layout.swig","hash":"d53d896255e5f3131d131e1d40d53e7ef52bd476","modified":1501726447933},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1501725144630},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1501725144630},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1501725144630},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1501725144631},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1501725144631},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1501725144631},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1501725144632},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1501725144631},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1501725144632},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1501725144713},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501725144662},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1501725144611},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1501725144612},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"396feef13c2f0a2241d70b28a304e6583d3d32f8","modified":1501725144612},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1501725144613},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1501725144614},{"_id":"themes/next/layout/_macro/post.swig","hash":"26e7a82306d9acafa253129d7a424acd59ac39a5","modified":1501727280039},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1501725144714},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1501725144714},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1501725144615},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a229b569743555215a4f2561997ad496d81e938","modified":1501725144615},{"_id":"themes/next/layout/_partials/head.swig","hash":"5de59a250fbbae89142ad7c4b81fbce79a5d1034","modified":1502453279509},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1501725144617},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1501725144617},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1501725144617},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1501725144618},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1501725144620},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1501725144620},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1501725144621},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1501725144627},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1501725144627},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1501725144630},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1501725144627},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1501725144627},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1501725144633},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1501725144633},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1501725144633},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1501725144633},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1501725144635},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1501725144635},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1501725144635},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1501725144628},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1501725144628},{"_id":"themes/next/layout/_partials/footer.swig","hash":"800a9d2e3fa5255b5503bb9cbb642cd625c46cd0","modified":1502933674970},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a1a1430d942396d89503f449f10c010f33573077","modified":1501748169967},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1501725144662},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1501725144662},{"_id":"themes/next/source/images/alipay.jpg","hash":"9302886ec2ab2e8b37bdbe56500fa254fdc12130","modified":1501725144663},{"_id":"themes/next/source/images/avatar.gif","hash":"fb1ffdbf506b0899c8e034301c4607bb86060d9d","modified":1501725144663},{"_id":"themes/next/source/images/avatar.jpg","hash":"ab206e80ecb5e80dad727c257354317c4372b98e","modified":1501725144663},{"_id":"themes/next/source/images/avatar1.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501725144664},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1501725144664},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1501725144664},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1501725144664},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1501725144665},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1501725144665},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1501725144665},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501725144666},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1501725144665},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501725144666},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1501725144666},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501725144666},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1501725144666},{"_id":"themes/next/layout/_macro/reward.swig","hash":"e61758ce836cf9e546e0e626757a74e53b5bd07f","modified":1501737928937},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501725144621},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501725144621},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501725144660},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501725144654},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501725144654},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501725144654},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"ef74102d3f35bca552eb09337ff37b2df218f01f","modified":1501725144667},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1501725144617},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1501725144617},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1501725144618},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1501725144618},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1501725144619},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1501725144619},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1501725144619},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1501725144618},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1501725144619},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1501725144621},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1501725144622},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1501725144622},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1501725144622},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1501725144622},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1501725144622},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1501725144623},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1501725144623},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1501725144623},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1501725144624},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1501725144623},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1501725144624},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1501725144624},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"be2aaeb8f05979e2ba501248480d5294256d61f2","modified":1501725144625},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1501725144625},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1501725144625},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1501725144626},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1501725144625},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1501725144620},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1501725144626},{"_id":"themes/next/source/images/favicon.ico","hash":"4774eaead8875445645b8f4688f218da73156382","modified":1501727628652},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1501725144629},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1501725144629},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1501725144629},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1501725144630},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1501725144660},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"f7c0fbebfc56e194cb76574ae3d682e6ea5b26f6","modified":1503378437662},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1501725144654},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"d8d924a48b7bc20440d8b1e5ad3a64400538b946","modified":1504491171025},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1501725144667},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c016b15d1f340d21a8b8e2077dd3ee5b31ea1c49","modified":1502174006684},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1501725144667},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ad83d5e453501f7c16785662d8803792aacd22a","modified":1501725144668},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1501725144668},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1501725144669},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1501725144669},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1501726198681},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1501725144668},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1501725144669},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1501725144670},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1501725144670},{"_id":"themes/next/source/js/src/utils.js","hash":"e7465a22b536ed15006a5f5556d9a4e633f6bd71","modified":1501725144670},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501725144676},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1501725144686},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1501725144686},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1501725144687},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1501725144686},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1501725144680},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1501725144688},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1501725144688},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1501725144689},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1501725144688},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1501725144689},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1501725144654},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1501725144660},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501725144702},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501725144702},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501725144702},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501725144702},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501725144703},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501725144702},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501725144703},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501725144703},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501725144703},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501725144704},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501725144704},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501725144704},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1501725144701},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1501725144704},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501725144703},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1501725144700},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1501725144700},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1501725144701},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1501725144700},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1501725144701},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1501725144705},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1501725144705},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1501725144705},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1501725144710},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1501725144699},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1501725144712},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1501725144713},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1501725144713},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1501725144710},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501725144679},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1501725144629},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1501725144628},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1501725144636},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1501725144636},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1501725144636},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d68bdfcdb9d9e0bf60ed9a2df88e0b55cbfcc1e6","modified":1501725144636},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1501725144647},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1501725144636},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1501725144641},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1501725144651},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1501725144652},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1501725144652},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1501725144699},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1501725144651},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1501725144655},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1501725144652},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1501725144655},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1501725144656},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1501725144652},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1501725144656},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1501725144656},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1501725144657},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1501725144657},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1501725144658},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1501725144656},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1501725144655},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1501725144658},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1501725144658},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1501725144659},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1501725144659},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1501725144660},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1501725144659},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1501725144669},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1501725144659},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1501725144659},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501725144680},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1501725144673},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501725144680},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501725144680},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501725144682},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501725144682},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501725144683},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1501725144684},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1501725144685},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1501725144685},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1501725144674},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1501725144676},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1501725144687},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501725144687},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1501725144690},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1501725144690},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1501725144690},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1501725144709},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1501725144710},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1501725144674},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1501725144712},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501725144698},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501725144698},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1501725144637},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1501725144637},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1501725144638},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1501725144639},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1501725144637},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1501725144639},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"ada33db53f46c080133c17780cbdd10cf37b2777","modified":1504491407280},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1501725144641},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1501725144638},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1501725144637},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1501725144638},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"c607db489cabe130887ed0e031a82bcbb62bfd65","modified":1504494480864},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1501725144642},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"452d9bc5ece8212df219a470c4991d49a843c3cf","modified":1504489987860},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"d82732ba94562c45728aa753c3150eea8c03494f","modified":1504491745291},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3d5d8bb463251b990b47ae91462c25e9c878be46","modified":1504494417781},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1501725144639},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1501725144643},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1501725144638},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1501725144642},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1501725144643},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1501725144644},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1501725144643},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1501725144644},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1501725144644},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1501725144645},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1501725144643},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1501725144645},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1501725144645},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"2b3e1039a58a79f7da5c72542263413782b37fc9","modified":1501726408391},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1501725144645},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1501725144646},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1501725144646},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1501725144643},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1501725144645},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1501725144646},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1501725144648},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1501725144646},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1501725144649},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1501725144648},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1501725144648},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1501725144650},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1501725144649},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1501725144649},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1501725144650},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1501725144650},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1501725144650},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1501725144649},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1501725144650},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1501725144651},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1501725144651},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1501725144658},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1501725144657},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1501725144657},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501725144671},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501725144672},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501725144672},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501725144673},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1501725144646},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501725144683},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"88ff693cc0fe6b37d437894c72e95090d016f278","modified":1504494623350},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1501725144683},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1501725144683},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1501725144684},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1501725144684},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501725144691},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1501725144684},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501725144697},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501725144694},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1501725144679},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1501725144709},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1501725144696},{"_id":"public/baidusitemap.xml","hash":"a5c025ff0770a8d28c85ab0b0babeac175f0415d","modified":1504494652131},{"_id":"public/atom.xml","hash":"0c62562dfbe470d348999bf49f17089ce4091bff","modified":1504494652131},{"_id":"public/sitemap.xml","hash":"e80870b086c8daa73990fa506d7162172c190edb","modified":1504494652131},{"_id":"public/search.xml","hash":"a576c41ba1582c9775a1acfc50ead936d4c27cfc","modified":1504494652119},{"_id":"public/tags/index.html","hash":"28f79de8f8d2d4b762802edb6c0d9dac27b1a9d1","modified":1504491257990},{"_id":"public/categories/index.html","hash":"a60089ba5fd0cba3bd264b2f270d153533137817","modified":1504491257990},{"_id":"public/about/index.html","hash":"e3c8b3c61a7c4610a1f7a70ec106785c354df872","modified":1504491257990},{"_id":"public/photo/index.html","hash":"d4654b44580242c3a7b03d02396e55843a4aa941","modified":1504491257991},{"_id":"public/2017/08/21/个人总结之排序算法/index.html","hash":"c0e14eb51baededf3a427e28820efac140e0e521","modified":1504491257991},{"_id":"public/2017/08/19/剑指offer/index.html","hash":"cb1269897b96395ddacc8e719a5fea915bb8e892","modified":1504491257991},{"_id":"public/2017/08/18/Machine Learning/index.html","hash":"56652ae47c78f23037c53b76539f2d73cc857da0","modified":1504491257991},{"_id":"public/2017/08/12/样先/index.html","hash":"56059324f4648788ca8562d0372910ee1ba9feba","modified":1504491257991},{"_id":"public/2017/08/11/Words as Vectors/index.html","hash":"b1ffb2be7caae3cac8cd824fb8fdad8b9286da50","modified":1504491257991},{"_id":"public/2017/08/07/github Pages + Hexo搭建个人博客（二）  提升篇/index.html","hash":"c6923e9e414dceb94bc81750d63284158caf9e43","modified":1504494652134},{"_id":"public/2017/08/06/github Pages + Hexo搭建个人博客（一）  初级篇/index.html","hash":"1ad520bbf59bc068081552b3496ffd802a48d8e0","modified":1504491257994},{"_id":"public/archives/index.html","hash":"cd1a3a4b03986bbfd8fbc5712b27cd0945dc2a23","modified":1504491257991},{"_id":"public/archives/2017/index.html","hash":"17368ccf58fb9814f6dd6f4534798fe47d8b84ed","modified":1504491257991},{"_id":"public/archives/2017/08/index.html","hash":"c1634676effacfe7441bd177df02f84dba2a9bf0","modified":1504491257991},{"_id":"public/categories/算法/index.html","hash":"158445f20372e38d927cbc6ae3c377b5ce1b6a81","modified":1504491257991},{"_id":"public/categories/word2vec/index.html","hash":"7ae8523ed7d9ff9256eef2c4108fcb8b3b3acbd3","modified":1504491257993},{"_id":"public/categories/兄弟/index.html","hash":"7a3f81484595f97ae2d2cdbd3b05478f22fbf1a6","modified":1504491257993},{"_id":"public/categories/hexo/index.html","hash":"c5e99328ba5a05877aa5d7156455a3d440558b6c","modified":1504491257993},{"_id":"public/categories/刷题/index.html","hash":"9cd27a8f6cfcba2a6ac3b54fd47201cf50e94a9a","modified":1504491257993},{"_id":"public/index.html","hash":"889b16423fb55bc1f5d26fdd069408e1fc137190","modified":1504494652134},{"_id":"public/tags/排序/index.html","hash":"2efb78b7204c2d4cdaeaaae2fabc76d4791c7d76","modified":1504491257994},{"_id":"public/tags/编程/index.html","hash":"8fe9701a54796da01f0a842be3d90d6cab79e2ab","modified":1504491257994},{"_id":"public/tags/skip-gram/index.html","hash":"c5a9935cb4a659dced41532d1af57748b90cabe4","modified":1504491257994},{"_id":"public/tags/CBOW/index.html","hash":"888236662c8bc880189971def998edb9377b7c82","modified":1504491257994},{"_id":"public/tags/兄弟/index.html","hash":"e49f183ea8d9ef8c10115c7ba2430002058a8e10","modified":1504491257994},{"_id":"public/tags/朋友/index.html","hash":"4800277e37298e7cba5a07266af216969352e0e2","modified":1504491257994},{"_id":"public/tags/hexo/index.html","hash":"ae542c8c3fedfdfbb2b6c5fa6c1d17b2de4a63b3","modified":1504491257994},{"_id":"public/tags/github/index.html","hash":"cc016bce865f650a924067d1374ffeaa2880368e","modified":1504491257994},{"_id":"public/tags/剑指offer/index.html","hash":"25abcc86de77c0d4387d668e0c6a881cbcae9e8e","modified":1504491257994},{"_id":"public/tags/刷题/index.html","hash":"37ebcb4354d3d9b400e2a8d4a54602519dd2b6a6","modified":1504491257994},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1504008969016},{"_id":"public/images/alipay.jpg","hash":"9302886ec2ab2e8b37bdbe56500fa254fdc12130","modified":1504008969016},{"_id":"public/images/avatar.jpg","hash":"ab206e80ecb5e80dad727c257354317c4372b98e","modified":1504008969016},{"_id":"public/images/avatar.gif","hash":"fb1ffdbf506b0899c8e034301c4607bb86060d9d","modified":1504008969016},{"_id":"public/images/avatar1.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1504008969016},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1504008969016},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1504008969016},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1504008969016},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1504008969016},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1504008969016},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1504008969016},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504008969016},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1504008969016},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504008969016},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1504008969016},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1504008969017},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1504008969017},{"_id":"public/images/wechatpay.jpg","hash":"ef74102d3f35bca552eb09337ff37b2df218f01f","modified":1504008969017},{"_id":"public/images/favicon.ico","hash":"4774eaead8875445645b8f4688f218da73156382","modified":1504008969017},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1504008969017},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1504008969017},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1504008969017},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1504008969017},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1504008969017},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1504008969017},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1504008969017},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1504008969017},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1504008969017},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1504008969017},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1504008969017},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1504008969017},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1504008969017},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1504008969017},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1504008972811},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1504008972817},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1504008972825},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1504008972826},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1504008972826},{"_id":"public/js/src/bootstrap.js","hash":"03190d70e2347a0b29d185295445c6762a4455e8","modified":1504008972826},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1504008972826},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1504008972826},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1504008972826},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1504008972826},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1504008972826},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1504008972826},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1504008972826},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1504008972826},{"_id":"public/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1504008972826},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1504008972826},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1504008972826},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1504008972826},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1504008972826},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1504008972826},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1504008972826},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1504008972826},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1504008972827},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1504008972827},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1504008972827},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1504008972827},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1504008972827},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1504008972827},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1504008972827},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1504008972827},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1504008972827},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1504008972827},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1504008972827},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1504008972827},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1504008972827},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1504008972827},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1504008972827},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1504008972827},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1504008972827},{"_id":"public/css/main.css","hash":"d396d56aa47075ab340433d2657f81e425fa24c0","modified":1504008972827},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1504008972827},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1504008972827},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1504008972827},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1504008972827},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1504008972827},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1504008972827},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1504008972827},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1504008972828},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1504008972828},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1504008972828},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1504008972828},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1504008972828},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1504008972828},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1504008972828},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1504008972829},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1504008972829},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1504008972829},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1504008972829},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1504008972829},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1504008972830},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1504008972830},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1504008972878}],"Category":[{"name":"算法","_id":"cj6xk3rle0003h0ix514af82k"},{"name":"word2vec","_id":"cj6xk3rlo0006h0ix4kx6qxct"},{"name":"兄弟","_id":"cj6xk3rlp0009h0ix98jd1gv2"},{"name":"hexo","_id":"cj6xk3rnd000qh0ix4t0poisi"},{"name":"刷题","_id":"cj6xk3rnm000yh0ixb74ohfwv"}],"Data":[],"Page":[{"title":"tags","date":"2017-08-01T02:20:57.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-01 10:20:57\ntype: tags\ncomments: false\n---\n","updated":"2017-08-03T08:01:08.275Z","path":"tags/index.html","layout":"page","_id":"cj6xk3rn3000mh0ixilywe7hk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-08-01T02:20:50.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-01 10:20:50\ntype: categories\ncomments: false\n---\n","updated":"2017-08-03T08:00:52.782Z","path":"categories/index.html","layout":"page","_id":"cj6xk3rn9000oh0ix1qwqbpem","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-08-01T02:21:04.000Z","type":"about","_content":"## 王新日\n---\nBig big pig\nQQ:415595161\n以后再补充吧\n\n我的歌单\n(周杰伦的没版权啊，只能许嵩了)\n<div id=\"music163player\">\n   <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"//music.163.com/outchain/player?type=0&id=866649915&auto=0&height=430\"></iframe>\n</div>","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-08-01 10:21:04\ntype: about\n---\n## 王新日\n---\nBig big pig\nQQ:415595161\n以后再补充吧\n\n我的歌单\n(周杰伦的没版权啊，只能许嵩了)\n<div id=\"music163player\">\n   <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"//music.163.com/outchain/player?type=0&id=866649915&auto=0&height=430\"></iframe>\n</div>","updated":"2017-08-06T09:05:58.679Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj6xk3rnf000sh0ix0e4bi64i","content":"<h2 id=\"王新日\"><a href=\"#王新日\" class=\"headerlink\" title=\"王新日\"></a>王新日</h2><hr>\n<p>Big big pig<br>QQ:415595161<br>以后再补充吧</p>\n<p>我的歌单<br>(周杰伦的没版权啊，只能许嵩了)</p>\n<div id=\"music163player\"><br>   <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"//music.163.com/outchain/player?type=0&id=866649915&auto=0&height=430\"></iframe><br></div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"王新日\"><a href=\"#王新日\" class=\"headerlink\" title=\"王新日\"></a>王新日</h2><hr>\n<p>Big big pig<br>QQ:415595161<br>以后再补充吧</p>\n<p>我的歌单<br>(周杰伦的没版权啊，只能许嵩了)</p>\n<div id=\"music163player\"><br>   <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"450\" src=\"//music.163.com/outchain/player?type=0&id=866649915&auto=0&height=430\"></iframe><br></div>"},{"title":"photo","date":"2017-08-15T11:49:43.000Z","type":"photo","comments":0,"_content":"","source":"photo/index.md","raw":"---\ntitle: photo\ndate: 2017-08-15 19:49:43\ntype: photo\ncomments: false\n---\n","updated":"2017-08-15T12:04:46.960Z","path":"photo/index.html","layout":"page","_id":"cj6xk3rni000uh0ixztxk3gq1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"# 机器学习课程\n<!--more-->\n## 一、机器学习的动机与应用\n监督学习\n\n无监督学习与聚类算法\n\n## 二、监督学习应用：梯度下降\n\n### 1.线性回归\n\n### 2.梯度下降\n\n### 3.正规方程组\n","source":"_posts/Machine Learning.md","raw":"# 机器学习课程\n<!--more-->\n## 一、机器学习的动机与应用\n监督学习\n\n无监督学习与聚类算法\n\n## 二、监督学习应用：梯度下降\n\n### 1.线性回归\n\n### 2.梯度下降\n\n### 3.正规方程组\n","slug":"Machine Learning","published":1,"date":"2017-08-18T01:56:53.389Z","updated":"2017-08-22T01:06:31.243Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6xk3rl40000h0ixmqm10hxr","content":"<h1 id=\"机器学习课程\"><a href=\"#机器学习课程\" class=\"headerlink\" title=\"机器学习课程\"></a>机器学习课程</h1><a id=\"more\"></a>\n<h2 id=\"一、机器学习的动机与应用\"><a href=\"#一、机器学习的动机与应用\" class=\"headerlink\" title=\"一、机器学习的动机与应用\"></a>一、机器学习的动机与应用</h2><p>监督学习</p>\n<p>无监督学习与聚类算法</p>\n<h2 id=\"二、监督学习应用：梯度下降\"><a href=\"#二、监督学习应用：梯度下降\" class=\"headerlink\" title=\"二、监督学习应用：梯度下降\"></a>二、监督学习应用：梯度下降</h2><h3 id=\"1-线性回归\"><a href=\"#1-线性回归\" class=\"headerlink\" title=\"1.线性回归\"></a>1.线性回归</h3><h3 id=\"2-梯度下降\"><a href=\"#2-梯度下降\" class=\"headerlink\" title=\"2.梯度下降\"></a>2.梯度下降</h3><h3 id=\"3-正规方程组\"><a href=\"#3-正规方程组\" class=\"headerlink\" title=\"3.正规方程组\"></a>3.正规方程组</h3>","site":{"data":{}},"excerpt":"<h1 id=\"机器学习课程\"><a href=\"#机器学习课程\" class=\"headerlink\" title=\"机器学习课程\"></a>机器学习课程</h1>","more":"<h2 id=\"一、机器学习的动机与应用\"><a href=\"#一、机器学习的动机与应用\" class=\"headerlink\" title=\"一、机器学习的动机与应用\"></a>一、机器学习的动机与应用</h2><p>监督学习</p>\n<p>无监督学习与聚类算法</p>\n<h2 id=\"二、监督学习应用：梯度下降\"><a href=\"#二、监督学习应用：梯度下降\" class=\"headerlink\" title=\"二、监督学习应用：梯度下降\"></a>二、监督学习应用：梯度下降</h2><h3 id=\"1-线性回归\"><a href=\"#1-线性回归\" class=\"headerlink\" title=\"1.线性回归\"></a>1.线性回归</h3><h3 id=\"2-梯度下降\"><a href=\"#2-梯度下降\" class=\"headerlink\" title=\"2.梯度下降\"></a>2.梯度下降</h3><h3 id=\"3-正规方程组\"><a href=\"#3-正规方程组\" class=\"headerlink\" title=\"3.正规方程组\"></a>3.正规方程组</h3>"},{"title":"个人总结之排序算法","date":"2017-08-21T11:30:25.000Z","update":null,"comments":1,"_content":"\n# 前言\n回顾之前学习的各种排序算法，从初级到高级，包括选择排序，冒泡排序，插入排序，希尔排序，快速排序，归并排序，堆排序等等，持续更新中...\n<!--more-->\n\n**注：**这里实现的算法都是递增排序，也就是从小到大排序。\n\n## 初级排序算法\n\n### 1.选择排序\n**思想：**首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。\n\n```java\npublic static int [] sort(int a[],int length){    //选择排序\n    for(int i=0;i<length;i++){\n        int minIndex = i; //初始化最小元素的索引\n        for(int j=i+1;j<length;j++){\n            if(a[minIndex]>a[j]){\n                minIndex = j;  //找到最小元素的索引\n            }\n        }\n        int tem = a[i];\n        a[i] = a[minIndex];\n        a[minIndex] = tem;\n    }\n    return a;\n}\n```\n### 2.直接插入排序\n**思想：** 每一步将一个待排序的记录，插入到前面应排好序的有序序列中去，直到查完所有元素为止。\n![](http://ou6yob3zd.bkt.clouddn.com/20170821195323.png)\n\n**代码：**\n\n第一种：从后往前依次比较前面排好序的有序序列，如果插入元素较小时，交换，j- -,继续比较。\n```java\npublic static int [] sort(int a[],int length){\n\tfor(int i=1;i<a.length;i++){\n\t\tfor(int j=i;j>0&&a[j]<a[j-1];j--){  \n\t\t\tint tem = a[j-1];\n\t\t\ta[j-1] = a[j];\n\t\t\ta[j] = tem;\n\t\t}\n\t}\n\treturn a;\n}\n```\n\n第二种：不需要交换的直接插入排序，将内循环中较大的元素都向右移动而不总是交换两个元素，从而提高效率。\n```java\npublic static int [] sort(int a[],int length){    //不需要交换的插入排序\n\tfor(int i=1;i<a.length;i++){\n\t\tint tem = a[i];  //待插入的元素\n\t\tint j;\n\t\tfor(j=i-1;j>=0&&tem<a[j];j--){\n\t\t\ta[j+1] = a[j];   //元素后移,直到找到待插入的元素的位置\n\t\t}\n\t\ta[j+1] = tem;  //将带插入元素插入到查找到的位置\n\t}\n\treturn a;\n}\n```\n\n第三种：此外还可以通过增加哨兵的形式，在插入排序的实现中先找出最小的元素并将其置于数组的最左边，这样就能去掉内循环的判断条件j>0。这是一种常见的规避边界测试的方法，能够省略判断条件的元素通常被称为哨兵。\n\n```java\npublic static int [] sort(int a[],int length){\n\tint minIndex =0;\n\tfor(int i=1;i<length;i++){\n\t\tif(a[minIndex]>a[i]){\n\t\t\tminIndex = i;\n\t\t}\n\t}\n\tint tem = a[0];\n\ta[0] = a[minIndex];\n\ta[minIndex] = tem;\n\tfor(int i=2;i<length;i++){\n\t\ttem = a[i];\n\t\tint j;\n\t\tfor(j=i-1;tem<a[j];j--){\n\t\t\ta[j+1] = a[j];\n\t\t}\n\t\ta[j+1] = tem;\n\t}\n\treturn a;\n}\n```\n\n### 3.希尔排序\n\n**思想：**希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n简单插入排序很循规蹈矩，不管数组分布是怎么样的，依然一步一步的对元素进行比较，移动，插入，比如[5,4,3,2,1,0]这种倒序序列，数组末端的0要回到首位置很是费劲，比较和移动元素均需n-1次。而希尔排序在数组中采用跳跃式分组的策略，通过某个增量将数组元素划分为若干组，然后分组进行插入排序，随后逐步缩小增量，继续按组进行插入排序操作，直至增量为1。希尔排序通过这种策略使得整个数组在初始阶段达到从宏观上看基本有序，小的基本在前，大的基本在后。然后缩小增量，到增量为1时，其实多数情况下只需微调即可，不会涉及过多的数据移动。\n\n我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2...1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170821203528.png)\n\n**代码：**\n```java\npublic static int[] sort(int a[],int length){\n\tint h = length/2; //初始增量\n\twhile(h>=1){\n\t\t//将数组变为h有序\n\t\tfor(int i=h;i<length;i++) {\n\t\t\t//将a[i]插入到a[i-h],a[i-2*h],a[i-3*h]...之中\n\t\t\tfor(int j=i;j>=h&&a[j]<a[j-h];j-=h){\n\t\t\t\tint tem = a[j-h];\n\t\t\t\ta[j-h] = a[j];\n\t\t\t\ta[j] = tem;\n\t\t\t}\n\t\t}\n\t\th = h/2; //每次排完序后,增量减少\n\t}\t\n\treturn a;\n}\n```\n\n参考：[dreamcatcher-cx](http://www.cnblogs.com/chengxiao/p/6104371.html)\n\n## 归并排序\n\n### 简介\n\n归并排序，即将两个有序的数组归并成一个更大的有序数组，要将一个数组排序，可以（递归的）先将它分成两半分别排序，然后将结果归并起来。归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需的时间和NlogN成正比；它的主要缺点则是它所需的额外空间和N成正比。\n\n### 2-路归并排序\n\n**2-路归并排序:**假设初始序列含有n个记录，则可看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到n/2（整数值）个长度为2或1的有序子序列；在两两归并，......，如此重复，直至得到一个长度为n的有序序列为止，这种排序方法称为2-路归并排序。 如下为一个典型的例子。 \n\n**该图显示的就是循环2-路归并排序算法的过程：**\n![](http://ou6yob3zd.bkt.clouddn.com/20170827211130.png)\n\n2-路归并排序中的核心操作是将一维数组中前后相邻的两个有序序列归并为一个有序序列。\n\n**递归算法：自顶向下的2-路归并排序中归并结果的轨迹：**\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170827220032.png)\n\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170827212542.png)\n\n**循环算法：自底向上的2-路归并排序中归并结果的轨迹：**\n![](http://ou6yob3zd.bkt.clouddn.com/20170827215932.png)\n\n### 代码\n\n```java\npublic class Mergesort {  //2-路归并排序\n\tpublic static int [] aux;  //辅助数组\n\tpublic static void merge(int a[],int lo,int mid,int hi){   //核心算法\n\t\t//将a[lo..mid]和a[mid+1,hi](已有序)归并 \n\t\tint i = lo, j = mid+1;\n\t\tfor(int k = lo;k<=hi;k++){ //将a[lo..hi]复制到aux[lo..hi]\n\t\t\taux[k] = a[k];\n\t\t}\n\t\tfor(int k=lo;k<=hi;k++){\n\t\t\tif(i>mid) a[k] = aux[j++];  //左半边用尽，取右半边的元素复制到a中\n\t\t\telse if(j>hi) a[k] = aux[i++];   //右半边用尽，取左半边的元素复制到a中\n\t\t\telse if(aux[i]<aux[j]) a[k] = aux[i++];  //左半边元素小于右半边元素，取左半边元素复制到a中\n\t\t\telse a[k] = aux[j++]; //右半边元素小于左半边元素，取右半边元素复制到a中\n\t\t}\n\t}\n\tpublic static void Mergesort(int a[]){   //二路归并递归算法\n\t\taux = new int [a.length];   //一次性分配空间\n\t\tsort(a,0,a.length-1);\n\t}\n\tprivate static void sort(int[] a, int lo, int hi) {\n\t\t// 将数组a[lo..hi]排序\n\t\tif(lo>=hi) return ;\n\t\tint mid = lo + (hi-lo)/2;\n\t\tsort(a,lo,mid);     //递归将左半边排序\n\t\tsort(a,mid+1,hi);   //递归将右半边排序\n\t\tmerge(a, lo, mid, hi);  //归并结果\n\t}\n\t\n\tpublic static void Mergesort1(int [] a) {  //二路归并非递归算法\n\t\t//进行lgN次两两归并\n\t\tint N = a.length;\n\t\taux = new int [N];\n\t\tfor(int sz = 1; sz<N;sz = 2*sz){  //sz的子数组大小\n\t\t\tfor(int lo =0;lo<N-sz; lo+=2*sz){  //子数组的索引\n\t\t\t\tmerge(a, lo, lo+sz-1, Math.max(lo+2*sz-1, N-1));\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint a[] = {2,3,5,1,4,0,7,6};\n\t\t//Mergesort(a);  //调用2-路归并递归排序函数\n\t\tMergesort1(a);  //调用2-路归并非递归排序函数\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tSystem.out.print(a[i]+\" \");\n\t\t}\n\t}\n}\n\n```\n\n### 一些改进\n\n1.对小规模子数组使用插入排序，因为递归会使小规模问题中方法的调用过于频繁，所以改进对他们的处理方法就能改进整个算法。使用插入排序处理小规模子数组（比如长度小于15）。\n\n2.测试数组是否已经有序，我们可以添加一个判断条件，如果a[mid]小于等于a[mid+1]，此时前半部分有序数组最后一个数小于后半部分有序数组的第一个数，我们就认为数组已经是有序并跳过merge()方法。这个改动不影响排序的递归调用。\n\n3.不将元素复制到辅助数组（暂时不太明白）。\n\n## 快速排序\n\n### 简介\n\n快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。在第一种情况中，递归调用发生在处理整个数组之前；在第二种情况中，递归调用发生在处理整个数组之后。在归并排序中，一个数组被等分成两半；在快速排序中，切分的位置取决于数组的内容。\n\n### 关键算法\n\n该方法的关键在于切分，这个过程使得数组满足下面的三个条件：\n\n1.对于某个j,a[j]已经排定；\n\n2.a[lo]到a[j-1]中的所有元素都不大于a[j]；\n\n3.a[j+1]到a[hi]中的所有元素都不小于a[j]。\n\n### 代码\n\n```java\npublic class QuickSort {\n\tpublic static int[] quicksort(int a[]){\n\t\tsort(a,0,a.length-1);\n\t\treturn a;\n\t}\n\tprivate static void sort(int[] a, int lo, int hi) {\n\t\tif(hi<=lo) return ;\n\t\tint j=partition(a,lo,hi);   //切分\n\t\t//第j个位置已经在它所在的排好序的位置\n\t\tsort(a,lo,j-1);\n\t\tsort(a,j+1,hi);\n\t}\n\tprivate static int partition(int[] a, int lo, int hi) {\n\t    int part = a[lo];   //切分元素\n\t    int i = lo,j=hi+1;  //左右扫描指针\n\t    int tem;\n\t    while(true){\n\t    \t//扫描左右，检查扫描是否结束并交换元素\n\t    \twhile(a[++i]<part) {  //从左到右(第一个元素除外)找到大于等于part的元素\n\t    \t\tif(i==hi) break;    \n\t    \t}\n\t    \twhile(a[--j]>part){  //从右到左找到小于等于part的元素\n\t    \t\tif(j==lo) break;\n\t    \t}\n\t    \tif(i>=j) break;\n\t    \ttem = a[i];\n\t    \ta[i] = a[j];\n\t    \ta[j] = tem;\n\t    }\n\t    tem = a[lo];   //将part=a[j]放入正确的位置\n    \ta[lo] = a[j];\n    \ta[j] = tem;\n\t\treturn j;\n\t}\n\tpublic static void main(String[] args) {\n\t\tint []a = {4,5,4,6,1,3};\n\t\ta = quicksort(a);\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tSystem.out.print(a[i]+\" \");\n\t\t}\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/个人总结之排序算法.md","raw":"---\ntitle: 个人总结之排序算法\ndate: 2017-08-21 19:30:25\nupdate:\ntags: [排序,编程]\ncategories: 算法\ncomments: true\n---\n\n# 前言\n回顾之前学习的各种排序算法，从初级到高级，包括选择排序，冒泡排序，插入排序，希尔排序，快速排序，归并排序，堆排序等等，持续更新中...\n<!--more-->\n\n**注：**这里实现的算法都是递增排序，也就是从小到大排序。\n\n## 初级排序算法\n\n### 1.选择排序\n**思想：**首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。\n\n```java\npublic static int [] sort(int a[],int length){    //选择排序\n    for(int i=0;i<length;i++){\n        int minIndex = i; //初始化最小元素的索引\n        for(int j=i+1;j<length;j++){\n            if(a[minIndex]>a[j]){\n                minIndex = j;  //找到最小元素的索引\n            }\n        }\n        int tem = a[i];\n        a[i] = a[minIndex];\n        a[minIndex] = tem;\n    }\n    return a;\n}\n```\n### 2.直接插入排序\n**思想：** 每一步将一个待排序的记录，插入到前面应排好序的有序序列中去，直到查完所有元素为止。\n![](http://ou6yob3zd.bkt.clouddn.com/20170821195323.png)\n\n**代码：**\n\n第一种：从后往前依次比较前面排好序的有序序列，如果插入元素较小时，交换，j- -,继续比较。\n```java\npublic static int [] sort(int a[],int length){\n\tfor(int i=1;i<a.length;i++){\n\t\tfor(int j=i;j>0&&a[j]<a[j-1];j--){  \n\t\t\tint tem = a[j-1];\n\t\t\ta[j-1] = a[j];\n\t\t\ta[j] = tem;\n\t\t}\n\t}\n\treturn a;\n}\n```\n\n第二种：不需要交换的直接插入排序，将内循环中较大的元素都向右移动而不总是交换两个元素，从而提高效率。\n```java\npublic static int [] sort(int a[],int length){    //不需要交换的插入排序\n\tfor(int i=1;i<a.length;i++){\n\t\tint tem = a[i];  //待插入的元素\n\t\tint j;\n\t\tfor(j=i-1;j>=0&&tem<a[j];j--){\n\t\t\ta[j+1] = a[j];   //元素后移,直到找到待插入的元素的位置\n\t\t}\n\t\ta[j+1] = tem;  //将带插入元素插入到查找到的位置\n\t}\n\treturn a;\n}\n```\n\n第三种：此外还可以通过增加哨兵的形式，在插入排序的实现中先找出最小的元素并将其置于数组的最左边，这样就能去掉内循环的判断条件j>0。这是一种常见的规避边界测试的方法，能够省略判断条件的元素通常被称为哨兵。\n\n```java\npublic static int [] sort(int a[],int length){\n\tint minIndex =0;\n\tfor(int i=1;i<length;i++){\n\t\tif(a[minIndex]>a[i]){\n\t\t\tminIndex = i;\n\t\t}\n\t}\n\tint tem = a[0];\n\ta[0] = a[minIndex];\n\ta[minIndex] = tem;\n\tfor(int i=2;i<length;i++){\n\t\ttem = a[i];\n\t\tint j;\n\t\tfor(j=i-1;tem<a[j];j--){\n\t\t\ta[j+1] = a[j];\n\t\t}\n\t\ta[j+1] = tem;\n\t}\n\treturn a;\n}\n```\n\n### 3.希尔排序\n\n**思想：**希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n简单插入排序很循规蹈矩，不管数组分布是怎么样的，依然一步一步的对元素进行比较，移动，插入，比如[5,4,3,2,1,0]这种倒序序列，数组末端的0要回到首位置很是费劲，比较和移动元素均需n-1次。而希尔排序在数组中采用跳跃式分组的策略，通过某个增量将数组元素划分为若干组，然后分组进行插入排序，随后逐步缩小增量，继续按组进行插入排序操作，直至增量为1。希尔排序通过这种策略使得整个数组在初始阶段达到从宏观上看基本有序，小的基本在前，大的基本在后。然后缩小增量，到增量为1时，其实多数情况下只需微调即可，不会涉及过多的数据移动。\n\n我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2...1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170821203528.png)\n\n**代码：**\n```java\npublic static int[] sort(int a[],int length){\n\tint h = length/2; //初始增量\n\twhile(h>=1){\n\t\t//将数组变为h有序\n\t\tfor(int i=h;i<length;i++) {\n\t\t\t//将a[i]插入到a[i-h],a[i-2*h],a[i-3*h]...之中\n\t\t\tfor(int j=i;j>=h&&a[j]<a[j-h];j-=h){\n\t\t\t\tint tem = a[j-h];\n\t\t\t\ta[j-h] = a[j];\n\t\t\t\ta[j] = tem;\n\t\t\t}\n\t\t}\n\t\th = h/2; //每次排完序后,增量减少\n\t}\t\n\treturn a;\n}\n```\n\n参考：[dreamcatcher-cx](http://www.cnblogs.com/chengxiao/p/6104371.html)\n\n## 归并排序\n\n### 简介\n\n归并排序，即将两个有序的数组归并成一个更大的有序数组，要将一个数组排序，可以（递归的）先将它分成两半分别排序，然后将结果归并起来。归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需的时间和NlogN成正比；它的主要缺点则是它所需的额外空间和N成正比。\n\n### 2-路归并排序\n\n**2-路归并排序:**假设初始序列含有n个记录，则可看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到n/2（整数值）个长度为2或1的有序子序列；在两两归并，......，如此重复，直至得到一个长度为n的有序序列为止，这种排序方法称为2-路归并排序。 如下为一个典型的例子。 \n\n**该图显示的就是循环2-路归并排序算法的过程：**\n![](http://ou6yob3zd.bkt.clouddn.com/20170827211130.png)\n\n2-路归并排序中的核心操作是将一维数组中前后相邻的两个有序序列归并为一个有序序列。\n\n**递归算法：自顶向下的2-路归并排序中归并结果的轨迹：**\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170827220032.png)\n\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170827212542.png)\n\n**循环算法：自底向上的2-路归并排序中归并结果的轨迹：**\n![](http://ou6yob3zd.bkt.clouddn.com/20170827215932.png)\n\n### 代码\n\n```java\npublic class Mergesort {  //2-路归并排序\n\tpublic static int [] aux;  //辅助数组\n\tpublic static void merge(int a[],int lo,int mid,int hi){   //核心算法\n\t\t//将a[lo..mid]和a[mid+1,hi](已有序)归并 \n\t\tint i = lo, j = mid+1;\n\t\tfor(int k = lo;k<=hi;k++){ //将a[lo..hi]复制到aux[lo..hi]\n\t\t\taux[k] = a[k];\n\t\t}\n\t\tfor(int k=lo;k<=hi;k++){\n\t\t\tif(i>mid) a[k] = aux[j++];  //左半边用尽，取右半边的元素复制到a中\n\t\t\telse if(j>hi) a[k] = aux[i++];   //右半边用尽，取左半边的元素复制到a中\n\t\t\telse if(aux[i]<aux[j]) a[k] = aux[i++];  //左半边元素小于右半边元素，取左半边元素复制到a中\n\t\t\telse a[k] = aux[j++]; //右半边元素小于左半边元素，取右半边元素复制到a中\n\t\t}\n\t}\n\tpublic static void Mergesort(int a[]){   //二路归并递归算法\n\t\taux = new int [a.length];   //一次性分配空间\n\t\tsort(a,0,a.length-1);\n\t}\n\tprivate static void sort(int[] a, int lo, int hi) {\n\t\t// 将数组a[lo..hi]排序\n\t\tif(lo>=hi) return ;\n\t\tint mid = lo + (hi-lo)/2;\n\t\tsort(a,lo,mid);     //递归将左半边排序\n\t\tsort(a,mid+1,hi);   //递归将右半边排序\n\t\tmerge(a, lo, mid, hi);  //归并结果\n\t}\n\t\n\tpublic static void Mergesort1(int [] a) {  //二路归并非递归算法\n\t\t//进行lgN次两两归并\n\t\tint N = a.length;\n\t\taux = new int [N];\n\t\tfor(int sz = 1; sz<N;sz = 2*sz){  //sz的子数组大小\n\t\t\tfor(int lo =0;lo<N-sz; lo+=2*sz){  //子数组的索引\n\t\t\t\tmerge(a, lo, lo+sz-1, Math.max(lo+2*sz-1, N-1));\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint a[] = {2,3,5,1,4,0,7,6};\n\t\t//Mergesort(a);  //调用2-路归并递归排序函数\n\t\tMergesort1(a);  //调用2-路归并非递归排序函数\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tSystem.out.print(a[i]+\" \");\n\t\t}\n\t}\n}\n\n```\n\n### 一些改进\n\n1.对小规模子数组使用插入排序，因为递归会使小规模问题中方法的调用过于频繁，所以改进对他们的处理方法就能改进整个算法。使用插入排序处理小规模子数组（比如长度小于15）。\n\n2.测试数组是否已经有序，我们可以添加一个判断条件，如果a[mid]小于等于a[mid+1]，此时前半部分有序数组最后一个数小于后半部分有序数组的第一个数，我们就认为数组已经是有序并跳过merge()方法。这个改动不影响排序的递归调用。\n\n3.不将元素复制到辅助数组（暂时不太明白）。\n\n## 快速排序\n\n### 简介\n\n快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。在第一种情况中，递归调用发生在处理整个数组之前；在第二种情况中，递归调用发生在处理整个数组之后。在归并排序中，一个数组被等分成两半；在快速排序中，切分的位置取决于数组的内容。\n\n### 关键算法\n\n该方法的关键在于切分，这个过程使得数组满足下面的三个条件：\n\n1.对于某个j,a[j]已经排定；\n\n2.a[lo]到a[j-1]中的所有元素都不大于a[j]；\n\n3.a[j+1]到a[hi]中的所有元素都不小于a[j]。\n\n### 代码\n\n```java\npublic class QuickSort {\n\tpublic static int[] quicksort(int a[]){\n\t\tsort(a,0,a.length-1);\n\t\treturn a;\n\t}\n\tprivate static void sort(int[] a, int lo, int hi) {\n\t\tif(hi<=lo) return ;\n\t\tint j=partition(a,lo,hi);   //切分\n\t\t//第j个位置已经在它所在的排好序的位置\n\t\tsort(a,lo,j-1);\n\t\tsort(a,j+1,hi);\n\t}\n\tprivate static int partition(int[] a, int lo, int hi) {\n\t    int part = a[lo];   //切分元素\n\t    int i = lo,j=hi+1;  //左右扫描指针\n\t    int tem;\n\t    while(true){\n\t    \t//扫描左右，检查扫描是否结束并交换元素\n\t    \twhile(a[++i]<part) {  //从左到右(第一个元素除外)找到大于等于part的元素\n\t    \t\tif(i==hi) break;    \n\t    \t}\n\t    \twhile(a[--j]>part){  //从右到左找到小于等于part的元素\n\t    \t\tif(j==lo) break;\n\t    \t}\n\t    \tif(i>=j) break;\n\t    \ttem = a[i];\n\t    \ta[i] = a[j];\n\t    \ta[j] = tem;\n\t    }\n\t    tem = a[lo];   //将part=a[j]放入正确的位置\n    \ta[lo] = a[j];\n    \ta[j] = tem;\n\t\treturn j;\n\t}\n\tpublic static void main(String[] args) {\n\t\tint []a = {4,5,4,6,1,3};\n\t\ta = quicksort(a);\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tSystem.out.print(a[i]+\" \");\n\t\t}\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"个人总结之排序算法","published":1,"updated":"2017-08-29T12:24:29.536Z","_id":"cj6xk3rl90001h0ix6me67zsu","layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>回顾之前学习的各种排序算法，从初级到高级，包括选择排序，冒泡排序，插入排序，希尔排序，快速排序，归并排序，堆排序等等，持续更新中…<br><a id=\"more\"></a></p>\n<p><strong>注：</strong>这里实现的算法都是递增排序，也就是从小到大排序。</p>\n<h2 id=\"初级排序算法\"><a href=\"#初级排序算法\" class=\"headerlink\" title=\"初级排序算法\"></a>初级排序算法</h2><h3 id=\"1-选择排序\"><a href=\"#1-选择排序\" class=\"headerlink\" title=\"1.选择排序\"></a>1.选择排序</h3><p><strong>思想：</strong>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;    <span class=\"comment\">//选择排序</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> minIndex = i; <span class=\"comment\">//初始化最小元素的索引</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;length;j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(a[minIndex]&gt;a[j])&#123;</div><div class=\"line\">                minIndex = j;  <span class=\"comment\">//找到最小元素的索引</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> tem = a[i];</div><div class=\"line\">        a[i] = a[minIndex];</div><div class=\"line\">        a[minIndex] = tem;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-直接插入排序\"><a href=\"#2-直接插入排序\" class=\"headerlink\" title=\"2.直接插入排序\"></a>2.直接插入排序</h3><p><strong>思想：</strong> 每一步将一个待排序的记录，插入到前面应排好序的有序序列中去，直到查完所有元素为止。<br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170821195323.png\" alt=\"\"></p>\n<p><strong>代码：</strong></p>\n<p>第一种：从后往前依次比较前面排好序的有序序列，如果插入元素较小时，交换，j- -,继续比较。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i;j&gt;<span class=\"number\">0</span>&amp;&amp;a[j]&lt;a[j-<span class=\"number\">1</span>];j--)&#123;  </div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> tem = a[j-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\ta[j-<span class=\"number\">1</span>] = a[j];</div><div class=\"line\">\t\t\ta[j] = tem;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第二种：不需要交换的直接插入排序，将内循环中较大的元素都向右移动而不总是交换两个元素，从而提高效率。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;    <span class=\"comment\">//不需要交换的插入排序</span></div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tem = a[i];  <span class=\"comment\">//待插入的元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(j=i-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>&amp;&amp;tem&lt;a[j];j--)&#123;</div><div class=\"line\">\t\t\ta[j+<span class=\"number\">1</span>] = a[j];   <span class=\"comment\">//元素后移,直到找到待插入的元素的位置</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ta[j+<span class=\"number\">1</span>] = tem;  <span class=\"comment\">//将带插入元素插入到查找到的位置</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第三种：此外还可以通过增加哨兵的形式，在插入排序的实现中先找出最小的元素并将其置于数组的最左边，这样就能去掉内循环的判断条件j&gt;0。这是一种常见的规避边界测试的方法，能够省略判断条件的元素通常被称为哨兵。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> minIndex =<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;length;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(a[minIndex]&gt;a[i])&#123;</div><div class=\"line\">\t\t\tminIndex = i;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">int</span> tem = a[<span class=\"number\">0</span>];</div><div class=\"line\">\ta[<span class=\"number\">0</span>] = a[minIndex];</div><div class=\"line\">\ta[minIndex] = tem;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;length;i++)&#123;</div><div class=\"line\">\t\ttem = a[i];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(j=i-<span class=\"number\">1</span>;tem&lt;a[j];j--)&#123;</div><div class=\"line\">\t\t\ta[j+<span class=\"number\">1</span>] = a[j];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ta[j+<span class=\"number\">1</span>] = tem;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-希尔排序\"><a href=\"#3-希尔排序\" class=\"headerlink\" title=\"3.希尔排序\"></a>3.希尔排序</h3><p><strong>思想：</strong>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n<p>简单插入排序很循规蹈矩，不管数组分布是怎么样的，依然一步一步的对元素进行比较，移动，插入，比如[5,4,3,2,1,0]这种倒序序列，数组末端的0要回到首位置很是费劲，比较和移动元素均需n-1次。而希尔排序在数组中采用跳跃式分组的策略，通过某个增量将数组元素划分为若干组，然后分组进行插入排序，随后逐步缩小增量，继续按组进行插入排序操作，直至增量为1。希尔排序通过这种策略使得整个数组在初始阶段达到从宏观上看基本有序，小的基本在前，大的基本在后。然后缩小增量，到增量为1时，其实多数情况下只需微调即可，不会涉及过多的数据移动。</p>\n<p>我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2…1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170821203528.png\" alt=\"\"></p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> h = length/<span class=\"number\">2</span>; <span class=\"comment\">//初始增量</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(h&gt;=<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//将数组变为h有序</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=h;i&lt;length;i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//将a[i]插入到a[i-h],a[i-2*h],a[i-3*h]...之中</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i;j&gt;=h&amp;&amp;a[j]&lt;a[j-h];j-=h)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tem = a[j-h];</div><div class=\"line\">\t\t\t\ta[j-h] = a[j];</div><div class=\"line\">\t\t\t\ta[j] = tem;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\th = h/<span class=\"number\">2</span>; <span class=\"comment\">//每次排完序后,增量减少</span></div><div class=\"line\">\t&#125;\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参考：<a href=\"http://www.cnblogs.com/chengxiao/p/6104371.html\" target=\"_blank\" rel=\"external\">dreamcatcher-cx</a></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>归并排序，即将两个有序的数组归并成一个更大的有序数组，要将一个数组排序，可以（递归的）先将它分成两半分别排序，然后将结果归并起来。归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需的时间和NlogN成正比；它的主要缺点则是它所需的额外空间和N成正比。</p>\n<h3 id=\"2-路归并排序\"><a href=\"#2-路归并排序\" class=\"headerlink\" title=\"2-路归并排序\"></a>2-路归并排序</h3><p><strong>2-路归并排序:</strong>假设初始序列含有n个记录，则可看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到n/2（整数值）个长度为2或1的有序子序列；在两两归并，……，如此重复，直至得到一个长度为n的有序序列为止，这种排序方法称为2-路归并排序。 如下为一个典型的例子。 </p>\n<p><strong>该图显示的就是循环2-路归并排序算法的过程：</strong><br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170827211130.png\" alt=\"\"></p>\n<p>2-路归并排序中的核心操作是将一维数组中前后相邻的两个有序序列归并为一个有序序列。</p>\n<p><strong>递归算法：自顶向下的2-路归并排序中归并结果的轨迹：</strong></p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170827220032.png\" alt=\"\"></p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170827212542.png\" alt=\"\"></p>\n<p><strong>循环算法：自底向上的2-路归并排序中归并结果的轨迹：</strong><br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170827215932.png\" alt=\"\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mergesort</span> </span>&#123;  <span class=\"comment\">//2-路归并排序</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] aux;  <span class=\"comment\">//辅助数组</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> lo,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> hi)</span></span>&#123;   <span class=\"comment\">//核心算法</span></div><div class=\"line\">\t\t<span class=\"comment\">//将a[lo..mid]和a[mid+1,hi](已有序)归并 </span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = lo, j = mid+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = lo;k&lt;=hi;k++)&#123; <span class=\"comment\">//将a[lo..hi]复制到aux[lo..hi]</span></div><div class=\"line\">\t\t\taux[k] = a[k];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=lo;k&lt;=hi;k++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i&gt;mid) a[k] = aux[j++];  <span class=\"comment\">//左半边用尽，取右半边的元素复制到a中</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&gt;hi) a[k] = aux[i++];   <span class=\"comment\">//右半边用尽，取左半边的元素复制到a中</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aux[i]&lt;aux[j]) a[k] = aux[i++];  <span class=\"comment\">//左半边元素小于右半边元素，取左半边元素复制到a中</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> a[k] = aux[j++]; <span class=\"comment\">//右半边元素小于左半边元素，取右半边元素复制到a中</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Mergesort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[])</span></span>&#123;   <span class=\"comment\">//二路归并递归算法</span></div><div class=\"line\">\t\taux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [a.length];   <span class=\"comment\">//一次性分配空间</span></div><div class=\"line\">\t\tsort(a,<span class=\"number\">0</span>,a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 将数组a[lo..hi]排序</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(lo&gt;=hi) <span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> mid = lo + (hi-lo)/<span class=\"number\">2</span>;</div><div class=\"line\">\t\tsort(a,lo,mid);     <span class=\"comment\">//递归将左半边排序</span></div><div class=\"line\">\t\tsort(a,mid+<span class=\"number\">1</span>,hi);   <span class=\"comment\">//递归将右半边排序</span></div><div class=\"line\">\t\tmerge(a, lo, mid, hi);  <span class=\"comment\">//归并结果</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Mergesort1</span><span class=\"params\">(<span class=\"keyword\">int</span> [] a)</span> </span>&#123;  <span class=\"comment\">//二路归并非递归算法</span></div><div class=\"line\">\t\t<span class=\"comment\">//进行lgN次两两归并</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> N = a.length;</div><div class=\"line\">\t\taux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [N];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> sz = <span class=\"number\">1</span>; sz&lt;N;sz = <span class=\"number\">2</span>*sz)&#123;  <span class=\"comment\">//sz的子数组大小</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> lo =<span class=\"number\">0</span>;lo&lt;N-sz; lo+=<span class=\"number\">2</span>*sz)&#123;  <span class=\"comment\">//子数组的索引</span></div><div class=\"line\">\t\t\t\tmerge(a, lo, lo+sz-<span class=\"number\">1</span>, Math.max(lo+<span class=\"number\">2</span>*sz-<span class=\"number\">1</span>, N-<span class=\"number\">1</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>&#125;;</div><div class=\"line\">\t\t<span class=\"comment\">//Mergesort(a);  //调用2-路归并递归排序函数</span></div><div class=\"line\">\t\tMergesort1(a);  <span class=\"comment\">//调用2-路归并非递归排序函数</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">\t\t\tSystem.out.print(a[i]+<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"一些改进\"><a href=\"#一些改进\" class=\"headerlink\" title=\"一些改进\"></a>一些改进</h3><p>1.对小规模子数组使用插入排序，因为递归会使小规模问题中方法的调用过于频繁，所以改进对他们的处理方法就能改进整个算法。使用插入排序处理小规模子数组（比如长度小于15）。</p>\n<p>2.测试数组是否已经有序，我们可以添加一个判断条件，如果a[mid]小于等于a[mid+1]，此时前半部分有序数组最后一个数小于后半部分有序数组的第一个数，我们就认为数组已经是有序并跳过merge()方法。这个改动不影响排序的递归调用。</p>\n<p>3.不将元素复制到辅助数组（暂时不太明白）。</p>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。在第一种情况中，递归调用发生在处理整个数组之前；在第二种情况中，递归调用发生在处理整个数组之后。在归并排序中，一个数组被等分成两半；在快速排序中，切分的位置取决于数组的内容。</p>\n<h3 id=\"关键算法\"><a href=\"#关键算法\" class=\"headerlink\" title=\"关键算法\"></a>关键算法</h3><p>该方法的关键在于切分，这个过程使得数组满足下面的三个条件：</p>\n<p>1.对于某个j,a[j]已经排定；</p>\n<p>2.a[lo]到a[j-1]中的所有元素都不大于a[j]；</p>\n<p>3.a[j+1]到a[hi]中的所有元素都不小于a[j]。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] quicksort(<span class=\"keyword\">int</span> a[])&#123;</div><div class=\"line\">\t\tsort(a,<span class=\"number\">0</span>,a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hi&lt;=lo) <span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j=partition(a,lo,hi);   <span class=\"comment\">//切分</span></div><div class=\"line\">\t\t<span class=\"comment\">//第j个位置已经在它所在的排好序的位置</span></div><div class=\"line\">\t\tsort(a,lo,j-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tsort(a,j+<span class=\"number\">1</span>,hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">int</span> part = a[lo];   <span class=\"comment\">//切分元素</span></div><div class=\"line\">\t    <span class=\"keyword\">int</span> i = lo,j=hi+<span class=\"number\">1</span>;  <span class=\"comment\">//左右扫描指针</span></div><div class=\"line\">\t    <span class=\"keyword\">int</span> tem;</div><div class=\"line\">\t    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">\t    \t<span class=\"comment\">//扫描左右，检查扫描是否结束并交换元素</span></div><div class=\"line\">\t    \t<span class=\"keyword\">while</span>(a[++i]&lt;part) &#123;  <span class=\"comment\">//从左到右(第一个元素除外)找到大于等于part的元素</span></div><div class=\"line\">\t    \t\t<span class=\"keyword\">if</span>(i==hi) <span class=\"keyword\">break</span>;    </div><div class=\"line\">\t    \t&#125;</div><div class=\"line\">\t    \t<span class=\"keyword\">while</span>(a[--j]&gt;part)&#123;  <span class=\"comment\">//从右到左找到小于等于part的元素</span></div><div class=\"line\">\t    \t\t<span class=\"keyword\">if</span>(j==lo) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t    \t&#125;</div><div class=\"line\">\t    \t<span class=\"keyword\">if</span>(i&gt;=j) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t    \ttem = a[i];</div><div class=\"line\">\t    \ta[i] = a[j];</div><div class=\"line\">\t    \ta[j] = tem;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    tem = a[lo];   <span class=\"comment\">//将part=a[j]放入正确的位置</span></div><div class=\"line\">    \ta[lo] = a[j];</div><div class=\"line\">    \ta[j] = tem;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> []a = &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;;</div><div class=\"line\">\t\ta = quicksort(a);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">\t\t\tSystem.out.print(a[i]+<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>回顾之前学习的各种排序算法，从初级到高级，包括选择排序，冒泡排序，插入排序，希尔排序，快速排序，归并排序，堆排序等等，持续更新中…<br>","more":"</p>\n<p><strong>注：</strong>这里实现的算法都是递增排序，也就是从小到大排序。</p>\n<h2 id=\"初级排序算法\"><a href=\"#初级排序算法\" class=\"headerlink\" title=\"初级排序算法\"></a>初级排序算法</h2><h3 id=\"1-选择排序\"><a href=\"#1-选择排序\" class=\"headerlink\" title=\"1.选择排序\"></a>1.选择排序</h3><p><strong>思想：</strong>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置（如果第一个元素就是最小元素那么它就和自己交换）。再次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;    <span class=\"comment\">//选择排序</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length;i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> minIndex = i; <span class=\"comment\">//初始化最小元素的索引</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;length;j++)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(a[minIndex]&gt;a[j])&#123;</div><div class=\"line\">                minIndex = j;  <span class=\"comment\">//找到最小元素的索引</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> tem = a[i];</div><div class=\"line\">        a[i] = a[minIndex];</div><div class=\"line\">        a[minIndex] = tem;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-直接插入排序\"><a href=\"#2-直接插入排序\" class=\"headerlink\" title=\"2.直接插入排序\"></a>2.直接插入排序</h3><p><strong>思想：</strong> 每一步将一个待排序的记录，插入到前面应排好序的有序序列中去，直到查完所有元素为止。<br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170821195323.png\" alt=\"\"></p>\n<p><strong>代码：</strong></p>\n<p>第一种：从后往前依次比较前面排好序的有序序列，如果插入元素较小时，交换，j- -,继续比较。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i;j&gt;<span class=\"number\">0</span>&amp;&amp;a[j]&lt;a[j-<span class=\"number\">1</span>];j--)&#123;  </div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> tem = a[j-<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\ta[j-<span class=\"number\">1</span>] = a[j];</div><div class=\"line\">\t\t\ta[j] = tem;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第二种：不需要交换的直接插入排序，将内循环中较大的元素都向右移动而不总是交换两个元素，从而提高效率。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;    <span class=\"comment\">//不需要交换的插入排序</span></div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> tem = a[i];  <span class=\"comment\">//待插入的元素</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(j=i-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>&amp;&amp;tem&lt;a[j];j--)&#123;</div><div class=\"line\">\t\t\ta[j+<span class=\"number\">1</span>] = a[j];   <span class=\"comment\">//元素后移,直到找到待插入的元素的位置</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ta[j+<span class=\"number\">1</span>] = tem;  <span class=\"comment\">//将带插入元素插入到查找到的位置</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>第三种：此外还可以通过增加哨兵的形式，在插入排序的实现中先找出最小的元素并将其置于数组的最左边，这样就能去掉内循环的判断条件j&gt;0。这是一种常见的规避边界测试的方法，能够省略判断条件的元素通常被称为哨兵。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> minIndex =<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;length;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(a[minIndex]&gt;a[i])&#123;</div><div class=\"line\">\t\t\tminIndex = i;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">int</span> tem = a[<span class=\"number\">0</span>];</div><div class=\"line\">\ta[<span class=\"number\">0</span>] = a[minIndex];</div><div class=\"line\">\ta[minIndex] = tem;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;length;i++)&#123;</div><div class=\"line\">\t\ttem = a[i];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(j=i-<span class=\"number\">1</span>;tem&lt;a[j];j--)&#123;</div><div class=\"line\">\t\t\ta[j+<span class=\"number\">1</span>] = a[j];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\ta[j+<span class=\"number\">1</span>] = tem;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-希尔排序\"><a href=\"#3-希尔排序\" class=\"headerlink\" title=\"3.希尔排序\"></a>3.希尔排序</h3><p><strong>思想：</strong>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n<p>简单插入排序很循规蹈矩，不管数组分布是怎么样的，依然一步一步的对元素进行比较，移动，插入，比如[5,4,3,2,1,0]这种倒序序列，数组末端的0要回到首位置很是费劲，比较和移动元素均需n-1次。而希尔排序在数组中采用跳跃式分组的策略，通过某个增量将数组元素划分为若干组，然后分组进行插入排序，随后逐步缩小增量，继续按组进行插入排序操作，直至增量为1。希尔排序通过这种策略使得整个数组在初始阶段达到从宏观上看基本有序，小的基本在前，大的基本在后。然后缩小增量，到增量为1时，其实多数情况下只需微调即可，不会涉及过多的数据移动。</p>\n<p>我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2…1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170821203528.png\" alt=\"\"></p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] sort(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> length)&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> h = length/<span class=\"number\">2</span>; <span class=\"comment\">//初始增量</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(h&gt;=<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//将数组变为h有序</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=h;i&lt;length;i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//将a[i]插入到a[i-h],a[i-2*h],a[i-3*h]...之中</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i;j&gt;=h&amp;&amp;a[j]&lt;a[j-h];j-=h)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tem = a[j-h];</div><div class=\"line\">\t\t\t\ta[j-h] = a[j];</div><div class=\"line\">\t\t\t\ta[j] = tem;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\th = h/<span class=\"number\">2</span>; <span class=\"comment\">//每次排完序后,增量减少</span></div><div class=\"line\">\t&#125;\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参考：<a href=\"http://www.cnblogs.com/chengxiao/p/6104371.html\" target=\"_blank\" rel=\"external\">dreamcatcher-cx</a></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>归并排序，即将两个有序的数组归并成一个更大的有序数组，要将一个数组排序，可以（递归的）先将它分成两半分别排序，然后将结果归并起来。归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需的时间和NlogN成正比；它的主要缺点则是它所需的额外空间和N成正比。</p>\n<h3 id=\"2-路归并排序\"><a href=\"#2-路归并排序\" class=\"headerlink\" title=\"2-路归并排序\"></a>2-路归并排序</h3><p><strong>2-路归并排序:</strong>假设初始序列含有n个记录，则可看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到n/2（整数值）个长度为2或1的有序子序列；在两两归并，……，如此重复，直至得到一个长度为n的有序序列为止，这种排序方法称为2-路归并排序。 如下为一个典型的例子。 </p>\n<p><strong>该图显示的就是循环2-路归并排序算法的过程：</strong><br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170827211130.png\" alt=\"\"></p>\n<p>2-路归并排序中的核心操作是将一维数组中前后相邻的两个有序序列归并为一个有序序列。</p>\n<p><strong>递归算法：自顶向下的2-路归并排序中归并结果的轨迹：</strong></p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170827220032.png\" alt=\"\"></p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170827212542.png\" alt=\"\"></p>\n<p><strong>循环算法：自底向上的2-路归并排序中归并结果的轨迹：</strong><br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170827215932.png\" alt=\"\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mergesort</span> </span>&#123;  <span class=\"comment\">//2-路归并排序</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] aux;  <span class=\"comment\">//辅助数组</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a[],<span class=\"keyword\">int</span> lo,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> hi)</span></span>&#123;   <span class=\"comment\">//核心算法</span></div><div class=\"line\">\t\t<span class=\"comment\">//将a[lo..mid]和a[mid+1,hi](已有序)归并 </span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> i = lo, j = mid+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = lo;k&lt;=hi;k++)&#123; <span class=\"comment\">//将a[lo..hi]复制到aux[lo..hi]</span></div><div class=\"line\">\t\t\taux[k] = a[k];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=lo;k&lt;=hi;k++)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i&gt;mid) a[k] = aux[j++];  <span class=\"comment\">//左半边用尽，取右半边的元素复制到a中</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&gt;hi) a[k] = aux[i++];   <span class=\"comment\">//右半边用尽，取左半边的元素复制到a中</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aux[i]&lt;aux[j]) a[k] = aux[i++];  <span class=\"comment\">//左半边元素小于右半边元素，取左半边元素复制到a中</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> a[k] = aux[j++]; <span class=\"comment\">//右半边元素小于左半边元素，取右半边元素复制到a中</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Mergesort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[])</span></span>&#123;   <span class=\"comment\">//二路归并递归算法</span></div><div class=\"line\">\t\taux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [a.length];   <span class=\"comment\">//一次性分配空间</span></div><div class=\"line\">\t\tsort(a,<span class=\"number\">0</span>,a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 将数组a[lo..hi]排序</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(lo&gt;=hi) <span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> mid = lo + (hi-lo)/<span class=\"number\">2</span>;</div><div class=\"line\">\t\tsort(a,lo,mid);     <span class=\"comment\">//递归将左半边排序</span></div><div class=\"line\">\t\tsort(a,mid+<span class=\"number\">1</span>,hi);   <span class=\"comment\">//递归将右半边排序</span></div><div class=\"line\">\t\tmerge(a, lo, mid, hi);  <span class=\"comment\">//归并结果</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Mergesort1</span><span class=\"params\">(<span class=\"keyword\">int</span> [] a)</span> </span>&#123;  <span class=\"comment\">//二路归并非递归算法</span></div><div class=\"line\">\t\t<span class=\"comment\">//进行lgN次两两归并</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> N = a.length;</div><div class=\"line\">\t\taux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [N];</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> sz = <span class=\"number\">1</span>; sz&lt;N;sz = <span class=\"number\">2</span>*sz)&#123;  <span class=\"comment\">//sz的子数组大小</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> lo =<span class=\"number\">0</span>;lo&lt;N-sz; lo+=<span class=\"number\">2</span>*sz)&#123;  <span class=\"comment\">//子数组的索引</span></div><div class=\"line\">\t\t\t\tmerge(a, lo, lo+sz-<span class=\"number\">1</span>, Math.max(lo+<span class=\"number\">2</span>*sz-<span class=\"number\">1</span>, N-<span class=\"number\">1</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>&#125;;</div><div class=\"line\">\t\t<span class=\"comment\">//Mergesort(a);  //调用2-路归并递归排序函数</span></div><div class=\"line\">\t\tMergesort1(a);  <span class=\"comment\">//调用2-路归并非递归排序函数</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">\t\t\tSystem.out.print(a[i]+<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"一些改进\"><a href=\"#一些改进\" class=\"headerlink\" title=\"一些改进\"></a>一些改进</h3><p>1.对小规模子数组使用插入排序，因为递归会使小规模问题中方法的调用过于频繁，所以改进对他们的处理方法就能改进整个算法。使用插入排序处理小规模子数组（比如长度小于15）。</p>\n<p>2.测试数组是否已经有序，我们可以添加一个判断条件，如果a[mid]小于等于a[mid+1]，此时前半部分有序数组最后一个数小于后半部分有序数组的第一个数，我们就认为数组已经是有序并跳过merge()方法。这个改动不影响排序的递归调用。</p>\n<p>3.不将元素复制到辅助数组（暂时不太明白）。</p>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>快速排序是一种分治的排序算法。它将一个数组分成两个子数组，将两部分独立地排序。快速排序和归并排序是互补的：归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个子数组都有序时整个数组也就自然有序了。在第一种情况中，递归调用发生在处理整个数组之前；在第二种情况中，递归调用发生在处理整个数组之后。在归并排序中，一个数组被等分成两半；在快速排序中，切分的位置取决于数组的内容。</p>\n<h3 id=\"关键算法\"><a href=\"#关键算法\" class=\"headerlink\" title=\"关键算法\"></a>关键算法</h3><p>该方法的关键在于切分，这个过程使得数组满足下面的三个条件：</p>\n<p>1.对于某个j,a[j]已经排定；</p>\n<p>2.a[lo]到a[j-1]中的所有元素都不大于a[j]；</p>\n<p>3.a[j+1]到a[hi]中的所有元素都不小于a[j]。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] quicksort(<span class=\"keyword\">int</span> a[])&#123;</div><div class=\"line\">\t\tsort(a,<span class=\"number\">0</span>,a.length-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> a;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hi&lt;=lo) <span class=\"keyword\">return</span> ;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> j=partition(a,lo,hi);   <span class=\"comment\">//切分</span></div><div class=\"line\">\t\t<span class=\"comment\">//第j个位置已经在它所在的排好序的位置</span></div><div class=\"line\">\t\tsort(a,lo,j-<span class=\"number\">1</span>);</div><div class=\"line\">\t\tsort(a,j+<span class=\"number\">1</span>,hi);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">int</span> part = a[lo];   <span class=\"comment\">//切分元素</span></div><div class=\"line\">\t    <span class=\"keyword\">int</span> i = lo,j=hi+<span class=\"number\">1</span>;  <span class=\"comment\">//左右扫描指针</span></div><div class=\"line\">\t    <span class=\"keyword\">int</span> tem;</div><div class=\"line\">\t    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">\t    \t<span class=\"comment\">//扫描左右，检查扫描是否结束并交换元素</span></div><div class=\"line\">\t    \t<span class=\"keyword\">while</span>(a[++i]&lt;part) &#123;  <span class=\"comment\">//从左到右(第一个元素除外)找到大于等于part的元素</span></div><div class=\"line\">\t    \t\t<span class=\"keyword\">if</span>(i==hi) <span class=\"keyword\">break</span>;    </div><div class=\"line\">\t    \t&#125;</div><div class=\"line\">\t    \t<span class=\"keyword\">while</span>(a[--j]&gt;part)&#123;  <span class=\"comment\">//从右到左找到小于等于part的元素</span></div><div class=\"line\">\t    \t\t<span class=\"keyword\">if</span>(j==lo) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t    \t&#125;</div><div class=\"line\">\t    \t<span class=\"keyword\">if</span>(i&gt;=j) <span class=\"keyword\">break</span>;</div><div class=\"line\">\t    \ttem = a[i];</div><div class=\"line\">\t    \ta[i] = a[j];</div><div class=\"line\">\t    \ta[j] = tem;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    tem = a[lo];   <span class=\"comment\">//将part=a[j]放入正确的位置</span></div><div class=\"line\">    \ta[lo] = a[j];</div><div class=\"line\">    \ta[j] = tem;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> j;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> []a = &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;;</div><div class=\"line\">\t\ta = quicksort(a);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;a.length;i++)&#123;</div><div class=\"line\">\t\t\tSystem.out.print(a[i]+<span class=\"string\">\" \"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Words as Vectors(译)","date":"2017-08-11T04:59:25.000Z","update":null,"comments":1,"_content":"","source":"_posts/Words as Vectors.md","raw":"---\ntitle: Words as Vectors(译)\ndate: 2017-08-11 12:59:25\nupdate:\ntags: [skip-gram,CBOW]\ncategories: word2vec\ncomments: true\n---\n","slug":"Words as Vectors","published":1,"updated":"2017-08-11T07:42:50.601Z","layout":"post","photos":[],"link":"","_id":"cj6xk3rlc0002h0ix1rrtvmlr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"样先","date":"2017-08-12T11:59:25.000Z","update":null,"comments":1,"_content":"　　仅以此记录样先发给我的新年贺词，时刻向兄弟学习！（侵犯他的隐私我不管，哈哈）\n<!-- more -->\n新日左右：\n\n　　余中求学生涯，惟君与余真正共事三年。初始，吾二人低而普通，待到分班，高而重点，止一年耳。忆往昔高中奋斗岁月，直叫人倍感追忆。\n\n　　予闻朱子言，为学譬如熬肉，先须用猛火煮，然后用慢火温。盖士人读书，第一要有志，第二要有识，第三要有恒。有志则断不甘为下流；有识则知学问无尽，不敢以一得自足，如河伯之观海，如井蛙之窥天，皆无识者也；有恒则断无不成之事。余注曰：“有志者，不在其小也。大者如孙、毛以救天下万民于水火为己任，周之为中华崛起而读书，小者以达一己之私，一举手，一投足。然小志者，亦有其蔽也。志小则为己，为己则时怠，怠则退而求其次，盖不知人自忍之大乎。呜呼！”此亦余之不足也，与老奸共勉。\n\n　　大学确定考研否？准备否？书仍看否？新年细语，浅见孤陋，内心反复，诚惶诚恐。顺问近好。代问伯父、伯母好。\n\n　　新年快乐！ 学业进步！ 甜甜蜜蜜！ 天天开心！\n\n　　样先\n\n <p align=\"right\">2015.2.18</p> \n\n　　真怀念高中的时光啊，现在大家相处的时间变得少了，遇见你们，真好，与兄弟们共勉，希望自己能做到最后一条，天天开心！\n\n<div id=\"music163player\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=68450&auto=0&height=66\"></iframe>\n</div>                                                                                       ","source":"_posts/样先.md","raw":"---\ntitle: 样先\ndate: 2017-08-12 19:59:25\nupdate:\ntags: [兄弟,朋友]\ncategories: 兄弟\ncomments: true\n---\n　　仅以此记录样先发给我的新年贺词，时刻向兄弟学习！（侵犯他的隐私我不管，哈哈）\n<!-- more -->\n新日左右：\n\n　　余中求学生涯，惟君与余真正共事三年。初始，吾二人低而普通，待到分班，高而重点，止一年耳。忆往昔高中奋斗岁月，直叫人倍感追忆。\n\n　　予闻朱子言，为学譬如熬肉，先须用猛火煮，然后用慢火温。盖士人读书，第一要有志，第二要有识，第三要有恒。有志则断不甘为下流；有识则知学问无尽，不敢以一得自足，如河伯之观海，如井蛙之窥天，皆无识者也；有恒则断无不成之事。余注曰：“有志者，不在其小也。大者如孙、毛以救天下万民于水火为己任，周之为中华崛起而读书，小者以达一己之私，一举手，一投足。然小志者，亦有其蔽也。志小则为己，为己则时怠，怠则退而求其次，盖不知人自忍之大乎。呜呼！”此亦余之不足也，与老奸共勉。\n\n　　大学确定考研否？准备否？书仍看否？新年细语，浅见孤陋，内心反复，诚惶诚恐。顺问近好。代问伯父、伯母好。\n\n　　新年快乐！ 学业进步！ 甜甜蜜蜜！ 天天开心！\n\n　　样先\n\n <p align=\"right\">2015.2.18</p> \n\n　　真怀念高中的时光啊，现在大家相处的时间变得少了，遇见你们，真好，与兄弟们共勉，希望自己能做到最后一条，天天开心！\n\n<div id=\"music163player\">\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=68450&auto=0&height=66\"></iframe>\n</div>                                                                                       ","slug":"样先","published":1,"updated":"2017-08-22T01:07:05.549Z","layout":"post","photos":[],"link":"","_id":"cj6xk3rlk0005h0ix4952843e","content":"<p>　　仅以此记录样先发给我的新年贺词，时刻向兄弟学习！（侵犯他的隐私我不管，哈哈）<br><a id=\"more\"></a><br>新日左右：</p>\n<p>　　余中求学生涯，惟君与余真正共事三年。初始，吾二人低而普通，待到分班，高而重点，止一年耳。忆往昔高中奋斗岁月，直叫人倍感追忆。</p>\n<p>　　予闻朱子言，为学譬如熬肉，先须用猛火煮，然后用慢火温。盖士人读书，第一要有志，第二要有识，第三要有恒。有志则断不甘为下流；有识则知学问无尽，不敢以一得自足，如河伯之观海，如井蛙之窥天，皆无识者也；有恒则断无不成之事。余注曰：“有志者，不在其小也。大者如孙、毛以救天下万民于水火为己任，周之为中华崛起而读书，小者以达一己之私，一举手，一投足。然小志者，亦有其蔽也。志小则为己，为己则时怠，怠则退而求其次，盖不知人自忍之大乎。呜呼！”此亦余之不足也，与老奸共勉。</p>\n<p>　　大学确定考研否？准备否？书仍看否？新年细语，浅见孤陋，内心反复，诚惶诚恐。顺问近好。代问伯父、伯母好。</p>\n<p>　　新年快乐！ 学业进步！ 甜甜蜜蜜！ 天天开心！</p>\n<p>　　样先</p>\n <p align=\"right\">2015.2.18</p> \n\n<p>　　真怀念高中的时光啊，现在大家相处的时间变得少了，遇见你们，真好，与兄弟们共勉，希望自己能做到最后一条，天天开心！</p>\n<div id=\"music163player\"><br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=68450&auto=0&height=66\"></iframe><br></div>                                                                                       ","site":{"data":{}},"excerpt":"<p>　　仅以此记录样先发给我的新年贺词，时刻向兄弟学习！（侵犯他的隐私我不管，哈哈）<br>","more":"<br>新日左右：</p>\n<p>　　余中求学生涯，惟君与余真正共事三年。初始，吾二人低而普通，待到分班，高而重点，止一年耳。忆往昔高中奋斗岁月，直叫人倍感追忆。</p>\n<p>　　予闻朱子言，为学譬如熬肉，先须用猛火煮，然后用慢火温。盖士人读书，第一要有志，第二要有识，第三要有恒。有志则断不甘为下流；有识则知学问无尽，不敢以一得自足，如河伯之观海，如井蛙之窥天，皆无识者也；有恒则断无不成之事。余注曰：“有志者，不在其小也。大者如孙、毛以救天下万民于水火为己任，周之为中华崛起而读书，小者以达一己之私，一举手，一投足。然小志者，亦有其蔽也。志小则为己，为己则时怠，怠则退而求其次，盖不知人自忍之大乎。呜呼！”此亦余之不足也，与老奸共勉。</p>\n<p>　　大学确定考研否？准备否？书仍看否？新年细语，浅见孤陋，内心反复，诚惶诚恐。顺问近好。代问伯父、伯母好。</p>\n<p>　　新年快乐！ 学业进步！ 甜甜蜜蜜！ 天天开心！</p>\n<p>　　样先</p>\n <p align=\"right\">2015.2.18</p> \n\n<p>　　真怀念高中的时光啊，现在大家相处的时间变得少了，遇见你们，真好，与兄弟们共勉，希望自己能做到最后一条，天天开心！</p>\n<div id=\"music163player\"><br><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=68450&auto=0&height=66\"></iframe><br></div>"},{"title":"github Pages + Hexo搭建个人博客（一）  初级篇","date":"2017-08-06T08:28:39.747Z","update":null,"comments":1,"_content":"# 一、前言\n之前一直是在有道云上做一些笔记的，上周末在网上看到了一些别人搭建的个人博客，顿时感兴趣起来，然后自己就瞎捣鼓了几天，最终搭建成功了，哈哈。在这个过程中发现，搭建一个网站还是比较简单的，难的是管理博客，更难的是写博客！！！\n<!--more-->\n这个过程中，注册了自己的第一个github账号（很失败有木有，太out了），同时也了解了一些git的版本控制，还知道了Markdown这种标记语言，后面的这些博客都是用这个标记语言写的，还是很有收获的。\n\n今天特地总结一下使用github Pages + Hexo搭建个人博客的过程，以备不时之需。这里不谈理论，只谈过程，理论自己也不是很清楚，就不瞎说了，以后慢慢熟悉了，在补充！\n\n\n# 二、环境准备\n## 1. 注册github账号\n这个就不多说了，账号注册好后，登陆，在首页右边有一个 **+** 号图标，点击之后，选择New repository进行仓库的创建。Repository name命名为username.github.io（username是你的账号名，记住一定要这样命令哦)，点击Create repository，创建成功。\n## 2. 安装Git\n我们之所以要安装git，是因为后面我们要用到git命令，将生成的静态博客网页等信息推送至github仓库，我们的git使用一般由两种方式，一种是**图形化界面（GUI）**,另外一种是通过**命令行**。这里我选择安装前者，带界面的，菜鸟嘛，不会git命令，先熟悉熟悉流程，顺带在这个过程中在了解git的一些常用命令。另外安装前者，在桌面上会生成两个图标， **GitHub和Git Shell**,这两个图标分别是图形界面和命令行工具，意思就是我们不仅可以使用图形界面的工具管理我们github上的仓库，同时也可以使用命令行的形式管理，自由切换，爽歪歪！\n\nGithub for Windows: [点击下载](http://download.csdn.net/detail/devsplash/9666012)\n\n下载安装完后，桌面上生成**GitHub和Git Shell**两个图标，然后点击**GitHub**图标，输入前面注册的github账号和密码，登录完成，ok，暂时先这样，接着往下走。\n\nGithub for Windows 安装配置使用教程: [参考](http://blog.csdn.net/chenxun_2010/article/details/43670651)\n\n## 3. 安装Node.js\n\n安装Node.js,因为Hexo是一个基于Node.js的静态博客程序，所以首先安装Node.js。\n\n点击进入[Node.js官网](https://nodejs.org/en/)\n\n我们选择左边的通用版，点击下载后，设置安装路径然后默认安装就可以了。\n\n## 4. 安装Hexo\n\n以上环境配好了之后，那么恭喜您！接下来只需要使用npm即可完成Hexo的安装。\n\n打开终端，输入：\n\n``` bash\nnpm install -g hexo-cli\n```\n\n如果执行这条命令时长时间未成功，那么请先使用下面的命令将npm镜像源更改为国内的镜像，再执行上面的安装命令，因为国外的镜像源很有可能被墙了。\n\n``` bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n安装好Hexo以后，在终端输入：\n\n``` bash\nhexo\n```\n\n若出现下图，说明hexo安装成功：\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170806141617.png)\n\n# 三、使用Hexo建站\n\n## 1. 初始化博客\n\n新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。比如我在终端进入到G:Github目录，输入hexo init hexo，则在该目录下创建了hexo博客文件夹。\n\n``` bash\nhexo init [folder]\n```\n\n接下来进入到博客文件夹，这里是E:Github/hexo，执行如下命令，根据该目录下的package.json中既定的dependencies配置安装所有的依赖包\n\n``` bash\nnpm install\n```\n\n## 2. 配置\n\n网站的主配置文件为hexo根目录下的**_config.yml**文件：\n\n默认配置如下：\n\n{% codeblock %}\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Hexo\nsubtitle:\ndescription:\nauthor: John Doe\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n  \n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n  \n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n{% endcodeblock %}\n\n这些配置项所代表的意思可以参考Hexo中文网：[_config.yml配置](https://hexo.io/zh-cn/docs/configuration.html) ，我们需要修改的配置只有这几项，拿我自己修改的配置作为示例。\n\n### 1). 修改网站相关信息\n\n``` bash\ntitle: 新日三少的博客 \nsubtitle: Big big pig   \ndescription: Love Coding,Enjoy Life\nauthor: 新日三少\nlanguage: zh-CN      #themes主题文件夹下的languages下面有很多语言可选\ntimezone: Asia/Shanghai\n```\n\n**注意**：每一项的填写，其:后面都要保留一个空格，下同。\n\n### 2). 配置统一资源定位符（个人域名）\n\n``` bash\nurl: http://www.wangxinri.cn\n```\n\n对于root（根目录）、permalink（永久链接）、permalink_defaults（默认永久链接）等其他信息保持默认。\n如无个人域名，无需修改这一项。\n\n### 3). 配置部署\n\n``` bash\ndeploy: \n  type: git\n  repo: https://github.com/xinrisanshao/xinrisanshao.github.io.git\n  branch: master\n```\n其中repo项是之前Github上创建好的仓库的地址，，可以通过如下图所示的方式得到：\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170806151918.png)\n\n## 3.  本地发布博客\n\n接下来，在网站中建立第一篇文章，**打开终端，进入到博客文件夹根目录**，这里是E:Github/hexo，然后输入\n\n``` bash\nhexo new \"文章标题\"\n```\n\n我们可以在本地博客文件夹source->_post文件夹下看到我们新建的markdown文件。通过Markdown编辑器对我们文章进行编辑，我这采用的是Markdownpad2编辑器。\n\nMarkdownPad2：[点击下载](http://download.csdn.net/detail/rentongtmd/8333707)\n\nMarkdown语法：[Markdown中文网](http://www.markdown.cn/)\n\n为了能够使Hexo部署到GitHub上，需要安装一个插件：\n\n``` bash\nnpm install hexo-deployer-git --save\n```\n\n接下来,我们进行本地发布：\n``` bash\nhexo generate\nhexo server      \n```\n\n执行完后，打开浏览器，输入：\n``` bash\nhttp://localhost:4000/\n```\n\n我们可以在浏览器端看到我们搭建好的博客和发布的文章，如果访问失败，可能端口被占用，更换端口 hexo server -p 5000 ,将默认4000端口换成5000。\n![](http://ou6yob3zd.bkt.clouddn.com/20170806161241.png)\n\n## 4. 发布博客至github仓库\n\n但是毕竟我们目前发布的博客只有本机看得到，怎么让其他人看到我们写的博客呢？这时候我们来看看博客的部署。\n\n打开终端，进入到博客文件夹根目录，这里还是**E:Github/hexo**，执行如下命令：\n\n``` bash\nhexo generate\nhexo deploy      \n```\n\n输入我们的网址：[xinrisanshao.github.io](http://xinrisanshao.github.io) ,即可访问博客了。\n\n此时查看github中的仓库，发现我们博客文件夹根目录中的**public文件夹**里面的文件已经发布到仓库中了。\n\n此时搭建的博客还只是入门，外观确实一般般，接下来将更进一步，比如如何更换主题、如何管理博客等等。\n\n好累啊，先休息下，果然还是写博客最累啊。","source":"_posts/github Pages + Hexo搭建个人博客（一）  初级篇.md","raw":"---\ntitle: github Pages + Hexo搭建个人博客（一）  初级篇\ndate: \nupdate: \ntags: [hexo,github]\ncategories: hexo\ncomments: true\n---\n# 一、前言\n之前一直是在有道云上做一些笔记的，上周末在网上看到了一些别人搭建的个人博客，顿时感兴趣起来，然后自己就瞎捣鼓了几天，最终搭建成功了，哈哈。在这个过程中发现，搭建一个网站还是比较简单的，难的是管理博客，更难的是写博客！！！\n<!--more-->\n这个过程中，注册了自己的第一个github账号（很失败有木有，太out了），同时也了解了一些git的版本控制，还知道了Markdown这种标记语言，后面的这些博客都是用这个标记语言写的，还是很有收获的。\n\n今天特地总结一下使用github Pages + Hexo搭建个人博客的过程，以备不时之需。这里不谈理论，只谈过程，理论自己也不是很清楚，就不瞎说了，以后慢慢熟悉了，在补充！\n\n\n# 二、环境准备\n## 1. 注册github账号\n这个就不多说了，账号注册好后，登陆，在首页右边有一个 **+** 号图标，点击之后，选择New repository进行仓库的创建。Repository name命名为username.github.io（username是你的账号名，记住一定要这样命令哦)，点击Create repository，创建成功。\n## 2. 安装Git\n我们之所以要安装git，是因为后面我们要用到git命令，将生成的静态博客网页等信息推送至github仓库，我们的git使用一般由两种方式，一种是**图形化界面（GUI）**,另外一种是通过**命令行**。这里我选择安装前者，带界面的，菜鸟嘛，不会git命令，先熟悉熟悉流程，顺带在这个过程中在了解git的一些常用命令。另外安装前者，在桌面上会生成两个图标， **GitHub和Git Shell**,这两个图标分别是图形界面和命令行工具，意思就是我们不仅可以使用图形界面的工具管理我们github上的仓库，同时也可以使用命令行的形式管理，自由切换，爽歪歪！\n\nGithub for Windows: [点击下载](http://download.csdn.net/detail/devsplash/9666012)\n\n下载安装完后，桌面上生成**GitHub和Git Shell**两个图标，然后点击**GitHub**图标，输入前面注册的github账号和密码，登录完成，ok，暂时先这样，接着往下走。\n\nGithub for Windows 安装配置使用教程: [参考](http://blog.csdn.net/chenxun_2010/article/details/43670651)\n\n## 3. 安装Node.js\n\n安装Node.js,因为Hexo是一个基于Node.js的静态博客程序，所以首先安装Node.js。\n\n点击进入[Node.js官网](https://nodejs.org/en/)\n\n我们选择左边的通用版，点击下载后，设置安装路径然后默认安装就可以了。\n\n## 4. 安装Hexo\n\n以上环境配好了之后，那么恭喜您！接下来只需要使用npm即可完成Hexo的安装。\n\n打开终端，输入：\n\n``` bash\nnpm install -g hexo-cli\n```\n\n如果执行这条命令时长时间未成功，那么请先使用下面的命令将npm镜像源更改为国内的镜像，再执行上面的安装命令，因为国外的镜像源很有可能被墙了。\n\n``` bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n安装好Hexo以后，在终端输入：\n\n``` bash\nhexo\n```\n\n若出现下图，说明hexo安装成功：\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170806141617.png)\n\n# 三、使用Hexo建站\n\n## 1. 初始化博客\n\n新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。比如我在终端进入到G:Github目录，输入hexo init hexo，则在该目录下创建了hexo博客文件夹。\n\n``` bash\nhexo init [folder]\n```\n\n接下来进入到博客文件夹，这里是E:Github/hexo，执行如下命令，根据该目录下的package.json中既定的dependencies配置安装所有的依赖包\n\n``` bash\nnpm install\n```\n\n## 2. 配置\n\n网站的主配置文件为hexo根目录下的**_config.yml**文件：\n\n默认配置如下：\n\n{% codeblock %}\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: Hexo\nsubtitle:\ndescription:\nauthor: John Doe\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n  \n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n  \n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: landscape\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type:\n\n{% endcodeblock %}\n\n这些配置项所代表的意思可以参考Hexo中文网：[_config.yml配置](https://hexo.io/zh-cn/docs/configuration.html) ，我们需要修改的配置只有这几项，拿我自己修改的配置作为示例。\n\n### 1). 修改网站相关信息\n\n``` bash\ntitle: 新日三少的博客 \nsubtitle: Big big pig   \ndescription: Love Coding,Enjoy Life\nauthor: 新日三少\nlanguage: zh-CN      #themes主题文件夹下的languages下面有很多语言可选\ntimezone: Asia/Shanghai\n```\n\n**注意**：每一项的填写，其:后面都要保留一个空格，下同。\n\n### 2). 配置统一资源定位符（个人域名）\n\n``` bash\nurl: http://www.wangxinri.cn\n```\n\n对于root（根目录）、permalink（永久链接）、permalink_defaults（默认永久链接）等其他信息保持默认。\n如无个人域名，无需修改这一项。\n\n### 3). 配置部署\n\n``` bash\ndeploy: \n  type: git\n  repo: https://github.com/xinrisanshao/xinrisanshao.github.io.git\n  branch: master\n```\n其中repo项是之前Github上创建好的仓库的地址，，可以通过如下图所示的方式得到：\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170806151918.png)\n\n## 3.  本地发布博客\n\n接下来，在网站中建立第一篇文章，**打开终端，进入到博客文件夹根目录**，这里是E:Github/hexo，然后输入\n\n``` bash\nhexo new \"文章标题\"\n```\n\n我们可以在本地博客文件夹source->_post文件夹下看到我们新建的markdown文件。通过Markdown编辑器对我们文章进行编辑，我这采用的是Markdownpad2编辑器。\n\nMarkdownPad2：[点击下载](http://download.csdn.net/detail/rentongtmd/8333707)\n\nMarkdown语法：[Markdown中文网](http://www.markdown.cn/)\n\n为了能够使Hexo部署到GitHub上，需要安装一个插件：\n\n``` bash\nnpm install hexo-deployer-git --save\n```\n\n接下来,我们进行本地发布：\n``` bash\nhexo generate\nhexo server      \n```\n\n执行完后，打开浏览器，输入：\n``` bash\nhttp://localhost:4000/\n```\n\n我们可以在浏览器端看到我们搭建好的博客和发布的文章，如果访问失败，可能端口被占用，更换端口 hexo server -p 5000 ,将默认4000端口换成5000。\n![](http://ou6yob3zd.bkt.clouddn.com/20170806161241.png)\n\n## 4. 发布博客至github仓库\n\n但是毕竟我们目前发布的博客只有本机看得到，怎么让其他人看到我们写的博客呢？这时候我们来看看博客的部署。\n\n打开终端，进入到博客文件夹根目录，这里还是**E:Github/hexo**，执行如下命令：\n\n``` bash\nhexo generate\nhexo deploy      \n```\n\n输入我们的网址：[xinrisanshao.github.io](http://xinrisanshao.github.io) ,即可访问博客了。\n\n此时查看github中的仓库，发现我们博客文件夹根目录中的**public文件夹**里面的文件已经发布到仓库中了。\n\n此时搭建的博客还只是入门，外观确实一般般，接下来将更进一步，比如如何更换主题、如何管理博客等等。\n\n好累啊，先休息下，果然还是写博客最累啊。","slug":"github Pages + Hexo搭建个人博客（一）  初级篇","published":1,"updated":"2017-08-07T04:57:59.173Z","layout":"post","photos":[],"link":"","_id":"cj6xk3rn4000nh0ixecor9hjp","content":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>之前一直是在有道云上做一些笔记的，上周末在网上看到了一些别人搭建的个人博客，顿时感兴趣起来，然后自己就瞎捣鼓了几天，最终搭建成功了，哈哈。在这个过程中发现，搭建一个网站还是比较简单的，难的是管理博客，更难的是写博客！！！<br><a id=\"more\"></a><br>这个过程中，注册了自己的第一个github账号（很失败有木有，太out了），同时也了解了一些git的版本控制，还知道了Markdown这种标记语言，后面的这些博客都是用这个标记语言写的，还是很有收获的。</p>\n<p>今天特地总结一下使用github Pages + Hexo搭建个人博客的过程，以备不时之需。这里不谈理论，只谈过程，理论自己也不是很清楚，就不瞎说了，以后慢慢熟悉了，在补充！</p>\n<h1 id=\"二、环境准备\"><a href=\"#二、环境准备\" class=\"headerlink\" title=\"二、环境准备\"></a>二、环境准备</h1><h2 id=\"1-注册github账号\"><a href=\"#1-注册github账号\" class=\"headerlink\" title=\"1. 注册github账号\"></a>1. 注册github账号</h2><p>这个就不多说了，账号注册好后，登陆，在首页右边有一个 <strong>+</strong> 号图标，点击之后，选择New repository进行仓库的创建。Repository name命名为username.github.io（username是你的账号名，记住一定要这样命令哦)，点击Create repository，创建成功。</p>\n<h2 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2. 安装Git\"></a>2. 安装Git</h2><p>我们之所以要安装git，是因为后面我们要用到git命令，将生成的静态博客网页等信息推送至github仓库，我们的git使用一般由两种方式，一种是<strong>图形化界面（GUI）</strong>,另外一种是通过<strong>命令行</strong>。这里我选择安装前者，带界面的，菜鸟嘛，不会git命令，先熟悉熟悉流程，顺带在这个过程中在了解git的一些常用命令。另外安装前者，在桌面上会生成两个图标， <strong>GitHub和Git Shell</strong>,这两个图标分别是图形界面和命令行工具，意思就是我们不仅可以使用图形界面的工具管理我们github上的仓库，同时也可以使用命令行的形式管理，自由切换，爽歪歪！</p>\n<p>Github for Windows: <a href=\"http://download.csdn.net/detail/devsplash/9666012\" target=\"_blank\" rel=\"external\">点击下载</a></p>\n<p>下载安装完后，桌面上生成<strong>GitHub和Git Shell</strong>两个图标，然后点击<strong>GitHub</strong>图标，输入前面注册的github账号和密码，登录完成，ok，暂时先这样，接着往下走。</p>\n<p>Github for Windows 安装配置使用教程: <a href=\"http://blog.csdn.net/chenxun_2010/article/details/43670651\" target=\"_blank\" rel=\"external\">参考</a></p>\n<h2 id=\"3-安装Node-js\"><a href=\"#3-安装Node-js\" class=\"headerlink\" title=\"3. 安装Node.js\"></a>3. 安装Node.js</h2><p>安装Node.js,因为Hexo是一个基于Node.js的静态博客程序，所以首先安装Node.js。</p>\n<p>点击进入<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js官网</a></p>\n<p>我们选择左边的通用版，点击下载后，设置安装路径然后默认安装就可以了。</p>\n<h2 id=\"4-安装Hexo\"><a href=\"#4-安装Hexo\" class=\"headerlink\" title=\"4. 安装Hexo\"></a>4. 安装Hexo</h2><p>以上环境配好了之后，那么恭喜您！接下来只需要使用npm即可完成Hexo的安装。</p>\n<p>打开终端，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p>如果执行这条命令时长时间未成功，那么请先使用下面的命令将npm镜像源更改为国内的镜像，再执行上面的安装命令，因为国外的镜像源很有可能被墙了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>安装好Hexo以后，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo</div></pre></td></tr></table></figure>\n<p>若出现下图，说明hexo安装成功：</p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170806141617.png\" alt=\"\"></p>\n<h1 id=\"三、使用Hexo建站\"><a href=\"#三、使用Hexo建站\" class=\"headerlink\" title=\"三、使用Hexo建站\"></a>三、使用Hexo建站</h1><h2 id=\"1-初始化博客\"><a href=\"#1-初始化博客\" class=\"headerlink\" title=\"1. 初始化博客\"></a>1. 初始化博客</h2><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。比如我在终端进入到G:Github目录，输入hexo init hexo，则在该目录下创建了hexo博客文件夹。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init [folder]</div></pre></td></tr></table></figure>\n<p>接下来进入到博客文件夹，这里是E:Github/hexo，执行如下命令，根据该目录下的package.json中既定的dependencies配置安装所有的依赖包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<h2 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h2><p>网站的主配置文件为hexo根目录下的<strong>_config.yml</strong>文件：</p>\n<p>默认配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: Hexo</div><div class=\"line\">subtitle:</div><div class=\"line\">description:</div><div class=\"line\">author: John Doe</div><div class=\"line\">language:</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\">  </div><div class=\"line\"># Home page setting</div><div class=\"line\"># path: Root path for your blogs index page. (default = &apos;&apos;)</div><div class=\"line\"># per_page: Posts displayed per page. (0 = disable pagination)</div><div class=\"line\"># order_by: Posts order. (Order by date descending by default)</div><div class=\"line\">index_generator:</div><div class=\"line\">  path: &apos;&apos;</div><div class=\"line\">  per_page: 10</div><div class=\"line\">  order_by: -date</div><div class=\"line\">  </div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: landscape</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type:</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>这些配置项所代表的意思可以参考Hexo中文网：<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml配置</a> ，我们需要修改的配置只有这几项，拿我自己修改的配置作为示例。</p>\n<h3 id=\"1-修改网站相关信息\"><a href=\"#1-修改网站相关信息\" class=\"headerlink\" title=\"1). 修改网站相关信息\"></a>1). 修改网站相关信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 新日三少的博客 </div><div class=\"line\">subtitle: Big big pig   </div><div class=\"line\">description: Love Coding,Enjoy Life</div><div class=\"line\">author: 新日三少</div><div class=\"line\">language: zh-CN      <span class=\"comment\">#themes主题文件夹下的languages下面有很多语言可选</span></div><div class=\"line\">timezone: Asia/Shanghai</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：每一项的填写，其:后面都要保留一个空格，下同。</p>\n<h3 id=\"2-配置统一资源定位符（个人域名）\"><a href=\"#2-配置统一资源定位符（个人域名）\" class=\"headerlink\" title=\"2). 配置统一资源定位符（个人域名）\"></a>2). 配置统一资源定位符（个人域名）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: http://www.wangxinri.cn</div></pre></td></tr></table></figure>\n<p>对于root（根目录）、permalink（永久链接）、permalink_defaults（默认永久链接）等其他信息保持默认。<br>如无个人域名，无需修改这一项。</p>\n<h3 id=\"3-配置部署\"><a href=\"#3-配置部署\" class=\"headerlink\" title=\"3). 配置部署\"></a>3). 配置部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy: </div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repo: https://github.com/xinrisanshao/xinrisanshao.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>其中repo项是之前Github上创建好的仓库的地址，，可以通过如下图所示的方式得到：</p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170806151918.png\" alt=\"\"></p>\n<h2 id=\"3-本地发布博客\"><a href=\"#3-本地发布博客\" class=\"headerlink\" title=\"3.  本地发布博客\"></a>3.  本地发布博客</h2><p>接下来，在网站中建立第一篇文章，<strong>打开终端，进入到博客文件夹根目录</strong>，这里是E:Github/hexo，然后输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new <span class=\"string\">\"文章标题\"</span></div></pre></td></tr></table></figure>\n<p>我们可以在本地博客文件夹source-&gt;_post文件夹下看到我们新建的markdown文件。通过Markdown编辑器对我们文章进行编辑，我这采用的是Markdownpad2编辑器。</p>\n<p>MarkdownPad2：<a href=\"http://download.csdn.net/detail/rentongtmd/8333707\" target=\"_blank\" rel=\"external\">点击下载</a></p>\n<p>Markdown语法：<a href=\"http://www.markdown.cn/\" target=\"_blank\" rel=\"external\">Markdown中文网</a></p>\n<p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>接下来,我们进行本地发布：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure></p>\n<p>执行完后，打开浏览器，输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:4000/</div></pre></td></tr></table></figure></p>\n<p>我们可以在浏览器端看到我们搭建好的博客和发布的文章，如果访问失败，可能端口被占用，更换端口 hexo server -p 5000 ,将默认4000端口换成5000。<br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170806161241.png\" alt=\"\"></p>\n<h2 id=\"4-发布博客至github仓库\"><a href=\"#4-发布博客至github仓库\" class=\"headerlink\" title=\"4. 发布博客至github仓库\"></a>4. 发布博客至github仓库</h2><p>但是毕竟我们目前发布的博客只有本机看得到，怎么让其他人看到我们写的博客呢？这时候我们来看看博客的部署。</p>\n<p>打开终端，进入到博客文件夹根目录，这里还是<strong>E:Github/hexo</strong>，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>输入我们的网址：<a href=\"http://xinrisanshao.github.io\" target=\"_blank\" rel=\"external\">xinrisanshao.github.io</a> ,即可访问博客了。</p>\n<p>此时查看github中的仓库，发现我们博客文件夹根目录中的<strong>public文件夹</strong>里面的文件已经发布到仓库中了。</p>\n<p>此时搭建的博客还只是入门，外观确实一般般，接下来将更进一步，比如如何更换主题、如何管理博客等等。</p>\n<p>好累啊，先休息下，果然还是写博客最累啊。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>之前一直是在有道云上做一些笔记的，上周末在网上看到了一些别人搭建的个人博客，顿时感兴趣起来，然后自己就瞎捣鼓了几天，最终搭建成功了，哈哈。在这个过程中发现，搭建一个网站还是比较简单的，难的是管理博客，更难的是写博客！！！<br>","more":"<br>这个过程中，注册了自己的第一个github账号（很失败有木有，太out了），同时也了解了一些git的版本控制，还知道了Markdown这种标记语言，后面的这些博客都是用这个标记语言写的，还是很有收获的。</p>\n<p>今天特地总结一下使用github Pages + Hexo搭建个人博客的过程，以备不时之需。这里不谈理论，只谈过程，理论自己也不是很清楚，就不瞎说了，以后慢慢熟悉了，在补充！</p>\n<h1 id=\"二、环境准备\"><a href=\"#二、环境准备\" class=\"headerlink\" title=\"二、环境准备\"></a>二、环境准备</h1><h2 id=\"1-注册github账号\"><a href=\"#1-注册github账号\" class=\"headerlink\" title=\"1. 注册github账号\"></a>1. 注册github账号</h2><p>这个就不多说了，账号注册好后，登陆，在首页右边有一个 <strong>+</strong> 号图标，点击之后，选择New repository进行仓库的创建。Repository name命名为username.github.io（username是你的账号名，记住一定要这样命令哦)，点击Create repository，创建成功。</p>\n<h2 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2. 安装Git\"></a>2. 安装Git</h2><p>我们之所以要安装git，是因为后面我们要用到git命令，将生成的静态博客网页等信息推送至github仓库，我们的git使用一般由两种方式，一种是<strong>图形化界面（GUI）</strong>,另外一种是通过<strong>命令行</strong>。这里我选择安装前者，带界面的，菜鸟嘛，不会git命令，先熟悉熟悉流程，顺带在这个过程中在了解git的一些常用命令。另外安装前者，在桌面上会生成两个图标， <strong>GitHub和Git Shell</strong>,这两个图标分别是图形界面和命令行工具，意思就是我们不仅可以使用图形界面的工具管理我们github上的仓库，同时也可以使用命令行的形式管理，自由切换，爽歪歪！</p>\n<p>Github for Windows: <a href=\"http://download.csdn.net/detail/devsplash/9666012\" target=\"_blank\" rel=\"external\">点击下载</a></p>\n<p>下载安装完后，桌面上生成<strong>GitHub和Git Shell</strong>两个图标，然后点击<strong>GitHub</strong>图标，输入前面注册的github账号和密码，登录完成，ok，暂时先这样，接着往下走。</p>\n<p>Github for Windows 安装配置使用教程: <a href=\"http://blog.csdn.net/chenxun_2010/article/details/43670651\" target=\"_blank\" rel=\"external\">参考</a></p>\n<h2 id=\"3-安装Node-js\"><a href=\"#3-安装Node-js\" class=\"headerlink\" title=\"3. 安装Node.js\"></a>3. 安装Node.js</h2><p>安装Node.js,因为Hexo是一个基于Node.js的静态博客程序，所以首先安装Node.js。</p>\n<p>点击进入<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js官网</a></p>\n<p>我们选择左边的通用版，点击下载后，设置安装路径然后默认安装就可以了。</p>\n<h2 id=\"4-安装Hexo\"><a href=\"#4-安装Hexo\" class=\"headerlink\" title=\"4. 安装Hexo\"></a>4. 安装Hexo</h2><p>以上环境配好了之后，那么恭喜您！接下来只需要使用npm即可完成Hexo的安装。</p>\n<p>打开终端，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p>如果执行这条命令时长时间未成功，那么请先使用下面的命令将npm镜像源更改为国内的镜像，再执行上面的安装命令，因为国外的镜像源很有可能被墙了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<p>安装好Hexo以后，在终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo</div></pre></td></tr></table></figure>\n<p>若出现下图，说明hexo安装成功：</p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170806141617.png\" alt=\"\"></p>\n<h1 id=\"三、使用Hexo建站\"><a href=\"#三、使用Hexo建站\" class=\"headerlink\" title=\"三、使用Hexo建站\"></a>三、使用Hexo建站</h1><h2 id=\"1-初始化博客\"><a href=\"#1-初始化博客\" class=\"headerlink\" title=\"1. 初始化博客\"></a>1. 初始化博客</h2><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。比如我在终端进入到G:Github目录，输入hexo init hexo，则在该目录下创建了hexo博客文件夹。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init [folder]</div></pre></td></tr></table></figure>\n<p>接下来进入到博客文件夹，这里是E:Github/hexo，执行如下命令，根据该目录下的package.json中既定的dependencies配置安装所有的依赖包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<h2 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h2><p>网站的主配置文件为hexo根目录下的<strong>_config.yml</strong>文件：</p>\n<p>默认配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: Hexo</div><div class=\"line\">subtitle:</div><div class=\"line\">description:</div><div class=\"line\">author: John Doe</div><div class=\"line\">language:</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\">  </div><div class=\"line\"># Home page setting</div><div class=\"line\"># path: Root path for your blogs index page. (default = &apos;&apos;)</div><div class=\"line\"># per_page: Posts displayed per page. (0 = disable pagination)</div><div class=\"line\"># order_by: Posts order. (Order by date descending by default)</div><div class=\"line\">index_generator:</div><div class=\"line\">  path: &apos;&apos;</div><div class=\"line\">  per_page: 10</div><div class=\"line\">  order_by: -date</div><div class=\"line\">  </div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: landscape</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type:</div><div class=\"line\"></div></pre></td></tr></table></figure>\n<p>这些配置项所代表的意思可以参考Hexo中文网：<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">_config.yml配置</a> ，我们需要修改的配置只有这几项，拿我自己修改的配置作为示例。</p>\n<h3 id=\"1-修改网站相关信息\"><a href=\"#1-修改网站相关信息\" class=\"headerlink\" title=\"1). 修改网站相关信息\"></a>1). 修改网站相关信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: 新日三少的博客 </div><div class=\"line\">subtitle: Big big pig   </div><div class=\"line\">description: Love Coding,Enjoy Life</div><div class=\"line\">author: 新日三少</div><div class=\"line\">language: zh-CN      <span class=\"comment\">#themes主题文件夹下的languages下面有很多语言可选</span></div><div class=\"line\">timezone: Asia/Shanghai</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：每一项的填写，其:后面都要保留一个空格，下同。</p>\n<h3 id=\"2-配置统一资源定位符（个人域名）\"><a href=\"#2-配置统一资源定位符（个人域名）\" class=\"headerlink\" title=\"2). 配置统一资源定位符（个人域名）\"></a>2). 配置统一资源定位符（个人域名）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: http://www.wangxinri.cn</div></pre></td></tr></table></figure>\n<p>对于root（根目录）、permalink（永久链接）、permalink_defaults（默认永久链接）等其他信息保持默认。<br>如无个人域名，无需修改这一项。</p>\n<h3 id=\"3-配置部署\"><a href=\"#3-配置部署\" class=\"headerlink\" title=\"3). 配置部署\"></a>3). 配置部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy: </div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repo: https://github.com/xinrisanshao/xinrisanshao.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>其中repo项是之前Github上创建好的仓库的地址，，可以通过如下图所示的方式得到：</p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170806151918.png\" alt=\"\"></p>\n<h2 id=\"3-本地发布博客\"><a href=\"#3-本地发布博客\" class=\"headerlink\" title=\"3.  本地发布博客\"></a>3.  本地发布博客</h2><p>接下来，在网站中建立第一篇文章，<strong>打开终端，进入到博客文件夹根目录</strong>，这里是E:Github/hexo，然后输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new <span class=\"string\">\"文章标题\"</span></div></pre></td></tr></table></figure>\n<p>我们可以在本地博客文件夹source-&gt;_post文件夹下看到我们新建的markdown文件。通过Markdown编辑器对我们文章进行编辑，我这采用的是Markdownpad2编辑器。</p>\n<p>MarkdownPad2：<a href=\"http://download.csdn.net/detail/rentongtmd/8333707\" target=\"_blank\" rel=\"external\">点击下载</a></p>\n<p>Markdown语法：<a href=\"http://www.markdown.cn/\" target=\"_blank\" rel=\"external\">Markdown中文网</a></p>\n<p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>接下来,我们进行本地发布：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure></p>\n<p>执行完后，打开浏览器，输入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:4000/</div></pre></td></tr></table></figure></p>\n<p>我们可以在浏览器端看到我们搭建好的博客和发布的文章，如果访问失败，可能端口被占用，更换端口 hexo server -p 5000 ,将默认4000端口换成5000。<br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170806161241.png\" alt=\"\"></p>\n<h2 id=\"4-发布博客至github仓库\"><a href=\"#4-发布博客至github仓库\" class=\"headerlink\" title=\"4. 发布博客至github仓库\"></a>4. 发布博客至github仓库</h2><p>但是毕竟我们目前发布的博客只有本机看得到，怎么让其他人看到我们写的博客呢？这时候我们来看看博客的部署。</p>\n<p>打开终端，进入到博客文件夹根目录，这里还是<strong>E:Github/hexo</strong>，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure>\n<p>输入我们的网址：<a href=\"http://xinrisanshao.github.io\" target=\"_blank\" rel=\"external\">xinrisanshao.github.io</a> ,即可访问博客了。</p>\n<p>此时查看github中的仓库，发现我们博客文件夹根目录中的<strong>public文件夹</strong>里面的文件已经发布到仓库中了。</p>\n<p>此时搭建的博客还只是入门，外观确实一般般，接下来将更进一步，比如如何更换主题、如何管理博客等等。</p>\n<p>好累啊，先休息下，果然还是写博客最累啊。</p>"},{"title":"github Pages + Hexo搭建个人博客（二）  提升篇","date":"2017-08-07T04:59:25.000Z","update":null,"comments":1,"_content":"# 一、前言\n在之前的**初级篇**中介绍了如何搭建个人博客。本文介绍如何更换博客主题、设置第三方服务和最重要的如何管理发布博客。\n<!--more-->\n# 二、更换主题\n在这篇文章中，假定你已经成功安装了Hexo,并使用Hexo提供的命令创建了一个站点。\n\n在Hexo中有两份主要的配置文件，其名称都是**_config.yml**。其中，一份位于站点根目录下（此处为G:\\GitHub\\hexo），主要包含Hexo本身的配置；另一份位于主题根目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为**站点配置文件**，后者称为**主题配置文件**。 \n\n## 1. 安装NexT\nHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 \n### 1) 下载主题\n如果你熟悉Git，建议你使用**克隆最新版本**的方式，之后的更新可以通过**git pull**来快速更新，而不用再次下载压缩包替换。 （说多了都是累啊，早知道就该看官网了，我就是下载的压缩包，估计是没法快速更新了）\n\n在终端窗口下，定位到 Hexo 站点目录下。使用 Git 命令：\n``` bash\ncd G:\\GitHub\\hexo\ngit clone https://github.com/iissnan/hexo-theme-next themes/next  #后面意思是clone到该目录下themes/next文件夹中\n```\n### 2) 启用主题\n与所有 Hexo 主题启用的模式一样。当克隆/下载完成后，打开**站点配置文件**，找到**theme**字段，并将其值更改为**next**。 \n\n``` bash\ntheme: next\n```\n此时我们在**主题配置文件**中设置语言。修改**language**字段。在主题的languages文件夹中选择语言，此处目录为G:\\GitHub\\hexo\\themes\\next\\languages 。\n\n``` bash\nlanguage: zh-Hans   #选择汉语，选择其他语言填写其他值即可\n```\n\n到此，NexT主题安装完成。下一步将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用hexo clean 来清除Hexo的缓存。 \n\n### 3) 验证主题\n\n进入到博客文件夹根目录，此处为G:\\GitHub\\hexo，执行如下命令：\n\n``` bash\nhexo clean  #更换主题，最好先清除Hexo缓存\nhexo generate  #生成静态页面\nhexo server   # hexo server -p **** 更换默认4000端口为****\n```\n\n此时即可使用浏览器访问 http://localhost:4000。\n\n检查站点是否正确运行，如长时间访问不了，更改端口。\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170808201948.png)\n\n现在，你已经成功安装并启用了NexT主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。\n\n# 三、主题设定\n\nNexT官网和网上资料非常丰富，就不细说了，参考如下：\n\n官方参考：[NexT使用文档](http://theme-next.iissnan.com/getting-started.html)\n\n网上资源：[hexo的next主题个性化教程：打造炫酷网站](http://blog.csdn.net/qq_33699981/article/details/72716951)\n\n**补充几点：**\n## 1. 添加评论功能\n我选择的是**来比力**，很简单，注册一个账号，妈的，是韩国的网站，发验证码竟然是韩文，通过有道词典才知道它讲的是啥，输入四位验证码回车后，然后填写相关信息，申请获取代码，然后得到安装代码中的data-uid。\n\n编辑主题配置文件， 编辑 livere_uid 字段，设置如下：\n\n``` bash\nlivere_uid: #your livere_uid\n```\n\n## 2. 修改背景图片\n\n首先找到一个背景图片放到 hexo（hexo工程文件）-> themes -> next -> source -> images 的路径下；\n\n然后进入hexo（hexo工程文件）-> themes -> next -> source -> css -> _custom ，找到路径下的custom.styl文件，在文件的最上方加入如下代码就完事了。\n\n``` bash\n// Custom styles.\nbody {\n  background:url(/images/background.jpeg);\n  background-attachment: fixed;   #固定背景图，使得不随页面移动\n}\n```\n\n## 3. 修改博客内容宽度\nPisces Scheme 直接在./themes/next/source/css/_variables/custom.styl文件中添加\n\n``` bash\n$main-desktop = 1200px \n$content-desktop = 900px\n```\n\n可以避免直接修改源码，可以解决内容宽度问题，而且在移动设备上显示正常。\n\n参考：[感觉浏览器留白太多，代码块看起来比较麻烦](https://github.com/iissnan/hexo-theme-next/issues/759#issuecomment-202242848)\n\n## 4. 添加菜单栏\n在个人网站根目录下使用hexo命令hexo new page \"photo\" 就直接创建了.\\Hexo\\source\\photo\\index.md\n文件。\n\n在主题配置文件_config.yml中找到meun:字段，添加**photo**字段\n```xml\nmenu:\n  home: /\n  categories: /categories/\n  tags: /tags/\n  archives: /archives/\n  photo: /photo/\n  about: /about/\n  #sitemap: /sitemap.xml\n  #commonweal: /404.html\n```\n给photo添加相应的图标，还是刚才的主题配置文件_config.yml，添加**photo**字段：\n\n```xml\nmenu_icons:\n  enable: true\n  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome\n  home: home\n  about: user\n  categories: th\n  schedule: calendar\n  tags: tags\n  archives: archive\n  sitemap: sitemap\n  commonweal: heartbeat\n  photo: photo\n\n```\n\n在如下图标库中选择喜欢的icon，添加相应的名称即可，这里添加为**photo**：[点击选择图标](http://fontawesome.io/icons/)\n\n将网站中的**photo**字段显示为中文**照片**字段\n\n在\\themes\\next\\languages\\zh-Hans.yml添加：\n\n```xml\nmenu:\n  home: 首页\n  archives: 归档\n  categories: 分类\n  tags: 标签\n  about: 关于\n  search: 搜索\n  schedule: 日程表\n  sitemap: 站点地图\n  commonweal: 公益404\n  photo: 照片\n\n```\n\n## 5. 调整首页**文档摘要**和**阅读全文**按钮高度并删除居中灰色线条\n\n1.调整文档摘要的高度\n\n在/next/source/css/_common/components/post/post-meta.styl中修改**margin**的值\n\n```css\n.posts-expand .post-meta {\n  margin: 3px 0 10px 0;\n  color: $grey-dark;\n```\n\n2.调整阅读全文按钮高度\n\n在\\next\\source\\css\\_common\\components\\post\\post-button.styl中修改**margin-top**的值\n\n```css\n.post-button {\n  margin-top: 10px;\n  .btn {\n```\n\n3.去除首页文档与文档之间居中灰色的线条\n\n在\\next\\source\\css\\_common\\components\\post\\post-eof.styl中注释掉如下样式\n\n```css\n.posts-expand {\n  .post-eof {\n  /*\n    display: block;\n    margin: $post-eof-margin-top auto $post-eof-margin-bottom;\n    width: 8%;\n    height: 1px;\n    background: $grey-light;\n    text-align: center;\n  */\n  }\n}\n```\n\n最终效果如下：\n![](http://ou6yob3zd.bkt.clouddn.com/20170904100438.png)\n\n## 6. 归档页博文列表高度调整\n\n在\\next\\source\\css\\_common\\components\\post\\post-collapse.styl中修改.post\n\n```css\n  .post { margin: 0px 0; }\n```\n\n\n到这的时候，主题应该也优化的差不多，接下来就是写博客和管理了，加油搞起。\n\n# 四、博客管理维护\n\n## 1. 概述\n\nHexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，因为.md文件不存在了，就不可能了（除非你自己写html）。\n\n其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。\n\n**注：** .gitignoree文件中的内容是忽略上传至Github仓库的文件，这里我修改成如下：\n``` bash\n.deploy*/    #只忽略上传.deploy*/开头的文件\n```\n\n但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库）。\n\n所以，我利用了分支！！！\n\n简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。\n\n下面以我的博客作为例子详细地讲述。\n\n## 2. 博客搭建流程\n\n  1.创建仓库，xinrisanshao.github.io；\n\n  2.创建两个分支：master 与 hexo；\n\n  3.设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；\n\n  4.使用如下命令拷贝仓库\n\n``` bash\ngit clone https://github.com/xinrisanshao/xinrisanshao.github.io.git \n```\n  \n  5.在本地xinrisanshao.github.io文件夹下通过Git shell依次执行npm install hexo、hexo init、npm  \n   install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;\n\n  6.修改_config.yml中的deploy参数，分支应为master；\n  \n  7.依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件（Hexo网站根目录执行）；\n\n  8.执行hexo generate -d生成网站并部署到GitHub上（Hexo网站根目录执行）。\n\n这样一来，在GitHub上的xinrisanshao.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。修改了博客网站原始文件，然后发布到hexo分支上进行保存，同时修改后新的静态网页deploy到master,同步更新，两者都保存至Github仓库上，不怕文件丢失了。\n\n**注：**流程的5,6步hexo init创建的是一个新的Hexo网站文件，我们在本地配置好的Hexo+next主题的网站文件可以直接复制到.\\xinrisanshao.github.io\\文件夹中，直接代替5,6步创建的流程，这样就不需要我们再次重复配置了，其他的过程都是一样的。\n\n## 3. 博客管理流程\n\n### 1. 编辑与修改博客\n\n在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：\n\n1.依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；\n\n2.然后才执行hexo generate -d发布网站到master分支上。\n\n虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。\n\n### 2. 本地资料丢失\n当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：\n1.首先安装Git，Node.js和Hexo。\n\n2.使用下面命令拷贝仓库（默认分支为hexo）；\n\n``` bash\ngit clone https://github.com/xinrisanshao/xinrisanshao.github.io.git\n```\n\n3.因为之前的.gitignore文件只忽略了上传.deploy*/开头的文件，所以我们上传到hexo分支的是整个的Hexo网站文件，下载之后直接什么依赖配置都好了，此时即可照着编辑与修改博客流程进行博客编辑了，大功告成。\n\n以上博客管理参考：[点击查看](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more)\n\n### 3. 博客图片存放（补）\n如果将博客的图片放在Hexo网站文件中，那么加载博客的时候会变得非常慢，此时，我们可以选择一个合适的图床存放图片，然后获得图片的链接地址，这样访问速度会变快许多。\n\n我选择的是**七牛云**存放图片，具体使用方法很简单，注册账号，上传图片至空间中，这些就不细说了，网上一大堆资料。\n\n\n# 五、总结\n\n不想再敲了，好累！这也算是对搭建这个博客的一个总结吧，休息去。\n\n\n\n\n\n","source":"_posts/github Pages + Hexo搭建个人博客（二）  提升篇.md","raw":"---\ntitle: github Pages + Hexo搭建个人博客（二）  提升篇\ndate: 2017-08-07 12:59:25\nupdate:\ntags: [hexo,github]\ncategories: hexo\ncomments: true\n---\n# 一、前言\n在之前的**初级篇**中介绍了如何搭建个人博客。本文介绍如何更换博客主题、设置第三方服务和最重要的如何管理发布博客。\n<!--more-->\n# 二、更换主题\n在这篇文章中，假定你已经成功安装了Hexo,并使用Hexo提供的命令创建了一个站点。\n\n在Hexo中有两份主要的配置文件，其名称都是**_config.yml**。其中，一份位于站点根目录下（此处为G:\\GitHub\\hexo），主要包含Hexo本身的配置；另一份位于主题根目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为**站点配置文件**，后者称为**主题配置文件**。 \n\n## 1. 安装NexT\nHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 \n### 1) 下载主题\n如果你熟悉Git，建议你使用**克隆最新版本**的方式，之后的更新可以通过**git pull**来快速更新，而不用再次下载压缩包替换。 （说多了都是累啊，早知道就该看官网了，我就是下载的压缩包，估计是没法快速更新了）\n\n在终端窗口下，定位到 Hexo 站点目录下。使用 Git 命令：\n``` bash\ncd G:\\GitHub\\hexo\ngit clone https://github.com/iissnan/hexo-theme-next themes/next  #后面意思是clone到该目录下themes/next文件夹中\n```\n### 2) 启用主题\n与所有 Hexo 主题启用的模式一样。当克隆/下载完成后，打开**站点配置文件**，找到**theme**字段，并将其值更改为**next**。 \n\n``` bash\ntheme: next\n```\n此时我们在**主题配置文件**中设置语言。修改**language**字段。在主题的languages文件夹中选择语言，此处目录为G:\\GitHub\\hexo\\themes\\next\\languages 。\n\n``` bash\nlanguage: zh-Hans   #选择汉语，选择其他语言填写其他值即可\n```\n\n到此，NexT主题安装完成。下一步将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用hexo clean 来清除Hexo的缓存。 \n\n### 3) 验证主题\n\n进入到博客文件夹根目录，此处为G:\\GitHub\\hexo，执行如下命令：\n\n``` bash\nhexo clean  #更换主题，最好先清除Hexo缓存\nhexo generate  #生成静态页面\nhexo server   # hexo server -p **** 更换默认4000端口为****\n```\n\n此时即可使用浏览器访问 http://localhost:4000。\n\n检查站点是否正确运行，如长时间访问不了，更改端口。\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170808201948.png)\n\n现在，你已经成功安装并启用了NexT主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。\n\n# 三、主题设定\n\nNexT官网和网上资料非常丰富，就不细说了，参考如下：\n\n官方参考：[NexT使用文档](http://theme-next.iissnan.com/getting-started.html)\n\n网上资源：[hexo的next主题个性化教程：打造炫酷网站](http://blog.csdn.net/qq_33699981/article/details/72716951)\n\n**补充几点：**\n## 1. 添加评论功能\n我选择的是**来比力**，很简单，注册一个账号，妈的，是韩国的网站，发验证码竟然是韩文，通过有道词典才知道它讲的是啥，输入四位验证码回车后，然后填写相关信息，申请获取代码，然后得到安装代码中的data-uid。\n\n编辑主题配置文件， 编辑 livere_uid 字段，设置如下：\n\n``` bash\nlivere_uid: #your livere_uid\n```\n\n## 2. 修改背景图片\n\n首先找到一个背景图片放到 hexo（hexo工程文件）-> themes -> next -> source -> images 的路径下；\n\n然后进入hexo（hexo工程文件）-> themes -> next -> source -> css -> _custom ，找到路径下的custom.styl文件，在文件的最上方加入如下代码就完事了。\n\n``` bash\n// Custom styles.\nbody {\n  background:url(/images/background.jpeg);\n  background-attachment: fixed;   #固定背景图，使得不随页面移动\n}\n```\n\n## 3. 修改博客内容宽度\nPisces Scheme 直接在./themes/next/source/css/_variables/custom.styl文件中添加\n\n``` bash\n$main-desktop = 1200px \n$content-desktop = 900px\n```\n\n可以避免直接修改源码，可以解决内容宽度问题，而且在移动设备上显示正常。\n\n参考：[感觉浏览器留白太多，代码块看起来比较麻烦](https://github.com/iissnan/hexo-theme-next/issues/759#issuecomment-202242848)\n\n## 4. 添加菜单栏\n在个人网站根目录下使用hexo命令hexo new page \"photo\" 就直接创建了.\\Hexo\\source\\photo\\index.md\n文件。\n\n在主题配置文件_config.yml中找到meun:字段，添加**photo**字段\n```xml\nmenu:\n  home: /\n  categories: /categories/\n  tags: /tags/\n  archives: /archives/\n  photo: /photo/\n  about: /about/\n  #sitemap: /sitemap.xml\n  #commonweal: /404.html\n```\n给photo添加相应的图标，还是刚才的主题配置文件_config.yml，添加**photo**字段：\n\n```xml\nmenu_icons:\n  enable: true\n  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome\n  home: home\n  about: user\n  categories: th\n  schedule: calendar\n  tags: tags\n  archives: archive\n  sitemap: sitemap\n  commonweal: heartbeat\n  photo: photo\n\n```\n\n在如下图标库中选择喜欢的icon，添加相应的名称即可，这里添加为**photo**：[点击选择图标](http://fontawesome.io/icons/)\n\n将网站中的**photo**字段显示为中文**照片**字段\n\n在\\themes\\next\\languages\\zh-Hans.yml添加：\n\n```xml\nmenu:\n  home: 首页\n  archives: 归档\n  categories: 分类\n  tags: 标签\n  about: 关于\n  search: 搜索\n  schedule: 日程表\n  sitemap: 站点地图\n  commonweal: 公益404\n  photo: 照片\n\n```\n\n## 5. 调整首页**文档摘要**和**阅读全文**按钮高度并删除居中灰色线条\n\n1.调整文档摘要的高度\n\n在/next/source/css/_common/components/post/post-meta.styl中修改**margin**的值\n\n```css\n.posts-expand .post-meta {\n  margin: 3px 0 10px 0;\n  color: $grey-dark;\n```\n\n2.调整阅读全文按钮高度\n\n在\\next\\source\\css\\_common\\components\\post\\post-button.styl中修改**margin-top**的值\n\n```css\n.post-button {\n  margin-top: 10px;\n  .btn {\n```\n\n3.去除首页文档与文档之间居中灰色的线条\n\n在\\next\\source\\css\\_common\\components\\post\\post-eof.styl中注释掉如下样式\n\n```css\n.posts-expand {\n  .post-eof {\n  /*\n    display: block;\n    margin: $post-eof-margin-top auto $post-eof-margin-bottom;\n    width: 8%;\n    height: 1px;\n    background: $grey-light;\n    text-align: center;\n  */\n  }\n}\n```\n\n最终效果如下：\n![](http://ou6yob3zd.bkt.clouddn.com/20170904100438.png)\n\n## 6. 归档页博文列表高度调整\n\n在\\next\\source\\css\\_common\\components\\post\\post-collapse.styl中修改.post\n\n```css\n  .post { margin: 0px 0; }\n```\n\n\n到这的时候，主题应该也优化的差不多，接下来就是写博客和管理了，加油搞起。\n\n# 四、博客管理维护\n\n## 1. 概述\n\nHexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，因为.md文件不存在了，就不可能了（除非你自己写html）。\n\n其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。\n\n**注：** .gitignoree文件中的内容是忽略上传至Github仓库的文件，这里我修改成如下：\n``` bash\n.deploy*/    #只忽略上传.deploy*/开头的文件\n```\n\n但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库）。\n\n所以，我利用了分支！！！\n\n简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。\n\n下面以我的博客作为例子详细地讲述。\n\n## 2. 博客搭建流程\n\n  1.创建仓库，xinrisanshao.github.io；\n\n  2.创建两个分支：master 与 hexo；\n\n  3.设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；\n\n  4.使用如下命令拷贝仓库\n\n``` bash\ngit clone https://github.com/xinrisanshao/xinrisanshao.github.io.git \n```\n  \n  5.在本地xinrisanshao.github.io文件夹下通过Git shell依次执行npm install hexo、hexo init、npm  \n   install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;\n\n  6.修改_config.yml中的deploy参数，分支应为master；\n  \n  7.依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件（Hexo网站根目录执行）；\n\n  8.执行hexo generate -d生成网站并部署到GitHub上（Hexo网站根目录执行）。\n\n这样一来，在GitHub上的xinrisanshao.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。修改了博客网站原始文件，然后发布到hexo分支上进行保存，同时修改后新的静态网页deploy到master,同步更新，两者都保存至Github仓库上，不怕文件丢失了。\n\n**注：**流程的5,6步hexo init创建的是一个新的Hexo网站文件，我们在本地配置好的Hexo+next主题的网站文件可以直接复制到.\\xinrisanshao.github.io\\文件夹中，直接代替5,6步创建的流程，这样就不需要我们再次重复配置了，其他的过程都是一样的。\n\n## 3. 博客管理流程\n\n### 1. 编辑与修改博客\n\n在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：\n\n1.依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；\n\n2.然后才执行hexo generate -d发布网站到master分支上。\n\n虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。\n\n### 2. 本地资料丢失\n当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：\n1.首先安装Git，Node.js和Hexo。\n\n2.使用下面命令拷贝仓库（默认分支为hexo）；\n\n``` bash\ngit clone https://github.com/xinrisanshao/xinrisanshao.github.io.git\n```\n\n3.因为之前的.gitignore文件只忽略了上传.deploy*/开头的文件，所以我们上传到hexo分支的是整个的Hexo网站文件，下载之后直接什么依赖配置都好了，此时即可照着编辑与修改博客流程进行博客编辑了，大功告成。\n\n以上博客管理参考：[点击查看](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more)\n\n### 3. 博客图片存放（补）\n如果将博客的图片放在Hexo网站文件中，那么加载博客的时候会变得非常慢，此时，我们可以选择一个合适的图床存放图片，然后获得图片的链接地址，这样访问速度会变快许多。\n\n我选择的是**七牛云**存放图片，具体使用方法很简单，注册账号，上传图片至空间中，这些就不细说了，网上一大堆资料。\n\n\n# 五、总结\n\n不想再敲了，好累！这也算是对搭建这个博客的一个总结吧，休息去。\n\n\n\n\n\n","slug":"github Pages + Hexo搭建个人博客（二）  提升篇","published":1,"updated":"2017-09-04T03:09:46.386Z","_id":"cj6xk3rna000ph0ix5wj9x99s","layout":"post","photos":[],"link":"","content":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>在之前的<strong>初级篇</strong>中介绍了如何搭建个人博客。本文介绍如何更换博客主题、设置第三方服务和最重要的如何管理发布博客。<br><a id=\"more\"></a></p>\n<h1 id=\"二、更换主题\"><a href=\"#二、更换主题\" class=\"headerlink\" title=\"二、更换主题\"></a>二、更换主题</h1><p>在这篇文章中，假定你已经成功安装了Hexo,并使用Hexo提供的命令创建了一个站点。</p>\n<p>在Hexo中有两份主要的配置文件，其名称都是<strong>_config.yml</strong>。其中，一份位于站点根目录下（此处为G:\\GitHub\\hexo），主要包含Hexo本身的配置；另一份位于主题根目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n<p>为了描述方便，在以下说明中，将前者称为<strong>站点配置文件</strong>，后者称为<strong>主题配置文件</strong>。 </p>\n<h2 id=\"1-安装NexT\"><a href=\"#1-安装NexT\" class=\"headerlink\" title=\"1. 安装NexT\"></a>1. 安装NexT</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 </p>\n<h3 id=\"1-下载主题\"><a href=\"#1-下载主题\" class=\"headerlink\" title=\"1) 下载主题\"></a>1) 下载主题</h3><p>如果你熟悉Git，建议你使用<strong>克隆最新版本</strong>的方式，之后的更新可以通过<strong>git pull</strong>来快速更新，而不用再次下载压缩包替换。 （说多了都是累啊，早知道就该看官网了，我就是下载的压缩包，估计是没法快速更新了）</p>\n<p>在终端窗口下，定位到 Hexo 站点目录下。使用 Git 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> G:\\GitHub\\hexo</div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next  <span class=\"comment\">#后面意思是clone到该目录下themes/next文件夹中</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-启用主题\"><a href=\"#2-启用主题\" class=\"headerlink\" title=\"2) 启用主题\"></a>2) 启用主题</h3><p>与所有 Hexo 主题启用的模式一样。当克隆/下载完成后，打开<strong>站点配置文件</strong>，找到<strong>theme</strong>字段，并将其值更改为<strong>next</strong>。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: next</div></pre></td></tr></table></figure>\n<p>此时我们在<strong>主题配置文件</strong>中设置语言。修改<strong>language</strong>字段。在主题的languages文件夹中选择语言，此处目录为G:\\GitHub\\hexo\\themes\\next\\languages 。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: zh-Hans   <span class=\"comment\">#选择汉语，选择其他语言填写其他值即可</span></div></pre></td></tr></table></figure>\n<p>到此，NexT主题安装完成。下一步将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用hexo clean 来清除Hexo的缓存。 </p>\n<h3 id=\"3-验证主题\"><a href=\"#3-验证主题\" class=\"headerlink\" title=\"3) 验证主题\"></a>3) 验证主题</h3><p>进入到博客文件夹根目录，此处为G:\\GitHub\\hexo，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean  <span class=\"comment\">#更换主题，最好先清除Hexo缓存</span></div><div class=\"line\">hexo generate  <span class=\"comment\">#生成静态页面</span></div><div class=\"line\">hexo server   <span class=\"comment\"># hexo server -p **** 更换默认4000端口为****</span></div></pre></td></tr></table></figure>\n<p>此时即可使用浏览器访问 <a href=\"http://localhost:4000。\" target=\"_blank\" rel=\"external\">http://localhost:4000。</a></p>\n<p>检查站点是否正确运行，如长时间访问不了，更改端口。</p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170808201948.png\" alt=\"\"></p>\n<p>现在，你已经成功安装并启用了NexT主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p>\n<h1 id=\"三、主题设定\"><a href=\"#三、主题设定\" class=\"headerlink\" title=\"三、主题设定\"></a>三、主题设定</h1><p>NexT官网和网上资料非常丰富，就不细说了，参考如下：</p>\n<p>官方参考：<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">NexT使用文档</a></p>\n<p>网上资源：<a href=\"http://blog.csdn.net/qq_33699981/article/details/72716951\" target=\"_blank\" rel=\"external\">hexo的next主题个性化教程：打造炫酷网站</a></p>\n<p><strong>补充几点：</strong></p>\n<h2 id=\"1-添加评论功能\"><a href=\"#1-添加评论功能\" class=\"headerlink\" title=\"1. 添加评论功能\"></a>1. 添加评论功能</h2><p>我选择的是<strong>来比力</strong>，很简单，注册一个账号，妈的，是韩国的网站，发验证码竟然是韩文，通过有道词典才知道它讲的是啥，输入四位验证码回车后，然后填写相关信息，申请获取代码，然后得到安装代码中的data-uid。</p>\n<p>编辑主题配置文件， 编辑 livere_uid 字段，设置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">livere_uid: <span class=\"comment\">#your livere_uid</span></div></pre></td></tr></table></figure>\n<h2 id=\"2-修改背景图片\"><a href=\"#2-修改背景图片\" class=\"headerlink\" title=\"2. 修改背景图片\"></a>2. 修改背景图片</h2><p>首先找到一个背景图片放到 hexo（hexo工程文件）-&gt; themes -&gt; next -&gt; source -&gt; images 的路径下；</p>\n<p>然后进入hexo（hexo工程文件）-&gt; themes -&gt; next -&gt; source -&gt; css -&gt; _custom ，找到路径下的custom.styl文件，在文件的最上方加入如下代码就完事了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Custom styles.</div><div class=\"line\">body &#123;</div><div class=\"line\">  background:url(/images/background.jpeg);</div><div class=\"line\">  background-attachment: fixed;   <span class=\"comment\">#固定背景图，使得不随页面移动</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-修改博客内容宽度\"><a href=\"#3-修改博客内容宽度\" class=\"headerlink\" title=\"3. 修改博客内容宽度\"></a>3. 修改博客内容宽度</h2><p>Pisces Scheme 直接在./themes/next/source/css/_variables/custom.styl文件中添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$main</span>-desktop = 1200px </div><div class=\"line\"><span class=\"variable\">$content</span>-desktop = 900px</div></pre></td></tr></table></figure>\n<p>可以避免直接修改源码，可以解决内容宽度问题，而且在移动设备上显示正常。</p>\n<p>参考：<a href=\"https://github.com/iissnan/hexo-theme-next/issues/759#issuecomment-202242848\" target=\"_blank\" rel=\"external\">感觉浏览器留白太多，代码块看起来比较麻烦</a></p>\n<h2 id=\"4-添加菜单栏\"><a href=\"#4-添加菜单栏\" class=\"headerlink\" title=\"4. 添加菜单栏\"></a>4. 添加菜单栏</h2><p>在个人网站根目录下使用hexo命令hexo new page “photo” 就直接创建了.\\Hexo\\source\\photo\\index.md<br>文件。</p>\n<p>在主题配置文件_config.yml中找到meun:字段，添加<strong>photo</strong>字段<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: /</div><div class=\"line\">  categories: /categories/</div><div class=\"line\">  tags: /tags/</div><div class=\"line\">  archives: /archives/</div><div class=\"line\">  photo: /photo/</div><div class=\"line\">  about: /about/</div><div class=\"line\">  #sitemap: /sitemap.xml</div><div class=\"line\">  #commonweal: /404.html</div></pre></td></tr></table></figure></p>\n<p>给photo添加相应的图标，还是刚才的主题配置文件_config.yml，添加<strong>photo</strong>字段：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu_icons:</div><div class=\"line\">  enable: true</div><div class=\"line\">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</div><div class=\"line\">  home: home</div><div class=\"line\">  about: user</div><div class=\"line\">  categories: th</div><div class=\"line\">  schedule: calendar</div><div class=\"line\">  tags: tags</div><div class=\"line\">  archives: archive</div><div class=\"line\">  sitemap: sitemap</div><div class=\"line\">  commonweal: heartbeat</div><div class=\"line\">  photo: photo</div></pre></td></tr></table></figure>\n<p>在如下图标库中选择喜欢的icon，添加相应的名称即可，这里添加为<strong>photo</strong>：<a href=\"http://fontawesome.io/icons/\" target=\"_blank\" rel=\"external\">点击选择图标</a></p>\n<p>将网站中的<strong>photo</strong>字段显示为中文<strong>照片</strong>字段</p>\n<p>在\\themes\\next\\languages\\zh-Hans.yml添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: 首页</div><div class=\"line\">  archives: 归档</div><div class=\"line\">  categories: 分类</div><div class=\"line\">  tags: 标签</div><div class=\"line\">  about: 关于</div><div class=\"line\">  search: 搜索</div><div class=\"line\">  schedule: 日程表</div><div class=\"line\">  sitemap: 站点地图</div><div class=\"line\">  commonweal: 公益404</div><div class=\"line\">  photo: 照片</div></pre></td></tr></table></figure>\n<h2 id=\"5-调整首页文档摘要和阅读全文按钮高度并删除居中灰色线条\"><a href=\"#5-调整首页文档摘要和阅读全文按钮高度并删除居中灰色线条\" class=\"headerlink\" title=\"5. 调整首页文档摘要和阅读全文按钮高度并删除居中灰色线条\"></a>5. 调整首页<strong>文档摘要</strong>和<strong>阅读全文</strong>按钮高度并删除居中灰色线条</h2><p>1.调整文档摘要的高度</p>\n<p>在/next/source/css/_common/components/post/post-meta.styl中修改<strong>margin</strong>的值</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.posts-expand</span> <span class=\"selector-class\">.post-meta</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">3px</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: $grey-dark;</div></pre></td></tr></table></figure>\n<p>2.调整阅读全文按钮高度</p>\n<p>在\\next\\source\\css_common\\components\\post\\post-button.styl中修改<strong>margin-top</strong>的值</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.post-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  .btn &#123;</div></pre></td></tr></table></figure>\n<p>3.去除首页文档与文档之间居中灰色的线条</p>\n<p>在\\next\\source\\css_common\\components\\post\\post-eof.styl中注释掉如下样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.posts-expand</span> &#123;</div><div class=\"line\">  .post-eof &#123;</div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">    display: block;</span></div><div class=\"line\"><span class=\"comment\">    margin: $post-eof-margin-top auto $post-eof-margin-bottom;</span></div><div class=\"line\"><span class=\"comment\">    width: 8%;</span></div><div class=\"line\"><span class=\"comment\">    height: 1px;</span></div><div class=\"line\"><span class=\"comment\">    background: $grey-light;</span></div><div class=\"line\"><span class=\"comment\">    text-align: center;</span></div><div class=\"line\"><span class=\"comment\">  */</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最终效果如下：<br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170904100438.png\" alt=\"\"></p>\n<h2 id=\"6-归档页博文列表高度调整\"><a href=\"#6-归档页博文列表高度调整\" class=\"headerlink\" title=\"6. 归档页博文列表高度调整\"></a>6. 归档页博文列表高度调整</h2><p>在\\next\\source\\css_common\\components\\post\\post-collapse.styl中修改.post</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.post</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0px</span> <span class=\"number\">0</span>; &#125;</div></pre></td></tr></table></figure>\n<p>到这的时候，主题应该也优化的差不多，接下来就是写博客和管理了，加油搞起。</p>\n<h1 id=\"四、博客管理维护\"><a href=\"#四、博客管理维护\" class=\"headerlink\" title=\"四、博客管理维护\"></a>四、博客管理维护</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，因为.md文件不存在了，就不可能了（除非你自己写html）。</p>\n<p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p>\n<p><strong>注：</strong> .gitignoree文件中的内容是忽略上传至Github仓库的文件，这里我修改成如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.deploy*/    <span class=\"comment\">#只忽略上传.deploy*/开头的文件</span></div></pre></td></tr></table></figure></p>\n<p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库）。</p>\n<p>所以，我利用了分支！！！</p>\n<p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p>\n<p>下面以我的博客作为例子详细地讲述。</p>\n<h2 id=\"2-博客搭建流程\"><a href=\"#2-博客搭建流程\" class=\"headerlink\" title=\"2. 博客搭建流程\"></a>2. 博客搭建流程</h2><p>  1.创建仓库，xinrisanshao.github.io；</p>\n<p>  2.创建两个分支：master 与 hexo；</p>\n<p>  3.设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</p>\n<p>  4.使用如下命令拷贝仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/xinrisanshao/xinrisanshao.github.io.git</div></pre></td></tr></table></figure>\n<p>  5.在本地xinrisanshao.github.io文件夹下通过Git shell依次执行npm install hexo、hexo init、npm<br>   install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</p>\n<p>  6.修改_config.yml中的deploy参数，分支应为master；</p>\n<p>  7.依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件（Hexo网站根目录执行）；</p>\n<p>  8.执行hexo generate -d生成网站并部署到GitHub上（Hexo网站根目录执行）。</p>\n<p>这样一来，在GitHub上的xinrisanshao.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。修改了博客网站原始文件，然后发布到hexo分支上进行保存，同时修改后新的静态网页deploy到master,同步更新，两者都保存至Github仓库上，不怕文件丢失了。</p>\n<p><strong>注：</strong>流程的5,6步hexo init创建的是一个新的Hexo网站文件，我们在本地配置好的Hexo+next主题的网站文件可以直接复制到.\\xinrisanshao.github.io\\文件夹中，直接代替5,6步创建的流程，这样就不需要我们再次重复配置了，其他的过程都是一样的。</p>\n<h2 id=\"3-博客管理流程\"><a href=\"#3-博客管理流程\" class=\"headerlink\" title=\"3. 博客管理流程\"></a>3. 博客管理流程</h2><h3 id=\"1-编辑与修改博客\"><a href=\"#1-编辑与修改博客\" class=\"headerlink\" title=\"1. 编辑与修改博客\"></a>1. 编辑与修改博客</h3><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p>\n<p>1.依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；</p>\n<p>2.然后才执行hexo generate -d发布网站到master分支上。</p>\n<p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p>\n<h3 id=\"2-本地资料丢失\"><a href=\"#2-本地资料丢失\" class=\"headerlink\" title=\"2. 本地资料丢失\"></a>2. 本地资料丢失</h3><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：<br>1.首先安装Git，Node.js和Hexo。</p>\n<p>2.使用下面命令拷贝仓库（默认分支为hexo）；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/xinrisanshao/xinrisanshao.github.io.git</div></pre></td></tr></table></figure>\n<p>3.因为之前的.gitignore文件只忽略了上传.deploy*/开头的文件，所以我们上传到hexo分支的是整个的Hexo网站文件，下载之后直接什么依赖配置都好了，此时即可照着编辑与修改博客流程进行博客编辑了，大功告成。</p>\n<p>以上博客管理参考：<a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"external\">点击查看</a></p>\n<h3 id=\"3-博客图片存放（补）\"><a href=\"#3-博客图片存放（补）\" class=\"headerlink\" title=\"3. 博客图片存放（补）\"></a>3. 博客图片存放（补）</h3><p>如果将博客的图片放在Hexo网站文件中，那么加载博客的时候会变得非常慢，此时，我们可以选择一个合适的图床存放图片，然后获得图片的链接地址，这样访问速度会变快许多。</p>\n<p>我选择的是<strong>七牛云</strong>存放图片，具体使用方法很简单，注册账号，上传图片至空间中，这些就不细说了，网上一大堆资料。</p>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h1><p>不想再敲了，好累！这也算是对搭建这个博客的一个总结吧，休息去。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h1><p>在之前的<strong>初级篇</strong>中介绍了如何搭建个人博客。本文介绍如何更换博客主题、设置第三方服务和最重要的如何管理发布博客。<br>","more":"</p>\n<h1 id=\"二、更换主题\"><a href=\"#二、更换主题\" class=\"headerlink\" title=\"二、更换主题\"></a>二、更换主题</h1><p>在这篇文章中，假定你已经成功安装了Hexo,并使用Hexo提供的命令创建了一个站点。</p>\n<p>在Hexo中有两份主要的配置文件，其名称都是<strong>_config.yml</strong>。其中，一份位于站点根目录下（此处为G:\\GitHub\\hexo），主要包含Hexo本身的配置；另一份位于主题根目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n<p>为了描述方便，在以下说明中，将前者称为<strong>站点配置文件</strong>，后者称为<strong>主题配置文件</strong>。 </p>\n<h2 id=\"1-安装NexT\"><a href=\"#1-安装NexT\" class=\"headerlink\" title=\"1. 安装NexT\"></a>1. 安装NexT</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 </p>\n<h3 id=\"1-下载主题\"><a href=\"#1-下载主题\" class=\"headerlink\" title=\"1) 下载主题\"></a>1) 下载主题</h3><p>如果你熟悉Git，建议你使用<strong>克隆最新版本</strong>的方式，之后的更新可以通过<strong>git pull</strong>来快速更新，而不用再次下载压缩包替换。 （说多了都是累啊，早知道就该看官网了，我就是下载的压缩包，估计是没法快速更新了）</p>\n<p>在终端窗口下，定位到 Hexo 站点目录下。使用 Git 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> G:\\GitHub\\hexo</div><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next  <span class=\"comment\">#后面意思是clone到该目录下themes/next文件夹中</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-启用主题\"><a href=\"#2-启用主题\" class=\"headerlink\" title=\"2) 启用主题\"></a>2) 启用主题</h3><p>与所有 Hexo 主题启用的模式一样。当克隆/下载完成后，打开<strong>站点配置文件</strong>，找到<strong>theme</strong>字段，并将其值更改为<strong>next</strong>。 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: next</div></pre></td></tr></table></figure>\n<p>此时我们在<strong>主题配置文件</strong>中设置语言。修改<strong>language</strong>字段。在主题的languages文件夹中选择语言，此处目录为G:\\GitHub\\hexo\\themes\\next\\languages 。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: zh-Hans   <span class=\"comment\">#选择汉语，选择其他语言填写其他值即可</span></div></pre></td></tr></table></figure>\n<p>到此，NexT主题安装完成。下一步将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用hexo clean 来清除Hexo的缓存。 </p>\n<h3 id=\"3-验证主题\"><a href=\"#3-验证主题\" class=\"headerlink\" title=\"3) 验证主题\"></a>3) 验证主题</h3><p>进入到博客文件夹根目录，此处为G:\\GitHub\\hexo，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean  <span class=\"comment\">#更换主题，最好先清除Hexo缓存</span></div><div class=\"line\">hexo generate  <span class=\"comment\">#生成静态页面</span></div><div class=\"line\">hexo server   <span class=\"comment\"># hexo server -p **** 更换默认4000端口为****</span></div></pre></td></tr></table></figure>\n<p>此时即可使用浏览器访问 <a href=\"http://localhost:4000。\" target=\"_blank\" rel=\"external\">http://localhost:4000。</a></p>\n<p>检查站点是否正确运行，如长时间访问不了，更改端口。</p>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170808201948.png\" alt=\"\"></p>\n<p>现在，你已经成功安装并启用了NexT主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p>\n<h1 id=\"三、主题设定\"><a href=\"#三、主题设定\" class=\"headerlink\" title=\"三、主题设定\"></a>三、主题设定</h1><p>NexT官网和网上资料非常丰富，就不细说了，参考如下：</p>\n<p>官方参考：<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">NexT使用文档</a></p>\n<p>网上资源：<a href=\"http://blog.csdn.net/qq_33699981/article/details/72716951\" target=\"_blank\" rel=\"external\">hexo的next主题个性化教程：打造炫酷网站</a></p>\n<p><strong>补充几点：</strong></p>\n<h2 id=\"1-添加评论功能\"><a href=\"#1-添加评论功能\" class=\"headerlink\" title=\"1. 添加评论功能\"></a>1. 添加评论功能</h2><p>我选择的是<strong>来比力</strong>，很简单，注册一个账号，妈的，是韩国的网站，发验证码竟然是韩文，通过有道词典才知道它讲的是啥，输入四位验证码回车后，然后填写相关信息，申请获取代码，然后得到安装代码中的data-uid。</p>\n<p>编辑主题配置文件， 编辑 livere_uid 字段，设置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">livere_uid: <span class=\"comment\">#your livere_uid</span></div></pre></td></tr></table></figure>\n<h2 id=\"2-修改背景图片\"><a href=\"#2-修改背景图片\" class=\"headerlink\" title=\"2. 修改背景图片\"></a>2. 修改背景图片</h2><p>首先找到一个背景图片放到 hexo（hexo工程文件）-&gt; themes -&gt; next -&gt; source -&gt; images 的路径下；</p>\n<p>然后进入hexo（hexo工程文件）-&gt; themes -&gt; next -&gt; source -&gt; css -&gt; _custom ，找到路径下的custom.styl文件，在文件的最上方加入如下代码就完事了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Custom styles.</div><div class=\"line\">body &#123;</div><div class=\"line\">  background:url(/images/background.jpeg);</div><div class=\"line\">  background-attachment: fixed;   <span class=\"comment\">#固定背景图，使得不随页面移动</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"3-修改博客内容宽度\"><a href=\"#3-修改博客内容宽度\" class=\"headerlink\" title=\"3. 修改博客内容宽度\"></a>3. 修改博客内容宽度</h2><p>Pisces Scheme 直接在./themes/next/source/css/_variables/custom.styl文件中添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$main</span>-desktop = 1200px </div><div class=\"line\"><span class=\"variable\">$content</span>-desktop = 900px</div></pre></td></tr></table></figure>\n<p>可以避免直接修改源码，可以解决内容宽度问题，而且在移动设备上显示正常。</p>\n<p>参考：<a href=\"https://github.com/iissnan/hexo-theme-next/issues/759#issuecomment-202242848\" target=\"_blank\" rel=\"external\">感觉浏览器留白太多，代码块看起来比较麻烦</a></p>\n<h2 id=\"4-添加菜单栏\"><a href=\"#4-添加菜单栏\" class=\"headerlink\" title=\"4. 添加菜单栏\"></a>4. 添加菜单栏</h2><p>在个人网站根目录下使用hexo命令hexo new page “photo” 就直接创建了.\\Hexo\\source\\photo\\index.md<br>文件。</p>\n<p>在主题配置文件_config.yml中找到meun:字段，添加<strong>photo</strong>字段<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: /</div><div class=\"line\">  categories: /categories/</div><div class=\"line\">  tags: /tags/</div><div class=\"line\">  archives: /archives/</div><div class=\"line\">  photo: /photo/</div><div class=\"line\">  about: /about/</div><div class=\"line\">  #sitemap: /sitemap.xml</div><div class=\"line\">  #commonweal: /404.html</div></pre></td></tr></table></figure></p>\n<p>给photo添加相应的图标，还是刚才的主题配置文件_config.yml，添加<strong>photo</strong>字段：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu_icons:</div><div class=\"line\">  enable: true</div><div class=\"line\">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</div><div class=\"line\">  home: home</div><div class=\"line\">  about: user</div><div class=\"line\">  categories: th</div><div class=\"line\">  schedule: calendar</div><div class=\"line\">  tags: tags</div><div class=\"line\">  archives: archive</div><div class=\"line\">  sitemap: sitemap</div><div class=\"line\">  commonweal: heartbeat</div><div class=\"line\">  photo: photo</div></pre></td></tr></table></figure>\n<p>在如下图标库中选择喜欢的icon，添加相应的名称即可，这里添加为<strong>photo</strong>：<a href=\"http://fontawesome.io/icons/\" target=\"_blank\" rel=\"external\">点击选择图标</a></p>\n<p>将网站中的<strong>photo</strong>字段显示为中文<strong>照片</strong>字段</p>\n<p>在\\themes\\next\\languages\\zh-Hans.yml添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: 首页</div><div class=\"line\">  archives: 归档</div><div class=\"line\">  categories: 分类</div><div class=\"line\">  tags: 标签</div><div class=\"line\">  about: 关于</div><div class=\"line\">  search: 搜索</div><div class=\"line\">  schedule: 日程表</div><div class=\"line\">  sitemap: 站点地图</div><div class=\"line\">  commonweal: 公益404</div><div class=\"line\">  photo: 照片</div></pre></td></tr></table></figure>\n<h2 id=\"5-调整首页文档摘要和阅读全文按钮高度并删除居中灰色线条\"><a href=\"#5-调整首页文档摘要和阅读全文按钮高度并删除居中灰色线条\" class=\"headerlink\" title=\"5. 调整首页文档摘要和阅读全文按钮高度并删除居中灰色线条\"></a>5. 调整首页<strong>文档摘要</strong>和<strong>阅读全文</strong>按钮高度并删除居中灰色线条</h2><p>1.调整文档摘要的高度</p>\n<p>在/next/source/css/_common/components/post/post-meta.styl中修改<strong>margin</strong>的值</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.posts-expand</span> <span class=\"selector-class\">.post-meta</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">3px</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: $grey-dark;</div></pre></td></tr></table></figure>\n<p>2.调整阅读全文按钮高度</p>\n<p>在\\next\\source\\css_common\\components\\post\\post-button.styl中修改<strong>margin-top</strong>的值</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.post-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  .btn &#123;</div></pre></td></tr></table></figure>\n<p>3.去除首页文档与文档之间居中灰色的线条</p>\n<p>在\\next\\source\\css_common\\components\\post\\post-eof.styl中注释掉如下样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.posts-expand</span> &#123;</div><div class=\"line\">  .post-eof &#123;</div><div class=\"line\">  <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">    display: block;</span></div><div class=\"line\"><span class=\"comment\">    margin: $post-eof-margin-top auto $post-eof-margin-bottom;</span></div><div class=\"line\"><span class=\"comment\">    width: 8%;</span></div><div class=\"line\"><span class=\"comment\">    height: 1px;</span></div><div class=\"line\"><span class=\"comment\">    background: $grey-light;</span></div><div class=\"line\"><span class=\"comment\">    text-align: center;</span></div><div class=\"line\"><span class=\"comment\">  */</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最终效果如下：<br><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170904100438.png\" alt=\"\"></p>\n<h2 id=\"6-归档页博文列表高度调整\"><a href=\"#6-归档页博文列表高度调整\" class=\"headerlink\" title=\"6. 归档页博文列表高度调整\"></a>6. 归档页博文列表高度调整</h2><p>在\\next\\source\\css_common\\components\\post\\post-collapse.styl中修改.post</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.post</span> &#123; <span class=\"attribute\">margin</span>: <span class=\"number\">0px</span> <span class=\"number\">0</span>; &#125;</div></pre></td></tr></table></figure>\n<p>到这的时候，主题应该也优化的差不多，接下来就是写博客和管理了，加油搞起。</p>\n<h1 id=\"四、博客管理维护\"><a href=\"#四、博客管理维护\" class=\"headerlink\" title=\"四、博客管理维护\"></a>四、博客管理维护</h1><h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，因为.md文件不存在了，就不可能了（除非你自己写html）。</p>\n<p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p>\n<p><strong>注：</strong> .gitignoree文件中的内容是忽略上传至Github仓库的文件，这里我修改成如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.deploy*/    <span class=\"comment\">#只忽略上传.deploy*/开头的文件</span></div></pre></td></tr></table></figure></p>\n<p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库）。</p>\n<p>所以，我利用了分支！！！</p>\n<p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p>\n<p>下面以我的博客作为例子详细地讲述。</p>\n<h2 id=\"2-博客搭建流程\"><a href=\"#2-博客搭建流程\" class=\"headerlink\" title=\"2. 博客搭建流程\"></a>2. 博客搭建流程</h2><p>  1.创建仓库，xinrisanshao.github.io；</p>\n<p>  2.创建两个分支：master 与 hexo；</p>\n<p>  3.设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</p>\n<p>  4.使用如下命令拷贝仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/xinrisanshao/xinrisanshao.github.io.git</div></pre></td></tr></table></figure>\n<p>  5.在本地xinrisanshao.github.io文件夹下通过Git shell依次执行npm install hexo、hexo init、npm<br>   install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</p>\n<p>  6.修改_config.yml中的deploy参数，分支应为master；</p>\n<p>  7.依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件（Hexo网站根目录执行）；</p>\n<p>  8.执行hexo generate -d生成网站并部署到GitHub上（Hexo网站根目录执行）。</p>\n<p>这样一来，在GitHub上的xinrisanshao.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。修改了博客网站原始文件，然后发布到hexo分支上进行保存，同时修改后新的静态网页deploy到master,同步更新，两者都保存至Github仓库上，不怕文件丢失了。</p>\n<p><strong>注：</strong>流程的5,6步hexo init创建的是一个新的Hexo网站文件，我们在本地配置好的Hexo+next主题的网站文件可以直接复制到.\\xinrisanshao.github.io\\文件夹中，直接代替5,6步创建的流程，这样就不需要我们再次重复配置了，其他的过程都是一样的。</p>\n<h2 id=\"3-博客管理流程\"><a href=\"#3-博客管理流程\" class=\"headerlink\" title=\"3. 博客管理流程\"></a>3. 博客管理流程</h2><h3 id=\"1-编辑与修改博客\"><a href=\"#1-编辑与修改博客\" class=\"headerlink\" title=\"1. 编辑与修改博客\"></a>1. 编辑与修改博客</h3><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p>\n<p>1.依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；</p>\n<p>2.然后才执行hexo generate -d发布网站到master分支上。</p>\n<p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p>\n<h3 id=\"2-本地资料丢失\"><a href=\"#2-本地资料丢失\" class=\"headerlink\" title=\"2. 本地资料丢失\"></a>2. 本地资料丢失</h3><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：<br>1.首先安装Git，Node.js和Hexo。</p>\n<p>2.使用下面命令拷贝仓库（默认分支为hexo）；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/xinrisanshao/xinrisanshao.github.io.git</div></pre></td></tr></table></figure>\n<p>3.因为之前的.gitignore文件只忽略了上传.deploy*/开头的文件，所以我们上传到hexo分支的是整个的Hexo网站文件，下载之后直接什么依赖配置都好了，此时即可照着编辑与修改博客流程进行博客编辑了，大功告成。</p>\n<p>以上博客管理参考：<a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"external\">点击查看</a></p>\n<h3 id=\"3-博客图片存放（补）\"><a href=\"#3-博客图片存放（补）\" class=\"headerlink\" title=\"3. 博客图片存放（补）\"></a>3. 博客图片存放（补）</h3><p>如果将博客的图片放在Hexo网站文件中，那么加载博客的时候会变得非常慢，此时，我们可以选择一个合适的图床存放图片，然后获得图片的链接地址，这样访问速度会变快许多。</p>\n<p>我选择的是<strong>七牛云</strong>存放图片，具体使用方法很简单，注册账号，上传图片至空间中，这些就不细说了，网上一大堆资料。</p>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h1><p>不想再敲了，好累！这也算是对搭建这个博客的一个总结吧，休息去。</p>"},{"title":"牛客网-剑指offer","date":"2017-08-19T01:30:25.000Z","update":null,"comments":1,"_content":"\n# 前言\n牛客网剑指offer题目汇总，记录自己刷题历程，原文链接：[点击查看](https://www.nowcoder.com/ta/coding-interviews)\n<!--more-->\n## 题目一：二维数组中的查找   （数组）\n\n**题目描述:**在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n**思路：**矩阵从左到右，从上到下都是有序的，因此，先查找目标数target在二维数组中的哪一行，通过判断是否在该行的第一个数和最后一个数之间，如果是，则定位到了行，因为该行是有序的，所以接下来通过二分查找，即可查找成功。\n\n**注：**时间复杂度的话，查找行花了O(n), 二分查找O(logn),总共应该O(n)+O(logn),奇怪的是我使用普通的遍历查找，运行时间更更少！这不科学，二分查找效率应该更高，这应该是数据量小导致的。\n\n**代码：**\n\n```java\npublic class Solution {\n    public boolean Find(int target, int [][] array) {\n        if(array[0].length==0) { //[[]]的情况\n            return false;\n        }   //判断二维数组是否为空\n        for(int i=0;i<array.length;i++) {\n            // 找出target所在二维数组的行\n            if(target>=array[i][0]&&target<=array[i][array[i].length-1]) {\n                //找到所在行之后，因为该行是有序的，此时使用二分查找即可\n                int low = 0;\n                int high = array[i].length-1;\n                int mid;\n                while(low<=high) {\n                    mid = (high + low)/2;\n                    if(array[i][mid]>target) {\n                        high = mid - 1;\n                    }else if(array[i][mid]<target){\n                        low = mid + 1;\n                    }else {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n\n## 题目二：替换空格  （字符串）\n\n**题目描述:**请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n**思路：**\n\n**第一种：** 直接用StringBuffer提供的replace函数。(不可取，得自己搞)\n\n```java\nreplace(int start, int end, String str);\n```\n\nReplaces the characters in a substring of this sequence with characters in the specified String.\n\n**第二种：** 先统计出空格的个数，然后计算得到替换后的字符串的长度，然后重新更新字符串的长度，此时，**从后向前**遍历字符串，如果是空格，替换，如果不是空格，赋原值，知道遍历结束。\n\n**注：**从后往前，每个空格后面的字符只需要移动一次。从前往后，当遇到第一个空格时，要移动第一个空格后所有的字符一次；当遇到第二个空格时，要移动第二个空格后所有的字符一次；以此类推。所以总的移动次数会更多。\n\n**代码：**\n\n```java\npublic class Solution {\n    public String replaceSpace(StringBuffer str) {\n        int oldlength = str.length()-1;\n        int newlength = oldlength;  //替换之后新数组的大小\n        for(int i=0;i<str.length();i++) {\n            if(str.charAt(i)==' '){\n                newlength += 2;   //由一个' '变为\"%20\",长度增加2\n            }\n        }\n        str.setLength(newlength+1);  //扩展str的长度,多余的位置是空字符\n        //此时oldlength和newlength都是数组的长度-1\n        for(;oldlength>=0&&oldlength<newlength;oldlength--){\n            if(str.charAt(oldlength)==' '){\n                str.setCharAt(newlength--, '0');\n                str.setCharAt(newlength--, '2');\n                str.setCharAt(newlength--, '%');\n            }else{\n                str.setCharAt(newlength--, str.charAt(oldlength));\n            }\n        }\n        return str.toString();\n    }\n}\n```\n## 题目三：从尾到头打印链表 （链表）\n\n**题目描述:**输入一个链表，从尾到头打印链表每个节点的值。\n\n**思路：**\n\n**第一种：** 遍历链表，将链表存入Arraylist数组vals中，然后对vals进行反转。(确实很low)\n\n**第二种：** 使用递归思想，递归到最后一个结点，然后层层返回，此时依次add进vals数组中。\n\n**代码：**\n\n```java\n/**\n*    public class ListNode {\n*        int val;\n*        ListNode next = null;\n*\n*        ListNode(int val) {\n*            this.val = val;\n*        }\n*    }\n*\n*/\nimport java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> vals = new ArrayList<>();\n        int count=0;\n        while(listNode != null) {\n            vals.add(listNode.val);\n            listNode = listNode.next;\n            count++;\n        }\n        for(int i=0;i<count/2;i++) {\n            int tem = vals.get(i);\n            vals.set(i, vals.get(count-i-1));\n            vals.set(count-i-1, tem);\n        }\n        return vals;  \n    }\n}\n```\n\n```java\npublic class linklist{\n    public static ArrayList<Integer> vals = new ArrayList<>();\n    public static void printListFromTailToHead(ListNode listNode) {\n        if(listNode != null) {\n            printListFromTailToHead(listNode.next);\n    \t    vals.add(listNode.val);\n        }\n    }\n    //return val; 返回val不需要，因为vals本身就相当于全局变量一样，每次迭代更新的都是同一个vals。\n}\n```\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170819204904.png)\n\n## 题目四：重建二叉树 （树）\n\n## 题目五：用两个栈实现队列 （栈、队列）\n\n**题目描述:**用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。\n\n**思路：**\n \n入队push:将元素进栈A。\n\n出队pop:判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，然后栈B出站。\n\n**注：** 1 push，将数据直接压入stack1即可；2 pop,将stack1中的数据弹出压入到stack2中，则数据顺序相反，为保证最新进入的数据一致处于栈顶，只有将stack2中的数据全部pop后，才能继续将stack1中的数据压入到stack2中，继续做pop。\n\n**代码：**\n\n```java\npublic class Solution {\n    Stack<Integer> stack1 = new Stack<Integer>();\n    Stack<Integer> stack2 = new Stack<Integer>();\n     \n    public void push(int node) {\n        stack1.push(node);\n    }\n     \n    public int pop() {\n        while(stack1.empty()&&stack2.empty()){\n            System.out.println(\"队列为空!\");\n        }\n        if(stack2.empty()){\n            while(!stack1.empty()){\n                stack2.push(stack1.pop());\n            }\n        }\n        return stack2.pop();\n    }\n}\n```\n## 题目十一：二进制中1的个数 （位运算）\n**题目描述:**输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。\n\n**思路：**\n\n**方法一：** 通过n&n-1可以消除整数最右边的1。多次执行n=n&n-1，最终n为0时，表示所有的1都被消除了，消除1所执行的次数即为1的个数。\n\n**分析：**为啥n&n-1可以消除整数最右边的1？ 如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变成0，原来在最右边1后面的所有的0都会变成1（如果最右边的1后面还有0的话）。其余所有位将不会受到影响。我们发现减1的结果是把从最右边的1开始的所有位都取反了，这个时候将n于n-1做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变为0，那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。\n\n    n=12          1100 \n    n-1=11        1011\n    n=12&11       1000\n    n=8           1000\n    n-1=7         0111\n    n=8&7         0000\n\n**代码：**\n```java\npublic int NumberOf1(int n) {  \n    int count = 0;\n    while(n!=0){\n        n &= n-1;\n        count++;\n    }\n    return count;\n}\n```\n\n更多参考点击：[算法-求二进制数中1的个数](http://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html)\n\n## 题目十二：数值的整数次方 （代码的完整性）\n**题目：**给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。\n\n**思路：**\n\n**方法一：**估计是个人都能想出来，假设要求a^b，只需将a连乘b次，此时的时间复杂度是O(b)。\n\n**方法二：** **快速幂**，快速幂能将复杂度降至O(logb)，确实是快了不少。\n\n原理：假设我们要求a^b，b拆成二进制时，该二进制数第i位的权值为2^(i-1)，如下：\n\na^11 = a^(1011) = a^(1000+0010+0001) = a^(2^0 + 2^1 + 2^3) = a^(2^0)\\*a^(2^1)\\*a^(2^3)\n\n通过使用&和>>位运算操作，依次遍历指数二进制表示中的每一位，我们发现，结果为每一位值为1时，也即a^(2^i)的累乘，此时，相邻位的值都是前一个值的翻倍。\n\n更多信息：[快速幂](http://www.cnblogs.com/CXCXCXC/p/4641812.html)\n\n**代码：**\n```java\npublic class Solution {\n    public double Power(double base, int exponent) {\n        double result = 1.0;\n        int e = exponent;\n        exponent = Math.abs(exponent);\n        if(exponent == 0){\n            return result;\n        }\n        while(exponent!=0){\n            if((exponent&1)==1){\n                result *= base;\n            }\n            base *= base;    //每移动一位，该为代表的乘数都翻倍\n            exponent = exponent >> 1;  //右移一位\n        }\n        return e>0?result:1/result;    \n    }\n}\n```\n\n\n## 题目十三：调整数组顺序使奇数位于偶数前面 （数组）\n**题目描述:**输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。\n\n**思路：**\n\n**方法一：** 插入排序的思想。从第二个数开始，之前的数（也就只有一个数）是已经排好序的，此时如果第二个数是奇数的话，我们只需要插入到之前序列中所有偶数之前，如果是偶数的话，则不需要插入；继续第三个数，依次遍历完数组即可。\n\n**方法二：**重新定义一个vector，从前往后遍历vector,遇到奇数push_back；再遍历一遍vector，遇到偶数push_back,以空间换时间，这就不实现了，easy。\n\n**代码：**\n```java\npublic class Solution {\n    public void reOrderArray(int [] array) {\n        for(int i=1;i<array.length;i++){\n    \t    if(array[i]%2==0){  //偶数的话，继续下一个数\n                continue;\n    \t    }else{   \n                int tem = array[i];  //保存待插入到偶数之前的奇数\n                int j;\n                for(j=i-1;j>=0&&(array[j]%2==0);j--){  //找到偶数之前插入的位置\n                    array[j+1] = array[j];  //偶数集体后移一位\n                }\n                array[j+1] = tem;  //将奇数插入到该位置上\n            }\n    \t}      \n    }\n}\n```\n\n## 题目十四：链表中倒数第k个结点\n**题目描述:**输入一个链表，输出该链表中倒数第k个结点。\n\n**思路：** 定义两个指针p1,p2，分别指向表头，再定义count=0,表示p1在第0个结点，此时p1开始遍历链表，每经过一个结点count++，当count>=k时，p2开始遍历链表，直到p1遍历结束，此时p2指向的结点即为倒数第k个结点。\n\n**代码：**\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n \n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode FindKthToTail(ListNode head,int k) {\n        int count = 0;\n        ListNode p = head;\n        ListNode node = null;  //head为空，返回null\n        if(k<=0) return node;  //k<=0无效，返回null\n        while(head!=null){\n            count++;\n            head = head.next;\n            if(count >= k) {  //相对第一个元素为k-1的间隔时,head和p同时往后走\n                node = p;\n                p = p.next;\n            }\n        }\n        return node;\n    }\n}\n```\n\n## 题目十五：反转链表\n**题目描述:**输入一个链表，反转链表后，输出链表的所有元素。\n\n**思路：** 依次遍历每个结点，同时通过头插法再重新创建新的链表\n\n**注：**可以利用之前的结点，而不需要重新创建新的结点，以后改进。\n\n**代码：**\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n \n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n        ListNode p = null;\n        if(head == null) {\n            return p;\n        }else{\n            p = new ListNode(head.val);\n        }\n        ListNode q = head.next;\n        while(q!=null){\n            ListNode s = new ListNode(q.val);\n            s.next = p;\n            p = s;\n            q = q.next;\n        }\n        return p;\n    }\n}\n```\n\n\n## 题目十六：合并两个排序的链表\n**题目描述:**输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\n\n**思路：** 当两个链表list1，list2（指向第一个结点）不空时，比较list1.val和list2.val的值，较小的作为合并后的第一个结点，假设list1.val较小，此时list1 = list1.next，继续比较list1.val和list2.val，直到某一个链表遍历结束，将没遍历结束的链表添加到合并后链表末尾。\n\n**注：**可以利用之前的结点，而不需要重新创建新的结点，这样，最后直接指向没遍历结束的链表即可，同时也节省了创建新的结点的空间，后续改进。\n\n**代码：**\n\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n \n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2) {\n        ListNode p = new ListNode(0);  //创建一个头结点,数据域初始化为0，不存储数据,指针域为null\n        ListNode head = p ;  //头指针,指向头结点\n        if(list1 == null && list2 == null) return null;\n        while(list1!=null && list2!=null){\n            if(list1.val < list2.val){\n                ListNode s = new ListNode(list1.val);\n                p.next = s;\n                p = s;\n                list1 = list1.next;\n                 \n            }else {\n                ListNode s = new ListNode(list2.val);\n                p.next = s;\n                p = s;\n                list2 = list2.next;\n            }\n        }\n        while(list1!=null){\n            ListNode s = new ListNode(list1.val);\n            p.next = s;\n            p = s;\n            list1 = list1.next;\n        }\n        while(list2!=null){\n            ListNode s = new ListNode(list2.val);\n            p.next = s;\n            p = s;\n            list2 = list2.next;\n        }\n        return head.next;  //头结点不存储元素,head.next指向第一个元素节点，返回 \n    }\n}\n```","source":"_posts/剑指offer.md","raw":"---\ntitle: 牛客网-剑指offer\ndate: 2017-08-19 9:30:25\nupdate:\ntags: [剑指offer,刷题,编程]\ncategories: 刷题\ncomments: true\n---\n\n# 前言\n牛客网剑指offer题目汇总，记录自己刷题历程，原文链接：[点击查看](https://www.nowcoder.com/ta/coding-interviews)\n<!--more-->\n## 题目一：二维数组中的查找   （数组）\n\n**题目描述:**在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n**思路：**矩阵从左到右，从上到下都是有序的，因此，先查找目标数target在二维数组中的哪一行，通过判断是否在该行的第一个数和最后一个数之间，如果是，则定位到了行，因为该行是有序的，所以接下来通过二分查找，即可查找成功。\n\n**注：**时间复杂度的话，查找行花了O(n), 二分查找O(logn),总共应该O(n)+O(logn),奇怪的是我使用普通的遍历查找，运行时间更更少！这不科学，二分查找效率应该更高，这应该是数据量小导致的。\n\n**代码：**\n\n```java\npublic class Solution {\n    public boolean Find(int target, int [][] array) {\n        if(array[0].length==0) { //[[]]的情况\n            return false;\n        }   //判断二维数组是否为空\n        for(int i=0;i<array.length;i++) {\n            // 找出target所在二维数组的行\n            if(target>=array[i][0]&&target<=array[i][array[i].length-1]) {\n                //找到所在行之后，因为该行是有序的，此时使用二分查找即可\n                int low = 0;\n                int high = array[i].length-1;\n                int mid;\n                while(low<=high) {\n                    mid = (high + low)/2;\n                    if(array[i][mid]>target) {\n                        high = mid - 1;\n                    }else if(array[i][mid]<target){\n                        low = mid + 1;\n                    }else {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n\n## 题目二：替换空格  （字符串）\n\n**题目描述:**请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n**思路：**\n\n**第一种：** 直接用StringBuffer提供的replace函数。(不可取，得自己搞)\n\n```java\nreplace(int start, int end, String str);\n```\n\nReplaces the characters in a substring of this sequence with characters in the specified String.\n\n**第二种：** 先统计出空格的个数，然后计算得到替换后的字符串的长度，然后重新更新字符串的长度，此时，**从后向前**遍历字符串，如果是空格，替换，如果不是空格，赋原值，知道遍历结束。\n\n**注：**从后往前，每个空格后面的字符只需要移动一次。从前往后，当遇到第一个空格时，要移动第一个空格后所有的字符一次；当遇到第二个空格时，要移动第二个空格后所有的字符一次；以此类推。所以总的移动次数会更多。\n\n**代码：**\n\n```java\npublic class Solution {\n    public String replaceSpace(StringBuffer str) {\n        int oldlength = str.length()-1;\n        int newlength = oldlength;  //替换之后新数组的大小\n        for(int i=0;i<str.length();i++) {\n            if(str.charAt(i)==' '){\n                newlength += 2;   //由一个' '变为\"%20\",长度增加2\n            }\n        }\n        str.setLength(newlength+1);  //扩展str的长度,多余的位置是空字符\n        //此时oldlength和newlength都是数组的长度-1\n        for(;oldlength>=0&&oldlength<newlength;oldlength--){\n            if(str.charAt(oldlength)==' '){\n                str.setCharAt(newlength--, '0');\n                str.setCharAt(newlength--, '2');\n                str.setCharAt(newlength--, '%');\n            }else{\n                str.setCharAt(newlength--, str.charAt(oldlength));\n            }\n        }\n        return str.toString();\n    }\n}\n```\n## 题目三：从尾到头打印链表 （链表）\n\n**题目描述:**输入一个链表，从尾到头打印链表每个节点的值。\n\n**思路：**\n\n**第一种：** 遍历链表，将链表存入Arraylist数组vals中，然后对vals进行反转。(确实很low)\n\n**第二种：** 使用递归思想，递归到最后一个结点，然后层层返回，此时依次add进vals数组中。\n\n**代码：**\n\n```java\n/**\n*    public class ListNode {\n*        int val;\n*        ListNode next = null;\n*\n*        ListNode(int val) {\n*            this.val = val;\n*        }\n*    }\n*\n*/\nimport java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> vals = new ArrayList<>();\n        int count=0;\n        while(listNode != null) {\n            vals.add(listNode.val);\n            listNode = listNode.next;\n            count++;\n        }\n        for(int i=0;i<count/2;i++) {\n            int tem = vals.get(i);\n            vals.set(i, vals.get(count-i-1));\n            vals.set(count-i-1, tem);\n        }\n        return vals;  \n    }\n}\n```\n\n```java\npublic class linklist{\n    public static ArrayList<Integer> vals = new ArrayList<>();\n    public static void printListFromTailToHead(ListNode listNode) {\n        if(listNode != null) {\n            printListFromTailToHead(listNode.next);\n    \t    vals.add(listNode.val);\n        }\n    }\n    //return val; 返回val不需要，因为vals本身就相当于全局变量一样，每次迭代更新的都是同一个vals。\n}\n```\n\n![](http://ou6yob3zd.bkt.clouddn.com/20170819204904.png)\n\n## 题目四：重建二叉树 （树）\n\n## 题目五：用两个栈实现队列 （栈、队列）\n\n**题目描述:**用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。\n\n**思路：**\n \n入队push:将元素进栈A。\n\n出队pop:判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，然后栈B出站。\n\n**注：** 1 push，将数据直接压入stack1即可；2 pop,将stack1中的数据弹出压入到stack2中，则数据顺序相反，为保证最新进入的数据一致处于栈顶，只有将stack2中的数据全部pop后，才能继续将stack1中的数据压入到stack2中，继续做pop。\n\n**代码：**\n\n```java\npublic class Solution {\n    Stack<Integer> stack1 = new Stack<Integer>();\n    Stack<Integer> stack2 = new Stack<Integer>();\n     \n    public void push(int node) {\n        stack1.push(node);\n    }\n     \n    public int pop() {\n        while(stack1.empty()&&stack2.empty()){\n            System.out.println(\"队列为空!\");\n        }\n        if(stack2.empty()){\n            while(!stack1.empty()){\n                stack2.push(stack1.pop());\n            }\n        }\n        return stack2.pop();\n    }\n}\n```\n## 题目十一：二进制中1的个数 （位运算）\n**题目描述:**输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。\n\n**思路：**\n\n**方法一：** 通过n&n-1可以消除整数最右边的1。多次执行n=n&n-1，最终n为0时，表示所有的1都被消除了，消除1所执行的次数即为1的个数。\n\n**分析：**为啥n&n-1可以消除整数最右边的1？ 如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变成0，原来在最右边1后面的所有的0都会变成1（如果最右边的1后面还有0的话）。其余所有位将不会受到影响。我们发现减1的结果是把从最右边的1开始的所有位都取反了，这个时候将n于n-1做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变为0，那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。\n\n    n=12          1100 \n    n-1=11        1011\n    n=12&11       1000\n    n=8           1000\n    n-1=7         0111\n    n=8&7         0000\n\n**代码：**\n```java\npublic int NumberOf1(int n) {  \n    int count = 0;\n    while(n!=0){\n        n &= n-1;\n        count++;\n    }\n    return count;\n}\n```\n\n更多参考点击：[算法-求二进制数中1的个数](http://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html)\n\n## 题目十二：数值的整数次方 （代码的完整性）\n**题目：**给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。\n\n**思路：**\n\n**方法一：**估计是个人都能想出来，假设要求a^b，只需将a连乘b次，此时的时间复杂度是O(b)。\n\n**方法二：** **快速幂**，快速幂能将复杂度降至O(logb)，确实是快了不少。\n\n原理：假设我们要求a^b，b拆成二进制时，该二进制数第i位的权值为2^(i-1)，如下：\n\na^11 = a^(1011) = a^(1000+0010+0001) = a^(2^0 + 2^1 + 2^3) = a^(2^0)\\*a^(2^1)\\*a^(2^3)\n\n通过使用&和>>位运算操作，依次遍历指数二进制表示中的每一位，我们发现，结果为每一位值为1时，也即a^(2^i)的累乘，此时，相邻位的值都是前一个值的翻倍。\n\n更多信息：[快速幂](http://www.cnblogs.com/CXCXCXC/p/4641812.html)\n\n**代码：**\n```java\npublic class Solution {\n    public double Power(double base, int exponent) {\n        double result = 1.0;\n        int e = exponent;\n        exponent = Math.abs(exponent);\n        if(exponent == 0){\n            return result;\n        }\n        while(exponent!=0){\n            if((exponent&1)==1){\n                result *= base;\n            }\n            base *= base;    //每移动一位，该为代表的乘数都翻倍\n            exponent = exponent >> 1;  //右移一位\n        }\n        return e>0?result:1/result;    \n    }\n}\n```\n\n\n## 题目十三：调整数组顺序使奇数位于偶数前面 （数组）\n**题目描述:**输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。\n\n**思路：**\n\n**方法一：** 插入排序的思想。从第二个数开始，之前的数（也就只有一个数）是已经排好序的，此时如果第二个数是奇数的话，我们只需要插入到之前序列中所有偶数之前，如果是偶数的话，则不需要插入；继续第三个数，依次遍历完数组即可。\n\n**方法二：**重新定义一个vector，从前往后遍历vector,遇到奇数push_back；再遍历一遍vector，遇到偶数push_back,以空间换时间，这就不实现了，easy。\n\n**代码：**\n```java\npublic class Solution {\n    public void reOrderArray(int [] array) {\n        for(int i=1;i<array.length;i++){\n    \t    if(array[i]%2==0){  //偶数的话，继续下一个数\n                continue;\n    \t    }else{   \n                int tem = array[i];  //保存待插入到偶数之前的奇数\n                int j;\n                for(j=i-1;j>=0&&(array[j]%2==0);j--){  //找到偶数之前插入的位置\n                    array[j+1] = array[j];  //偶数集体后移一位\n                }\n                array[j+1] = tem;  //将奇数插入到该位置上\n            }\n    \t}      \n    }\n}\n```\n\n## 题目十四：链表中倒数第k个结点\n**题目描述:**输入一个链表，输出该链表中倒数第k个结点。\n\n**思路：** 定义两个指针p1,p2，分别指向表头，再定义count=0,表示p1在第0个结点，此时p1开始遍历链表，每经过一个结点count++，当count>=k时，p2开始遍历链表，直到p1遍历结束，此时p2指向的结点即为倒数第k个结点。\n\n**代码：**\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n \n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode FindKthToTail(ListNode head,int k) {\n        int count = 0;\n        ListNode p = head;\n        ListNode node = null;  //head为空，返回null\n        if(k<=0) return node;  //k<=0无效，返回null\n        while(head!=null){\n            count++;\n            head = head.next;\n            if(count >= k) {  //相对第一个元素为k-1的间隔时,head和p同时往后走\n                node = p;\n                p = p.next;\n            }\n        }\n        return node;\n    }\n}\n```\n\n## 题目十五：反转链表\n**题目描述:**输入一个链表，反转链表后，输出链表的所有元素。\n\n**思路：** 依次遍历每个结点，同时通过头插法再重新创建新的链表\n\n**注：**可以利用之前的结点，而不需要重新创建新的结点，以后改进。\n\n**代码：**\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n \n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n        ListNode p = null;\n        if(head == null) {\n            return p;\n        }else{\n            p = new ListNode(head.val);\n        }\n        ListNode q = head.next;\n        while(q!=null){\n            ListNode s = new ListNode(q.val);\n            s.next = p;\n            p = s;\n            q = q.next;\n        }\n        return p;\n    }\n}\n```\n\n\n## 题目十六：合并两个排序的链表\n**题目描述:**输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\n\n**思路：** 当两个链表list1，list2（指向第一个结点）不空时，比较list1.val和list2.val的值，较小的作为合并后的第一个结点，假设list1.val较小，此时list1 = list1.next，继续比较list1.val和list2.val，直到某一个链表遍历结束，将没遍历结束的链表添加到合并后链表末尾。\n\n**注：**可以利用之前的结点，而不需要重新创建新的结点，这样，最后直接指向没遍历结束的链表即可，同时也节省了创建新的结点的空间，后续改进。\n\n**代码：**\n\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n \n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2) {\n        ListNode p = new ListNode(0);  //创建一个头结点,数据域初始化为0，不存储数据,指针域为null\n        ListNode head = p ;  //头指针,指向头结点\n        if(list1 == null && list2 == null) return null;\n        while(list1!=null && list2!=null){\n            if(list1.val < list2.val){\n                ListNode s = new ListNode(list1.val);\n                p.next = s;\n                p = s;\n                list1 = list1.next;\n                 \n            }else {\n                ListNode s = new ListNode(list2.val);\n                p.next = s;\n                p = s;\n                list2 = list2.next;\n            }\n        }\n        while(list1!=null){\n            ListNode s = new ListNode(list1.val);\n            p.next = s;\n            p = s;\n            list1 = list1.next;\n        }\n        while(list2!=null){\n            ListNode s = new ListNode(list2.val);\n            p.next = s;\n            p = s;\n            list2 = list2.next;\n        }\n        return head.next;  //头结点不存储元素,head.next指向第一个元素节点，返回 \n    }\n}\n```","slug":"剑指offer","published":1,"updated":"2017-08-26T12:02:42.769Z","layout":"post","photos":[],"link":"","_id":"cj6xk3rng000th0ixh8sx0l30","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>牛客网剑指offer题目汇总，记录自己刷题历程，原文链接：<a href=\"https://www.nowcoder.com/ta/coding-interviews\" target=\"_blank\" rel=\"external\">点击查看</a><br><a id=\"more\"></a></p>\n<h2 id=\"题目一：二维数组中的查找-（数组）\"><a href=\"#题目一：二维数组中的查找-（数组）\" class=\"headerlink\" title=\"题目一：二维数组中的查找   （数组）\"></a>题目一：二维数组中的查找   （数组）</h2><p><strong>题目描述:</strong>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>思路：</strong>矩阵从左到右，从上到下都是有序的，因此，先查找目标数target在二维数组中的哪一行，通过判断是否在该行的第一个数和最后一个数之间，如果是，则定位到了行，因为该行是有序的，所以接下来通过二分查找，即可查找成功。</p>\n<p><strong>注：</strong>时间复杂度的话，查找行花了O(n), 二分查找O(logn),总共应该O(n)+O(logn),奇怪的是我使用普通的遍历查找，运行时间更更少！这不科学，二分查找效率应该更高，这应该是数据量小导致的。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> [][] array)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(array[<span class=\"number\">0</span>].length==<span class=\"number\">0</span>) &#123; <span class=\"comment\">//[[]]的情况</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;   <span class=\"comment\">//判断二维数组是否为空</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;array.length;i++) &#123;</div><div class=\"line\">            <span class=\"comment\">// 找出target所在二维数组的行</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(target&gt;=array[i][<span class=\"number\">0</span>]&amp;&amp;target&lt;=array[i][array[i].length-<span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                <span class=\"comment\">//找到所在行之后，因为该行是有序的，此时使用二分查找即可</span></div><div class=\"line\">                <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> high = array[i].length-<span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> mid;</div><div class=\"line\">                <span class=\"keyword\">while</span>(low&lt;=high) &#123;</div><div class=\"line\">                    mid = (high + low)/<span class=\"number\">2</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(array[i][mid]&gt;target) &#123;</div><div class=\"line\">                        high = mid - <span class=\"number\">1</span>;</div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(array[i][mid]&lt;target)&#123;</div><div class=\"line\">                        low = mid + <span class=\"number\">1</span>;</div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"题目二：替换空格-（字符串）\"><a href=\"#题目二：替换空格-（字符串）\" class=\"headerlink\" title=\"题目二：替换空格  （字符串）\"></a>题目二：替换空格  （字符串）</h2><p><strong>题目描述:</strong>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n<p><strong>思路：</strong></p>\n<p><strong>第一种：</strong> 直接用StringBuffer提供的replace函数。(不可取，得自己搞)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">replace(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, String str);</div></pre></td></tr></table></figure>\n<p>Replaces the characters in a substring of this sequence with characters in the specified String.</p>\n<p><strong>第二种：</strong> 先统计出空格的个数，然后计算得到替换后的字符串的长度，然后重新更新字符串的长度，此时，<strong>从后向前</strong>遍历字符串，如果是空格，替换，如果不是空格，赋原值，知道遍历结束。</p>\n<p><strong>注：</strong>从后往前，每个空格后面的字符只需要移动一次。从前往后，当遇到第一个空格时，要移动第一个空格后所有的字符一次；当遇到第二个空格时，要移动第二个空格后所有的字符一次；以此类推。所以总的移动次数会更多。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceSpace</span><span class=\"params\">(StringBuffer str)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldlength = str.length()-<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> newlength = oldlength;  <span class=\"comment\">//替换之后新数组的大小</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;str.length();i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(str.charAt(i)==<span class=\"string\">' '</span>)&#123;</div><div class=\"line\">                newlength += <span class=\"number\">2</span>;   <span class=\"comment\">//由一个' '变为\"%20\",长度增加2</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        str.setLength(newlength+<span class=\"number\">1</span>);  <span class=\"comment\">//扩展str的长度,多余的位置是空字符</span></div><div class=\"line\">        <span class=\"comment\">//此时oldlength和newlength都是数组的长度-1</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(;oldlength&gt;=<span class=\"number\">0</span>&amp;&amp;oldlength&lt;newlength;oldlength--)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(str.charAt(oldlength)==<span class=\"string\">' '</span>)&#123;</div><div class=\"line\">                str.setCharAt(newlength--, <span class=\"string\">'0'</span>);</div><div class=\"line\">                str.setCharAt(newlength--, <span class=\"string\">'2'</span>);</div><div class=\"line\">                str.setCharAt(newlength--, <span class=\"string\">'%'</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                str.setCharAt(newlength--, str.charAt(oldlength));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> str.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"题目三：从尾到头打印链表-（链表）\"><a href=\"#题目三：从尾到头打印链表-（链表）\" class=\"headerlink\" title=\"题目三：从尾到头打印链表 （链表）\"></a>题目三：从尾到头打印链表 （链表）</h2><p><strong>题目描述:</strong>输入一个链表，从尾到头打印链表每个节点的值。</p>\n<p><strong>思路：</strong></p>\n<p><strong>第一种：</strong> 遍历链表，将链表存入Arraylist数组vals中，然后对vals进行反转。(确实很low)</p>\n<p><strong>第二种：</strong> 使用递归思想，递归到最后一个结点，然后层层返回，此时依次add进vals数组中。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">*    public class ListNode &#123;</span></div><div class=\"line\"><span class=\"comment\">*        int val;</span></div><div class=\"line\"><span class=\"comment\">*        ListNode next = null;</span></div><div class=\"line\"><span class=\"comment\">*</span></div><div class=\"line\"><span class=\"comment\">*        ListNode(int val) &#123;</span></div><div class=\"line\"><span class=\"comment\">*            this.val = val;</span></div><div class=\"line\"><span class=\"comment\">*        &#125;</span></div><div class=\"line\"><span class=\"comment\">*    &#125;</span></div><div class=\"line\"><span class=\"comment\">*</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> </span>&#123;</div><div class=\"line\">        ArrayList&lt;Integer&gt; vals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(listNode != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            vals.add(listNode.val);</div><div class=\"line\">            listNode = listNode.next;</div><div class=\"line\">            count++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;count/<span class=\"number\">2</span>;i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> tem = vals.get(i);</div><div class=\"line\">            vals.set(i, vals.get(count-i-<span class=\"number\">1</span>));</div><div class=\"line\">            vals.set(count-i-<span class=\"number\">1</span>, tem);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> vals;  </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">linklist</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; vals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(listNode != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            printListFromTailToHead(listNode.next);</div><div class=\"line\">    \t    vals.add(listNode.val);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//return val; 返回val不需要，因为vals本身就相当于全局变量一样，每次迭代更新的都是同一个vals。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170819204904.png\" alt=\"\"></p>\n<h2 id=\"题目四：重建二叉树-（树）\"><a href=\"#题目四：重建二叉树-（树）\" class=\"headerlink\" title=\"题目四：重建二叉树 （树）\"></a>题目四：重建二叉树 （树）</h2><h2 id=\"题目五：用两个栈实现队列-（栈、队列）\"><a href=\"#题目五：用两个栈实现队列-（栈、队列）\" class=\"headerlink\" title=\"题目五：用两个栈实现队列 （栈、队列）\"></a>题目五：用两个栈实现队列 （栈、队列）</h2><p><strong>题目描述:</strong>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>\n<p><strong>思路：</strong></p>\n<p>入队push:将元素进栈A。</p>\n<p>出队pop:判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，然后栈B出站。</p>\n<p><strong>注：</strong> 1 push，将数据直接压入stack1即可；2 pop,将stack1中的数据弹出压入到stack2中，则数据顺序相反，为保证最新进入的数据一致处于栈顶，只有将stack2中的数据全部pop后，才能继续将stack1中的数据压入到stack2中，继续做pop。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    Stack&lt;Integer&gt; stack1 = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">    Stack&lt;Integer&gt; stack2 = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</div><div class=\"line\">        stack1.push(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(stack1.empty()&amp;&amp;stack2.empty())&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"队列为空!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(stack2.empty())&#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>(!stack1.empty())&#123;</div><div class=\"line\">                stack2.push(stack1.pop());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> stack2.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"题目十一：二进制中1的个数-（位运算）\"><a href=\"#题目十一：二进制中1的个数-（位运算）\" class=\"headerlink\" title=\"题目十一：二进制中1的个数 （位运算）\"></a>题目十一：二进制中1的个数 （位运算）</h2><p><strong>题目描述:</strong>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>\n<p><strong>思路：</strong></p>\n<p><strong>方法一：</strong> 通过n&amp;n-1可以消除整数最右边的1。多次执行n=n&amp;n-1，最终n为0时，表示所有的1都被消除了，消除1所执行的次数即为1的个数。</p>\n<p><strong>分析：</strong>为啥n&amp;n-1可以消除整数最右边的1？ 如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变成0，原来在最右边1后面的所有的0都会变成1（如果最右边的1后面还有0的话）。其余所有位将不会受到影响。我们发现减1的结果是把从最右边的1开始的所有位都取反了，这个时候将n于n-1做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变为0，那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。</p>\n<pre><code>n=12          1100 \nn-1=11        1011\nn=12&amp;11       1000\nn=8           1000\nn-1=7         0111\nn=8&amp;7         0000\n</code></pre><p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(n!=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        n &amp;= n-<span class=\"number\">1</span>;</div><div class=\"line\">        count++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更多参考点击：<a href=\"http://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html\" target=\"_blank\" rel=\"external\">算法-求二进制数中1的个数</a></p>\n<h2 id=\"题目十二：数值的整数次方-（代码的完整性）\"><a href=\"#题目十二：数值的整数次方-（代码的完整性）\" class=\"headerlink\" title=\"题目十二：数值的整数次方 （代码的完整性）\"></a>题目十二：数值的整数次方 （代码的完整性）</h2><p><strong>题目：</strong>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>\n<p><strong>思路：</strong></p>\n<p><strong>方法一：</strong>估计是个人都能想出来，假设要求a^b，只需将a连乘b次，此时的时间复杂度是O(b)。</p>\n<p><strong>方法二：</strong> <strong>快速幂</strong>，快速幂能将复杂度降至O(logb)，确实是快了不少。</p>\n<p>原理：假设我们要求a^b，b拆成二进制时，该二进制数第i位的权值为2^(i-1)，如下：</p>\n<p>a^11 = a^(1011) = a^(1000+0010+0001) = a^(2^0 + 2^1 + 2^3) = a^(2^0)*a^(2^1)*a^(2^3)</p>\n<p>通过使用&amp;和&gt;&gt;位运算操作，依次遍历指数二进制表示中的每一位，我们发现，结果为每一位值为1时，也即a^(2^i)的累乘，此时，相邻位的值都是前一个值的翻倍。</p>\n<p>更多信息：<a href=\"http://www.cnblogs.com/CXCXCXC/p/4641812.html\" target=\"_blank\" rel=\"external\">快速幂</a></p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">Power</span><span class=\"params\">(<span class=\"keyword\">double</span> base, <span class=\"keyword\">int</span> exponent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">double</span> result = <span class=\"number\">1.0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> e = exponent;</div><div class=\"line\">        exponent = Math.abs(exponent);</div><div class=\"line\">        <span class=\"keyword\">if</span>(exponent == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(exponent!=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((exponent&amp;<span class=\"number\">1</span>)==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">                result *= base;</div><div class=\"line\">            &#125;</div><div class=\"line\">            base *= base;    <span class=\"comment\">//每移动一位，该为代表的乘数都翻倍</span></div><div class=\"line\">            exponent = exponent &gt;&gt; <span class=\"number\">1</span>;  <span class=\"comment\">//右移一位</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> e&gt;<span class=\"number\">0</span>?result:<span class=\"number\">1</span>/result;    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目十三：调整数组顺序使奇数位于偶数前面-（数组）\"><a href=\"#题目十三：调整数组顺序使奇数位于偶数前面-（数组）\" class=\"headerlink\" title=\"题目十三：调整数组顺序使奇数位于偶数前面 （数组）\"></a>题目十三：调整数组顺序使奇数位于偶数前面 （数组）</h2><p><strong>题目描述:</strong>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>\n<p><strong>思路：</strong></p>\n<p><strong>方法一：</strong> 插入排序的思想。从第二个数开始，之前的数（也就只有一个数）是已经排好序的，此时如果第二个数是奇数的话，我们只需要插入到之前序列中所有偶数之前，如果是偶数的话，则不需要插入；继续第三个数，依次遍历完数组即可。</p>\n<p><strong>方法二：</strong>重新定义一个vector，从前往后遍历vector,遇到奇数push_back；再遍历一遍vector，遇到偶数push_back,以空间换时间，这就不实现了，easy。</p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reOrderArray</span><span class=\"params\">(<span class=\"keyword\">int</span> [] array)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;array.length;i++)&#123;</div><div class=\"line\">    \t    <span class=\"keyword\">if</span>(array[i]%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;  <span class=\"comment\">//偶数的话，继续下一个数</span></div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">    \t    &#125;<span class=\"keyword\">else</span>&#123;   </div><div class=\"line\">                <span class=\"keyword\">int</span> tem = array[i];  <span class=\"comment\">//保存待插入到偶数之前的奇数</span></div><div class=\"line\">                <span class=\"keyword\">int</span> j;</div><div class=\"line\">                <span class=\"keyword\">for</span>(j=i-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>&amp;&amp;(array[j]%<span class=\"number\">2</span>==<span class=\"number\">0</span>);j--)&#123;  <span class=\"comment\">//找到偶数之前插入的位置</span></div><div class=\"line\">                    array[j+<span class=\"number\">1</span>] = array[j];  <span class=\"comment\">//偶数集体后移一位</span></div><div class=\"line\">                &#125;</div><div class=\"line\">                array[j+<span class=\"number\">1</span>] = tem;  <span class=\"comment\">//将奇数插入到该位置上</span></div><div class=\"line\">            &#125;</div><div class=\"line\">    \t&#125;      </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目十四：链表中倒数第k个结点\"><a href=\"#题目十四：链表中倒数第k个结点\" class=\"headerlink\" title=\"题目十四：链表中倒数第k个结点\"></a>题目十四：链表中倒数第k个结点</h2><p><strong>题目描述:</strong>输入一个链表，输出该链表中倒数第k个结点。</p>\n<p><strong>思路：</strong> 定义两个指针p1,p2，分别指向表头，再定义count=0,表示p1在第0个结点，此时p1开始遍历链表，每经过一个结点count++，当count&gt;=k时，p2开始遍历链表，直到p1遍历结束，此时p2指向的结点即为倒数第k个结点。</p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></div><div class=\"line\"><span class=\"comment\">    int val;</span></div><div class=\"line\"><span class=\"comment\">    ListNode next = null;</span></div><div class=\"line\"><span class=\"comment\"> </span></div><div class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></div><div class=\"line\"><span class=\"comment\">        this.val = val;</span></div><div class=\"line\"><span class=\"comment\">    &#125;</span></div><div class=\"line\"><span class=\"comment\">&#125;*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">FindKthToTail</span><span class=\"params\">(ListNode head,<span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">        ListNode p = head;</div><div class=\"line\">        ListNode node = <span class=\"keyword\">null</span>;  <span class=\"comment\">//head为空，返回null</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(k&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> node;  <span class=\"comment\">//k&lt;=0无效，返回null</span></div><div class=\"line\">        <span class=\"keyword\">while</span>(head!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            count++;</div><div class=\"line\">            head = head.next;</div><div class=\"line\">            <span class=\"keyword\">if</span>(count &gt;= k) &#123;  <span class=\"comment\">//相对第一个元素为k-1的间隔时,head和p同时往后走</span></div><div class=\"line\">                node = p;</div><div class=\"line\">                p = p.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> node;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目十五：反转链表\"><a href=\"#题目十五：反转链表\" class=\"headerlink\" title=\"题目十五：反转链表\"></a>题目十五：反转链表</h2><p><strong>题目描述:</strong>输入一个链表，反转链表后，输出链表的所有元素。</p>\n<p><strong>思路：</strong> 依次遍历每个结点，同时通过头插法再重新创建新的链表</p>\n<p><strong>注：</strong>可以利用之前的结点，而不需要重新创建新的结点，以后改进。</p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></div><div class=\"line\"><span class=\"comment\">    int val;</span></div><div class=\"line\"><span class=\"comment\">    ListNode next = null;</span></div><div class=\"line\"><span class=\"comment\"> </span></div><div class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></div><div class=\"line\"><span class=\"comment\">        this.val = val;</span></div><div class=\"line\"><span class=\"comment\">    &#125;</span></div><div class=\"line\"><span class=\"comment\">&#125;*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">ReverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">        ListNode p = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> p;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            p = <span class=\"keyword\">new</span> ListNode(head.val);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ListNode q = head.next;</div><div class=\"line\">        <span class=\"keyword\">while</span>(q!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            ListNode s = <span class=\"keyword\">new</span> ListNode(q.val);</div><div class=\"line\">            s.next = p;</div><div class=\"line\">            p = s;</div><div class=\"line\">            q = q.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> p;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目十六：合并两个排序的链表\"><a href=\"#题目十六：合并两个排序的链表\" class=\"headerlink\" title=\"题目十六：合并两个排序的链表\"></a>题目十六：合并两个排序的链表</h2><p><strong>题目描述:</strong>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n<p><strong>思路：</strong> 当两个链表list1，list2（指向第一个结点）不空时，比较list1.val和list2.val的值，较小的作为合并后的第一个结点，假设list1.val较小，此时list1 = list1.next，继续比较list1.val和list2.val，直到某一个链表遍历结束，将没遍历结束的链表添加到合并后链表末尾。</p>\n<p><strong>注：</strong>可以利用之前的结点，而不需要重新创建新的结点，这样，最后直接指向没遍历结束的链表即可，同时也节省了创建新的结点的空间，后续改进。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></div><div class=\"line\"><span class=\"comment\">    int val;</span></div><div class=\"line\"><span class=\"comment\">    ListNode next = null;</span></div><div class=\"line\"><span class=\"comment\"> </span></div><div class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></div><div class=\"line\"><span class=\"comment\">        this.val = val;</span></div><div class=\"line\"><span class=\"comment\">    &#125;</span></div><div class=\"line\"><span class=\"comment\">&#125;*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">Merge</span><span class=\"params\">(ListNode list1,ListNode list2)</span> </span>&#123;</div><div class=\"line\">        ListNode p = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);  <span class=\"comment\">//创建一个头结点,数据域初始化为0，不存储数据,指针域为null</span></div><div class=\"line\">        ListNode head = p ;  <span class=\"comment\">//头指针,指向头结点</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(list1 == <span class=\"keyword\">null</span> &amp;&amp; list2 == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(list1!=<span class=\"keyword\">null</span> &amp;&amp; list2!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(list1.val &lt; list2.val)&#123;</div><div class=\"line\">                ListNode s = <span class=\"keyword\">new</span> ListNode(list1.val);</div><div class=\"line\">                p.next = s;</div><div class=\"line\">                p = s;</div><div class=\"line\">                list1 = list1.next;</div><div class=\"line\">                 </div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                ListNode s = <span class=\"keyword\">new</span> ListNode(list2.val);</div><div class=\"line\">                p.next = s;</div><div class=\"line\">                p = s;</div><div class=\"line\">                list2 = list2.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(list1!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            ListNode s = <span class=\"keyword\">new</span> ListNode(list1.val);</div><div class=\"line\">            p.next = s;</div><div class=\"line\">            p = s;</div><div class=\"line\">            list1 = list1.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(list2!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            ListNode s = <span class=\"keyword\">new</span> ListNode(list2.val);</div><div class=\"line\">            p.next = s;</div><div class=\"line\">            p = s;</div><div class=\"line\">            list2 = list2.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> head.next;  <span class=\"comment\">//头结点不存储元素,head.next指向第一个元素节点，返回 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>牛客网剑指offer题目汇总，记录自己刷题历程，原文链接：<a href=\"https://www.nowcoder.com/ta/coding-interviews\" target=\"_blank\" rel=\"external\">点击查看</a><br>","more":"</p>\n<h2 id=\"题目一：二维数组中的查找-（数组）\"><a href=\"#题目一：二维数组中的查找-（数组）\" class=\"headerlink\" title=\"题目一：二维数组中的查找   （数组）\"></a>题目一：二维数组中的查找   （数组）</h2><p><strong>题目描述:</strong>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<p><strong>思路：</strong>矩阵从左到右，从上到下都是有序的，因此，先查找目标数target在二维数组中的哪一行，通过判断是否在该行的第一个数和最后一个数之间，如果是，则定位到了行，因为该行是有序的，所以接下来通过二分查找，即可查找成功。</p>\n<p><strong>注：</strong>时间复杂度的话，查找行花了O(n), 二分查找O(logn),总共应该O(n)+O(logn),奇怪的是我使用普通的遍历查找，运行时间更更少！这不科学，二分查找效率应该更高，这应该是数据量小导致的。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">Find</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> [][] array)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(array[<span class=\"number\">0</span>].length==<span class=\"number\">0</span>) &#123; <span class=\"comment\">//[[]]的情况</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;   <span class=\"comment\">//判断二维数组是否为空</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;array.length;i++) &#123;</div><div class=\"line\">            <span class=\"comment\">// 找出target所在二维数组的行</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(target&gt;=array[i][<span class=\"number\">0</span>]&amp;&amp;target&lt;=array[i][array[i].length-<span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                <span class=\"comment\">//找到所在行之后，因为该行是有序的，此时使用二分查找即可</span></div><div class=\"line\">                <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> high = array[i].length-<span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> mid;</div><div class=\"line\">                <span class=\"keyword\">while</span>(low&lt;=high) &#123;</div><div class=\"line\">                    mid = (high + low)/<span class=\"number\">2</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(array[i][mid]&gt;target) &#123;</div><div class=\"line\">                        high = mid - <span class=\"number\">1</span>;</div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(array[i][mid]&lt;target)&#123;</div><div class=\"line\">                        low = mid + <span class=\"number\">1</span>;</div><div class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"题目二：替换空格-（字符串）\"><a href=\"#题目二：替换空格-（字符串）\" class=\"headerlink\" title=\"题目二：替换空格  （字符串）\"></a>题目二：替换空格  （字符串）</h2><p><strong>题目描述:</strong>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n<p><strong>思路：</strong></p>\n<p><strong>第一种：</strong> 直接用StringBuffer提供的replace函数。(不可取，得自己搞)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">replace(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, String str);</div></pre></td></tr></table></figure>\n<p>Replaces the characters in a substring of this sequence with characters in the specified String.</p>\n<p><strong>第二种：</strong> 先统计出空格的个数，然后计算得到替换后的字符串的长度，然后重新更新字符串的长度，此时，<strong>从后向前</strong>遍历字符串，如果是空格，替换，如果不是空格，赋原值，知道遍历结束。</p>\n<p><strong>注：</strong>从后往前，每个空格后面的字符只需要移动一次。从前往后，当遇到第一个空格时，要移动第一个空格后所有的字符一次；当遇到第二个空格时，要移动第二个空格后所有的字符一次；以此类推。所以总的移动次数会更多。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">replaceSpace</span><span class=\"params\">(StringBuffer str)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldlength = str.length()-<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> newlength = oldlength;  <span class=\"comment\">//替换之后新数组的大小</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;str.length();i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(str.charAt(i)==<span class=\"string\">' '</span>)&#123;</div><div class=\"line\">                newlength += <span class=\"number\">2</span>;   <span class=\"comment\">//由一个' '变为\"%20\",长度增加2</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        str.setLength(newlength+<span class=\"number\">1</span>);  <span class=\"comment\">//扩展str的长度,多余的位置是空字符</span></div><div class=\"line\">        <span class=\"comment\">//此时oldlength和newlength都是数组的长度-1</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(;oldlength&gt;=<span class=\"number\">0</span>&amp;&amp;oldlength&lt;newlength;oldlength--)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(str.charAt(oldlength)==<span class=\"string\">' '</span>)&#123;</div><div class=\"line\">                str.setCharAt(newlength--, <span class=\"string\">'0'</span>);</div><div class=\"line\">                str.setCharAt(newlength--, <span class=\"string\">'2'</span>);</div><div class=\"line\">                str.setCharAt(newlength--, <span class=\"string\">'%'</span>);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                str.setCharAt(newlength--, str.charAt(oldlength));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> str.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"题目三：从尾到头打印链表-（链表）\"><a href=\"#题目三：从尾到头打印链表-（链表）\" class=\"headerlink\" title=\"题目三：从尾到头打印链表 （链表）\"></a>题目三：从尾到头打印链表 （链表）</h2><p><strong>题目描述:</strong>输入一个链表，从尾到头打印链表每个节点的值。</p>\n<p><strong>思路：</strong></p>\n<p><strong>第一种：</strong> 遍历链表，将链表存入Arraylist数组vals中，然后对vals进行反转。(确实很low)</p>\n<p><strong>第二种：</strong> 使用递归思想，递归到最后一个结点，然后层层返回，此时依次add进vals数组中。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">*    public class ListNode &#123;</span></div><div class=\"line\"><span class=\"comment\">*        int val;</span></div><div class=\"line\"><span class=\"comment\">*        ListNode next = null;</span></div><div class=\"line\"><span class=\"comment\">*</span></div><div class=\"line\"><span class=\"comment\">*        ListNode(int val) &#123;</span></div><div class=\"line\"><span class=\"comment\">*            this.val = val;</span></div><div class=\"line\"><span class=\"comment\">*        &#125;</span></div><div class=\"line\"><span class=\"comment\">*    &#125;</span></div><div class=\"line\"><span class=\"comment\">*</span></div><div class=\"line\"><span class=\"comment\">*/</span></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> </span>&#123;</div><div class=\"line\">        ArrayList&lt;Integer&gt; vals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(listNode != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            vals.add(listNode.val);</div><div class=\"line\">            listNode = listNode.next;</div><div class=\"line\">            count++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;count/<span class=\"number\">2</span>;i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> tem = vals.get(i);</div><div class=\"line\">            vals.set(i, vals.get(count-i-<span class=\"number\">1</span>));</div><div class=\"line\">            vals.set(count-i-<span class=\"number\">1</span>, tem);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> vals;  </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">linklist</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; vals = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(listNode != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            printListFromTailToHead(listNode.next);</div><div class=\"line\">    \t    vals.add(listNode.val);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//return val; 返回val不需要，因为vals本身就相当于全局变量一样，每次迭代更新的都是同一个vals。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://ou6yob3zd.bkt.clouddn.com/20170819204904.png\" alt=\"\"></p>\n<h2 id=\"题目四：重建二叉树-（树）\"><a href=\"#题目四：重建二叉树-（树）\" class=\"headerlink\" title=\"题目四：重建二叉树 （树）\"></a>题目四：重建二叉树 （树）</h2><h2 id=\"题目五：用两个栈实现队列-（栈、队列）\"><a href=\"#题目五：用两个栈实现队列-（栈、队列）\" class=\"headerlink\" title=\"题目五：用两个栈实现队列 （栈、队列）\"></a>题目五：用两个栈实现队列 （栈、队列）</h2><p><strong>题目描述:</strong>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p>\n<p><strong>思路：</strong></p>\n<p>入队push:将元素进栈A。</p>\n<p>出队pop:判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，然后栈B出站。</p>\n<p><strong>注：</strong> 1 push，将数据直接压入stack1即可；2 pop,将stack1中的数据弹出压入到stack2中，则数据顺序相反，为保证最新进入的数据一致处于栈顶，只有将stack2中的数据全部pop后，才能继续将stack1中的数据压入到stack2中，继续做pop。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    Stack&lt;Integer&gt; stack1 = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">    Stack&lt;Integer&gt; stack2 = <span class=\"keyword\">new</span> Stack&lt;Integer&gt;();</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span> </span>&#123;</div><div class=\"line\">        stack1.push(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(stack1.empty()&amp;&amp;stack2.empty())&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"队列为空!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(stack2.empty())&#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>(!stack1.empty())&#123;</div><div class=\"line\">                stack2.push(stack1.pop());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> stack2.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"题目十一：二进制中1的个数-（位运算）\"><a href=\"#题目十一：二进制中1的个数-（位运算）\" class=\"headerlink\" title=\"题目十一：二进制中1的个数 （位运算）\"></a>题目十一：二进制中1的个数 （位运算）</h2><p><strong>题目描述:</strong>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>\n<p><strong>思路：</strong></p>\n<p><strong>方法一：</strong> 通过n&amp;n-1可以消除整数最右边的1。多次执行n=n&amp;n-1，最终n为0时，表示所有的1都被消除了，消除1所执行的次数即为1的个数。</p>\n<p><strong>分析：</strong>为啥n&amp;n-1可以消除整数最右边的1？ 如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变成0，原来在最右边1后面的所有的0都会变成1（如果最右边的1后面还有0的话）。其余所有位将不会受到影响。我们发现减1的结果是把从最右边的1开始的所有位都取反了，这个时候将n于n-1做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变为0，那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。</p>\n<pre><code>n=12          1100 \nn-1=11        1011\nn=12&amp;11       1000\nn=8           1000\nn-1=7         0111\nn=8&amp;7         0000\n</code></pre><p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(n!=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        n &amp;= n-<span class=\"number\">1</span>;</div><div class=\"line\">        count++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>更多参考点击：<a href=\"http://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html\" target=\"_blank\" rel=\"external\">算法-求二进制数中1的个数</a></p>\n<h2 id=\"题目十二：数值的整数次方-（代码的完整性）\"><a href=\"#题目十二：数值的整数次方-（代码的完整性）\" class=\"headerlink\" title=\"题目十二：数值的整数次方 （代码的完整性）\"></a>题目十二：数值的整数次方 （代码的完整性）</h2><p><strong>题目：</strong>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>\n<p><strong>思路：</strong></p>\n<p><strong>方法一：</strong>估计是个人都能想出来，假设要求a^b，只需将a连乘b次，此时的时间复杂度是O(b)。</p>\n<p><strong>方法二：</strong> <strong>快速幂</strong>，快速幂能将复杂度降至O(logb)，确实是快了不少。</p>\n<p>原理：假设我们要求a^b，b拆成二进制时，该二进制数第i位的权值为2^(i-1)，如下：</p>\n<p>a^11 = a^(1011) = a^(1000+0010+0001) = a^(2^0 + 2^1 + 2^3) = a^(2^0)*a^(2^1)*a^(2^3)</p>\n<p>通过使用&amp;和&gt;&gt;位运算操作，依次遍历指数二进制表示中的每一位，我们发现，结果为每一位值为1时，也即a^(2^i)的累乘，此时，相邻位的值都是前一个值的翻倍。</p>\n<p>更多信息：<a href=\"http://www.cnblogs.com/CXCXCXC/p/4641812.html\" target=\"_blank\" rel=\"external\">快速幂</a></p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">Power</span><span class=\"params\">(<span class=\"keyword\">double</span> base, <span class=\"keyword\">int</span> exponent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">double</span> result = <span class=\"number\">1.0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> e = exponent;</div><div class=\"line\">        exponent = Math.abs(exponent);</div><div class=\"line\">        <span class=\"keyword\">if</span>(exponent == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(exponent!=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((exponent&amp;<span class=\"number\">1</span>)==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">                result *= base;</div><div class=\"line\">            &#125;</div><div class=\"line\">            base *= base;    <span class=\"comment\">//每移动一位，该为代表的乘数都翻倍</span></div><div class=\"line\">            exponent = exponent &gt;&gt; <span class=\"number\">1</span>;  <span class=\"comment\">//右移一位</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> e&gt;<span class=\"number\">0</span>?result:<span class=\"number\">1</span>/result;    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目十三：调整数组顺序使奇数位于偶数前面-（数组）\"><a href=\"#题目十三：调整数组顺序使奇数位于偶数前面-（数组）\" class=\"headerlink\" title=\"题目十三：调整数组顺序使奇数位于偶数前面 （数组）\"></a>题目十三：调整数组顺序使奇数位于偶数前面 （数组）</h2><p><strong>题目描述:</strong>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>\n<p><strong>思路：</strong></p>\n<p><strong>方法一：</strong> 插入排序的思想。从第二个数开始，之前的数（也就只有一个数）是已经排好序的，此时如果第二个数是奇数的话，我们只需要插入到之前序列中所有偶数之前，如果是偶数的话，则不需要插入；继续第三个数，依次遍历完数组即可。</p>\n<p><strong>方法二：</strong>重新定义一个vector，从前往后遍历vector,遇到奇数push_back；再遍历一遍vector，遇到偶数push_back,以空间换时间，这就不实现了，easy。</p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reOrderArray</span><span class=\"params\">(<span class=\"keyword\">int</span> [] array)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;array.length;i++)&#123;</div><div class=\"line\">    \t    <span class=\"keyword\">if</span>(array[i]%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;  <span class=\"comment\">//偶数的话，继续下一个数</span></div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">    \t    &#125;<span class=\"keyword\">else</span>&#123;   </div><div class=\"line\">                <span class=\"keyword\">int</span> tem = array[i];  <span class=\"comment\">//保存待插入到偶数之前的奇数</span></div><div class=\"line\">                <span class=\"keyword\">int</span> j;</div><div class=\"line\">                <span class=\"keyword\">for</span>(j=i-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>&amp;&amp;(array[j]%<span class=\"number\">2</span>==<span class=\"number\">0</span>);j--)&#123;  <span class=\"comment\">//找到偶数之前插入的位置</span></div><div class=\"line\">                    array[j+<span class=\"number\">1</span>] = array[j];  <span class=\"comment\">//偶数集体后移一位</span></div><div class=\"line\">                &#125;</div><div class=\"line\">                array[j+<span class=\"number\">1</span>] = tem;  <span class=\"comment\">//将奇数插入到该位置上</span></div><div class=\"line\">            &#125;</div><div class=\"line\">    \t&#125;      </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目十四：链表中倒数第k个结点\"><a href=\"#题目十四：链表中倒数第k个结点\" class=\"headerlink\" title=\"题目十四：链表中倒数第k个结点\"></a>题目十四：链表中倒数第k个结点</h2><p><strong>题目描述:</strong>输入一个链表，输出该链表中倒数第k个结点。</p>\n<p><strong>思路：</strong> 定义两个指针p1,p2，分别指向表头，再定义count=0,表示p1在第0个结点，此时p1开始遍历链表，每经过一个结点count++，当count&gt;=k时，p2开始遍历链表，直到p1遍历结束，此时p2指向的结点即为倒数第k个结点。</p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></div><div class=\"line\"><span class=\"comment\">    int val;</span></div><div class=\"line\"><span class=\"comment\">    ListNode next = null;</span></div><div class=\"line\"><span class=\"comment\"> </span></div><div class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></div><div class=\"line\"><span class=\"comment\">        this.val = val;</span></div><div class=\"line\"><span class=\"comment\">    &#125;</span></div><div class=\"line\"><span class=\"comment\">&#125;*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">FindKthToTail</span><span class=\"params\">(ListNode head,<span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">        ListNode p = head;</div><div class=\"line\">        ListNode node = <span class=\"keyword\">null</span>;  <span class=\"comment\">//head为空，返回null</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(k&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> node;  <span class=\"comment\">//k&lt;=0无效，返回null</span></div><div class=\"line\">        <span class=\"keyword\">while</span>(head!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            count++;</div><div class=\"line\">            head = head.next;</div><div class=\"line\">            <span class=\"keyword\">if</span>(count &gt;= k) &#123;  <span class=\"comment\">//相对第一个元素为k-1的间隔时,head和p同时往后走</span></div><div class=\"line\">                node = p;</div><div class=\"line\">                p = p.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> node;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目十五：反转链表\"><a href=\"#题目十五：反转链表\" class=\"headerlink\" title=\"题目十五：反转链表\"></a>题目十五：反转链表</h2><p><strong>题目描述:</strong>输入一个链表，反转链表后，输出链表的所有元素。</p>\n<p><strong>思路：</strong> 依次遍历每个结点，同时通过头插法再重新创建新的链表</p>\n<p><strong>注：</strong>可以利用之前的结点，而不需要重新创建新的结点，以后改进。</p>\n<p><strong>代码：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></div><div class=\"line\"><span class=\"comment\">    int val;</span></div><div class=\"line\"><span class=\"comment\">    ListNode next = null;</span></div><div class=\"line\"><span class=\"comment\"> </span></div><div class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></div><div class=\"line\"><span class=\"comment\">        this.val = val;</span></div><div class=\"line\"><span class=\"comment\">    &#125;</span></div><div class=\"line\"><span class=\"comment\">&#125;*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">ReverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">        ListNode p = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> p;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            p = <span class=\"keyword\">new</span> ListNode(head.val);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ListNode q = head.next;</div><div class=\"line\">        <span class=\"keyword\">while</span>(q!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            ListNode s = <span class=\"keyword\">new</span> ListNode(q.val);</div><div class=\"line\">            s.next = p;</div><div class=\"line\">            p = s;</div><div class=\"line\">            q = q.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> p;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"题目十六：合并两个排序的链表\"><a href=\"#题目十六：合并两个排序的链表\" class=\"headerlink\" title=\"题目十六：合并两个排序的链表\"></a>题目十六：合并两个排序的链表</h2><p><strong>题目描述:</strong>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n<p><strong>思路：</strong> 当两个链表list1，list2（指向第一个结点）不空时，比较list1.val和list2.val的值，较小的作为合并后的第一个结点，假设list1.val较小，此时list1 = list1.next，继续比较list1.val和list2.val，直到某一个链表遍历结束，将没遍历结束的链表添加到合并后链表末尾。</p>\n<p><strong>注：</strong>可以利用之前的结点，而不需要重新创建新的结点，这样，最后直接指向没遍历结束的链表即可，同时也节省了创建新的结点的空间，后续改进。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></div><div class=\"line\"><span class=\"comment\">    int val;</span></div><div class=\"line\"><span class=\"comment\">    ListNode next = null;</span></div><div class=\"line\"><span class=\"comment\"> </span></div><div class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></div><div class=\"line\"><span class=\"comment\">        this.val = val;</span></div><div class=\"line\"><span class=\"comment\">    &#125;</span></div><div class=\"line\"><span class=\"comment\">&#125;*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">Merge</span><span class=\"params\">(ListNode list1,ListNode list2)</span> </span>&#123;</div><div class=\"line\">        ListNode p = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);  <span class=\"comment\">//创建一个头结点,数据域初始化为0，不存储数据,指针域为null</span></div><div class=\"line\">        ListNode head = p ;  <span class=\"comment\">//头指针,指向头结点</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(list1 == <span class=\"keyword\">null</span> &amp;&amp; list2 == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(list1!=<span class=\"keyword\">null</span> &amp;&amp; list2!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(list1.val &lt; list2.val)&#123;</div><div class=\"line\">                ListNode s = <span class=\"keyword\">new</span> ListNode(list1.val);</div><div class=\"line\">                p.next = s;</div><div class=\"line\">                p = s;</div><div class=\"line\">                list1 = list1.next;</div><div class=\"line\">                 </div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                ListNode s = <span class=\"keyword\">new</span> ListNode(list2.val);</div><div class=\"line\">                p.next = s;</div><div class=\"line\">                p = s;</div><div class=\"line\">                list2 = list2.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(list1!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            ListNode s = <span class=\"keyword\">new</span> ListNode(list1.val);</div><div class=\"line\">            p.next = s;</div><div class=\"line\">            p = s;</div><div class=\"line\">            list1 = list1.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span>(list2!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            ListNode s = <span class=\"keyword\">new</span> ListNode(list2.val);</div><div class=\"line\">            p.next = s;</div><div class=\"line\">            p = s;</div><div class=\"line\">            list2 = list2.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> head.next;  <span class=\"comment\">//头结点不存储元素,head.next指向第一个元素节点，返回 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6xk3rl90001h0ix6me67zsu","category_id":"cj6xk3rle0003h0ix514af82k","_id":"cj6xk3rlp0008h0ixc96e8iob"},{"post_id":"cj6xk3rlc0002h0ix1rrtvmlr","category_id":"cj6xk3rlo0006h0ix4kx6qxct","_id":"cj6xk3rlq000ch0ixj84pvm65"},{"post_id":"cj6xk3rlk0005h0ix4952843e","category_id":"cj6xk3rlp0009h0ix98jd1gv2","_id":"cj6xk3rlr000fh0ixfe9nunx4"},{"post_id":"cj6xk3rn4000nh0ixecor9hjp","category_id":"cj6xk3rnd000qh0ix4t0poisi","_id":"cj6xk3rnm000xh0ixnco4za0c"},{"post_id":"cj6xk3rna000ph0ix5wj9x99s","category_id":"cj6xk3rnd000qh0ix4t0poisi","_id":"cj6xk3rno0011h0ixjv5jb35d"},{"post_id":"cj6xk3rng000th0ixh8sx0l30","category_id":"cj6xk3rnm000yh0ixb74ohfwv","_id":"cj6xk3rnp0014h0ix46floce5"}],"PostTag":[{"post_id":"cj6xk3rl90001h0ix6me67zsu","tag_id":"cj6xk3rlj0004h0ixy2cmild6","_id":"cj6xk3rlq000bh0ixk851ojcz"},{"post_id":"cj6xk3rl90001h0ix6me67zsu","tag_id":"cj6xk3rlo0007h0ix1k70rp8i","_id":"cj6xk3rlr000dh0ixokb36cw2"},{"post_id":"cj6xk3rlc0002h0ix1rrtvmlr","tag_id":"cj6xk3rlq000ah0ix5be1jp8r","_id":"cj6xk3rls000hh0ixh283b9v5"},{"post_id":"cj6xk3rlc0002h0ix1rrtvmlr","tag_id":"cj6xk3rlr000eh0ixf7krsf4r","_id":"cj6xk3rls000ih0ixrqh5wvnh"},{"post_id":"cj6xk3rlk0005h0ix4952843e","tag_id":"cj6xk3rlr000gh0ixuhf7j2r4","_id":"cj6xk3rls000kh0ixoero24w7"},{"post_id":"cj6xk3rlk0005h0ix4952843e","tag_id":"cj6xk3rls000jh0ixwwu3u9tk","_id":"cj6xk3rlt000lh0ixfjzv78m8"},{"post_id":"cj6xk3rn4000nh0ixecor9hjp","tag_id":"cj6xk3rne000rh0ixkupxcxt4","_id":"cj6xk3rnn0010h0ixtd1ga0ep"},{"post_id":"cj6xk3rn4000nh0ixecor9hjp","tag_id":"cj6xk3rnk000wh0ixhbp85wqr","_id":"cj6xk3rno0012h0ix1rbq9x82"},{"post_id":"cj6xk3rna000ph0ix5wj9x99s","tag_id":"cj6xk3rne000rh0ixkupxcxt4","_id":"cj6xk3rnq0016h0ix6lgik0w0"},{"post_id":"cj6xk3rna000ph0ix5wj9x99s","tag_id":"cj6xk3rnk000wh0ixhbp85wqr","_id":"cj6xk3rnr0017h0ixacvutrvx"},{"post_id":"cj6xk3rng000th0ixh8sx0l30","tag_id":"cj6xk3rnp0015h0ix9b8qwzmp","_id":"cj6xk3rnu0019h0ix5di9gwwb"},{"post_id":"cj6xk3rng000th0ixh8sx0l30","tag_id":"cj6xk3rns0018h0ixoucb07dw","_id":"cj6xk3rnu001ah0ixalga60fy"},{"post_id":"cj6xk3rng000th0ixh8sx0l30","tag_id":"cj6xk3rlo0007h0ix1k70rp8i","_id":"cj6xk3rnu001bh0ix2g31jyzv"}],"Tag":[{"name":"排序","_id":"cj6xk3rlj0004h0ixy2cmild6"},{"name":"编程","_id":"cj6xk3rlo0007h0ix1k70rp8i"},{"name":"skip-gram","_id":"cj6xk3rlq000ah0ix5be1jp8r"},{"name":"CBOW","_id":"cj6xk3rlr000eh0ixf7krsf4r"},{"name":"兄弟","_id":"cj6xk3rlr000gh0ixuhf7j2r4"},{"name":"朋友","_id":"cj6xk3rls000jh0ixwwu3u9tk"},{"name":"hexo","_id":"cj6xk3rne000rh0ixkupxcxt4"},{"name":"github","_id":"cj6xk3rnk000wh0ixhbp85wqr"},{"name":"剑指offer","_id":"cj6xk3rnp0015h0ix9b8qwzmp"},{"name":"刷题","_id":"cj6xk3rns0018h0ixoucb07dw"}]}}